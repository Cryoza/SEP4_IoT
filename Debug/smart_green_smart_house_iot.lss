
smart_green_smart_house_iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000053e  00800200  0000787c  00007910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000787c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001237  0080073e  0080073e  00007e4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007e4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a90  00000000  00000000  00007eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009d70  00000000  00000000  0000897c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c5d  00000000  00000000  000126ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a9b  00000000  00000000  00015349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002688  00000000  00000000  0001bde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fdc  00000000  00000000  0001e46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000680a  00000000  00000000  00022448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  00028c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c1       	rjmp	.+516    	; 0x206 <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_12>
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <__vector_25>
      68:	0c 94 be 30 	jmp	0x617c	; 0x617c <__vector_26>
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 02 31 	jmp	0x6204	; 0x6204 <__vector_36>
      94:	0c 94 54 31 	jmp	0x62a8	; 0x62a8 <__vector_37>
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <__vector_39>
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 98 31 	jmp	0x6330	; 0x6330 <__vector_51>
      d0:	0c 94 ea 31 	jmp	0x63d4	; 0x63d4 <__vector_52>
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__vector_54>
      dc:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__vector_55>
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cc 24       	eor	r12, r12
      e6:	cc 24       	eor	r12, r12
      e8:	cc 24       	eor	r12, r12
      ea:	2b 25       	eor	r18, r11
      ec:	36 25       	eor	r19, r6
      ee:	6d 25       	eor	r22, r13
      f0:	cc 24       	eor	r12, r12
      f2:	cc 24       	eor	r12, r12
      f4:	2b 25       	eor	r18, r11
      f6:	36 25       	eor	r19, r6
      f8:	c2 35       	cpi	r28, 0x52	; 82
      fa:	32 36       	cpi	r19, 0x62	; 98
      fc:	32 36       	cpi	r19, 0x62	; 98
      fe:	32 36       	cpi	r19, 0x62	; 98
     100:	32 36       	cpi	r19, 0x62	; 98
     102:	32 36       	cpi	r19, 0x62	; 98
     104:	32 36       	cpi	r19, 0x62	; 98
     106:	32 36       	cpi	r19, 0x62	; 98
     108:	c2 35       	cpi	r28, 0x52	; 82
     10a:	32 36       	cpi	r19, 0x62	; 98
     10c:	32 36       	cpi	r19, 0x62	; 98
     10e:	32 36       	cpi	r19, 0x62	; 98
     110:	32 36       	cpi	r19, 0x62	; 98
     112:	32 36       	cpi	r19, 0x62	; 98
     114:	32 36       	cpi	r19, 0x62	; 98
     116:	32 36       	cpi	r19, 0x62	; 98
     118:	c4 35       	cpi	r28, 0x54	; 84
     11a:	32 36       	cpi	r19, 0x62	; 98
     11c:	32 36       	cpi	r19, 0x62	; 98
     11e:	32 36       	cpi	r19, 0x62	; 98
     120:	32 36       	cpi	r19, 0x62	; 98
     122:	32 36       	cpi	r19, 0x62	; 98
     124:	32 36       	cpi	r19, 0x62	; 98
     126:	32 36       	cpi	r19, 0x62	; 98
     128:	32 36       	cpi	r19, 0x62	; 98
     12a:	32 36       	cpi	r19, 0x62	; 98
     12c:	32 36       	cpi	r19, 0x62	; 98
     12e:	32 36       	cpi	r19, 0x62	; 98
     130:	32 36       	cpi	r19, 0x62	; 98
     132:	32 36       	cpi	r19, 0x62	; 98
     134:	32 36       	cpi	r19, 0x62	; 98
     136:	32 36       	cpi	r19, 0x62	; 98
     138:	c4 35       	cpi	r28, 0x54	; 84
     13a:	32 36       	cpi	r19, 0x62	; 98
     13c:	32 36       	cpi	r19, 0x62	; 98
     13e:	32 36       	cpi	r19, 0x62	; 98
     140:	32 36       	cpi	r19, 0x62	; 98
     142:	32 36       	cpi	r19, 0x62	; 98
     144:	32 36       	cpi	r19, 0x62	; 98
     146:	32 36       	cpi	r19, 0x62	; 98
     148:	32 36       	cpi	r19, 0x62	; 98
     14a:	32 36       	cpi	r19, 0x62	; 98
     14c:	32 36       	cpi	r19, 0x62	; 98
     14e:	32 36       	cpi	r19, 0x62	; 98
     150:	32 36       	cpi	r19, 0x62	; 98
     152:	32 36       	cpi	r19, 0x62	; 98
     154:	32 36       	cpi	r19, 0x62	; 98
     156:	32 36       	cpi	r19, 0x62	; 98
     158:	2e 36       	cpi	r18, 0x6E	; 110
     15a:	32 36       	cpi	r19, 0x62	; 98
     15c:	32 36       	cpi	r19, 0x62	; 98
     15e:	32 36       	cpi	r19, 0x62	; 98
     160:	32 36       	cpi	r19, 0x62	; 98
     162:	32 36       	cpi	r19, 0x62	; 98
     164:	32 36       	cpi	r19, 0x62	; 98
     166:	32 36       	cpi	r19, 0x62	; 98
     168:	f9 35       	cpi	r31, 0x59	; 89
     16a:	32 36       	cpi	r19, 0x62	; 98
     16c:	32 36       	cpi	r19, 0x62	; 98
     16e:	32 36       	cpi	r19, 0x62	; 98
     170:	32 36       	cpi	r19, 0x62	; 98
     172:	32 36       	cpi	r19, 0x62	; 98
     174:	32 36       	cpi	r19, 0x62	; 98
     176:	32 36       	cpi	r19, 0x62	; 98
     178:	32 36       	cpi	r19, 0x62	; 98
     17a:	32 36       	cpi	r19, 0x62	; 98
     17c:	32 36       	cpi	r19, 0x62	; 98
     17e:	32 36       	cpi	r19, 0x62	; 98
     180:	32 36       	cpi	r19, 0x62	; 98
     182:	32 36       	cpi	r19, 0x62	; 98
     184:	32 36       	cpi	r19, 0x62	; 98
     186:	32 36       	cpi	r19, 0x62	; 98
     188:	ed 35       	cpi	r30, 0x5D	; 93
     18a:	32 36       	cpi	r19, 0x62	; 98
     18c:	32 36       	cpi	r19, 0x62	; 98
     18e:	32 36       	cpi	r19, 0x62	; 98
     190:	32 36       	cpi	r19, 0x62	; 98
     192:	32 36       	cpi	r19, 0x62	; 98
     194:	32 36       	cpi	r19, 0x62	; 98
     196:	32 36       	cpi	r19, 0x62	; 98
     198:	11 36       	cpi	r17, 0x61	; 97

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <prvCheckTasksWaitingTermination>
     1ae:	80 91 66 17 	lds	r24, 0x1766	; 0x801766 <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	10 f0       	brcs	.+4      	; 0x1ba <prvIdleTask+0x20>
     1b6:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
     1ba:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <vApplicationIdleHook>
     1be:	f5 cf       	rjmp	.-22     	; 0x1aa <prvIdleTask+0x10>

000001c0 <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	27 97       	sbiw	r28, 0x07	; 7
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	8e 83       	std	Y+6, r24	; 0x06
     1d8:	ce 01       	movw	r24, r28
     1da:	05 96       	adiw	r24, 0x05	; 5
     1dc:	0e 94 5e 23 	call	0x46bc	; 0x46bc <prvGetNextExpireTime>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	89 83       	std	Y+1, r24	; 0x01
     1e6:	9a 83       	std	Y+2, r25	; 0x02
     1e8:	ab 83       	std	Y+3, r26	; 0x03
     1ea:	bc 83       	std	Y+4, r27	; 0x04
     1ec:	2d 81       	ldd	r18, Y+5	; 0x05
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	ab 81       	ldd	r26, Y+3	; 0x03
     1f4:	bc 81       	ldd	r27, Y+4	; 0x04
     1f6:	42 2f       	mov	r20, r18
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	0e 94 df 22 	call	0x45be	; 0x45be <prvProcessTimerOrBlockTask>
     200:	0e 94 85 24 	call	0x490a	; 0x490a <prvProcessReceivedCommands>
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <prvTimerTask+0x18>

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d1 e2       	ldi	r29, 0x21	; 33
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0c bf       	out	0x3c, r16	; 60

00000216 <__do_copy_data>:
     216:	17 e0       	ldi	r17, 0x07	; 7
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b2 e0       	ldi	r27, 0x02	; 2
     21c:	ec e7       	ldi	r30, 0x7C	; 124
     21e:	f8 e7       	ldi	r31, 0x78	; 120
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	ae 33       	cpi	r26, 0x3E	; 62
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	29 e1       	ldi	r18, 0x19	; 25
     232:	ae e3       	ldi	r26, 0x3E	; 62
     234:	b7 e0       	ldi	r27, 0x07	; 7
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 37       	cpi	r26, 0x75	; 117
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 69 28 	call	0x50d2	; 0x50d2 <main>
     244:	0c 94 3c 3c 	jmp	0x7878	; 0x7878 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     25c:	e1 2c       	mov	r14, r1
     25e:	f1 2c       	mov	r15, r1
     260:	09 81       	ldd	r16, Y+1	; 0x01
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	48 e8       	ldi	r20, 0x88	; 136
     268:	51 e0       	ldi	r21, 0x01	; 1
     26a:	61 e2       	ldi	r22, 0x21	; 33
     26c:	72 e0       	ldi	r23, 0x02	; 2
     26e:	88 e7       	ldi	r24, 0x78	; 120
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 7e 15 	call	0x2afc	; 0x2afc <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     276:	00 00       	nop
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <_lora_setup>:

static void _lora_setup(void)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	1f 92       	push	r1
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 37 34 	call	0x686e	; 0x686e <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     298:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <lora_driver_rn2483FactoryReset>
     29c:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     2a0:	29 2f       	mov	r18, r25
     2a2:	2f 93       	push	r18
     2a4:	8f 93       	push	r24
     2a6:	88 e2       	ldi	r24, 0x28	; 40
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	89 2f       	mov	r24, r25
     2ac:	8f 93       	push	r24
     2ae:	88 e2       	ldi	r24, 0x28	; 40
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	8f 93       	push	r24
     2b4:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     2c0:	0e 94 75 2d 	call	0x5aea	; 0x5aea <lora_driver_configureToEu868>
     2c4:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     2c8:	29 2f       	mov	r18, r25
     2ca:	2f 93       	push	r18
     2cc:	8f 93       	push	r24
     2ce:	8b e3       	ldi	r24, 0x3B	; 59
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	89 2f       	mov	r24, r25
     2d4:	8f 93       	push	r24
     2d6:	8b e3       	ldi	r24, 0x3B	; 59
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	8f 93       	push	r24
     2dc:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     2e8:	8e e3       	ldi	r24, 0x3E	; 62
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	0e 94 09 2c 	call	0x5812	; 0x5812 <lora_driver_getRn2483Hweui>
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     2f8:	9c 01       	movw	r18, r24
     2fa:	8e e3       	ldi	r24, 0x3E	; 62
     2fc:	97 e0       	ldi	r25, 0x07	; 7
     2fe:	89 2f       	mov	r24, r25
     300:	8f 93       	push	r24
     302:	8e e3       	ldi	r24, 0x3E	; 62
     304:	97 e0       	ldi	r25, 0x07	; 7
     306:	8f 93       	push	r24
     308:	83 2f       	mov	r24, r19
     30a:	8f 93       	push	r24
     30c:	82 2f       	mov	r24, r18
     30e:	8f 93       	push	r24
     310:	84 e5       	ldi	r24, 0x54	; 84
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	89 2f       	mov	r24, r25
     316:	8f 93       	push	r24
     318:	84 e5       	ldi	r24, 0x54	; 84
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	8f 93       	push	r24
     31e:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     32e:	8e e3       	ldi	r24, 0x3E	; 62
     330:	97 e0       	ldi	r25, 0x07	; 7
     332:	0e 94 25 2c 	call	0x584a	; 0x584a <lora_driver_setDeviceIdentifier>
     336:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     33a:	29 2f       	mov	r18, r25
     33c:	2f 93       	push	r18
     33e:	8f 93       	push	r24
     340:	8e e3       	ldi	r24, 0x3E	; 62
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	89 2f       	mov	r24, r25
     346:	8f 93       	push	r24
     348:	8e e3       	ldi	r24, 0x3E	; 62
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	8f 93       	push	r24
     34e:	88 e6       	ldi	r24, 0x68	; 104
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	89 2f       	mov	r24, r25
     354:	8f 93       	push	r24
     356:	88 e6       	ldi	r24, 0x68	; 104
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	8f 93       	push	r24
     35c:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     36c:	4e e3       	ldi	r20, 0x3E	; 62
     36e:	57 e0       	ldi	r21, 0x07	; 7
     370:	6d e7       	ldi	r22, 0x7D	; 125
     372:	72 e0       	ldi	r23, 0x02	; 2
     374:	8e e9       	ldi	r24, 0x9E	; 158
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <lora_driver_setOtaaIdentity>
     37c:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     380:	29 2f       	mov	r18, r25
     382:	2f 93       	push	r18
     384:	8f 93       	push	r24
     386:	8e e3       	ldi	r24, 0x3E	; 62
     388:	97 e0       	ldi	r25, 0x07	; 7
     38a:	89 2f       	mov	r24, r25
     38c:	8f 93       	push	r24
     38e:	8e e3       	ldi	r24, 0x3E	; 62
     390:	97 e0       	ldi	r25, 0x07	; 7
     392:	8f 93       	push	r24
     394:	8d e7       	ldi	r24, 0x7D	; 125
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	89 2f       	mov	r24, r25
     39a:	8f 93       	push	r24
     39c:	8d e7       	ldi	r24, 0x7D	; 125
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	8f 93       	push	r24
     3a2:	8e e9       	ldi	r24, 0x9E	; 158
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	89 2f       	mov	r24, r25
     3a8:	8f 93       	push	r24
     3aa:	8e e9       	ldi	r24, 0x9E	; 158
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	8f 93       	push	r24
     3b0:	8f ea       	ldi	r24, 0xAF	; 175
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	89 2f       	mov	r24, r25
     3b6:	8f 93       	push	r24
     3b8:	8f ea       	ldi	r24, 0xAF	; 175
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	8f 93       	push	r24
     3be:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     3c2:	8d b7       	in	r24, 0x3d	; 61
     3c4:	9e b7       	in	r25, 0x3e	; 62
     3c6:	0a 96       	adiw	r24, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     3d2:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <lora_driver_saveMac>
     3d6:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     3da:	29 2f       	mov	r18, r25
     3dc:	2f 93       	push	r18
     3de:	8f 93       	push	r24
     3e0:	85 ee       	ldi	r24, 0xE5	; 229
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	89 2f       	mov	r24, r25
     3e6:	8f 93       	push	r24
     3e8:	85 ee       	ldi	r24, 0xE5	; 229
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	8f 93       	push	r24
     3ee:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <lora_driver_setAdaptiveDataRate>
     400:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     404:	29 2f       	mov	r18, r25
     406:	2f 93       	push	r18
     408:	8f 93       	push	r24
     40a:	84 ef       	ldi	r24, 0xF4	; 244
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	89 2f       	mov	r24, r25
     410:	8f 93       	push	r24
     412:	84 ef       	ldi	r24, 0xF4	; 244
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	8f 93       	push	r24
     418:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     424:	84 ef       	ldi	r24, 0xF4	; 244
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <lora_driver_setReceiveDelay>
     42c:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     430:	29 2f       	mov	r18, r25
     432:	2f 93       	push	r18
     434:	8f 93       	push	r24
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	8f 93       	push	r24
     43a:	84 ef       	ldi	r24, 0xF4	; 244
     43c:	8f 93       	push	r24
     43e:	85 e1       	ldi	r24, 0x15	; 21
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	89 2f       	mov	r24, r25
     444:	8f 93       	push	r24
     446:	85 e1       	ldi	r24, 0x15	; 21
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	8f 93       	push	r24
     44c:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     45c:	8a e0       	ldi	r24, 0x0A	; 10
     45e:	89 83       	std	Y+1, r24	; 0x01
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <lora_driver_join>
     466:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     46e:	9c 01       	movw	r18, r24
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	43 2f       	mov	r20, r19
     478:	4f 93       	push	r20
     47a:	2f 93       	push	r18
     47c:	29 2f       	mov	r18, r25
     47e:	2f 93       	push	r18
     480:	8f 93       	push	r24
     482:	85 e3       	ldi	r24, 0x35	; 53
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	89 2f       	mov	r24, r25
     488:	8f 93       	push	r24
     48a:	85 e3       	ldi	r24, 0x35	; 53
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	8f 93       	push	r24
     490:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	88 30       	cpi	r24, 0x08	; 8
     4a4:	81 f0       	breq	.+32     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 9b 34 	call	0x6936	; 0x6936 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     4ac:	66 e3       	ldi	r22, 0x36	; 54
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	81 50       	subi	r24, 0x01	; 1
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	88 23       	and	r24, r24
     4c2:	71 f6       	brne	.-100    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
     4c6:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LORA_ACCEPTED)
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	88 30       	cpi	r24, 0x08	; 8
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 7d 34 	call	0x68fa	; 0x68fa <status_leds_ledOn>
		while (1)
		{
			taskYIELD();
		}
	}
}
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 8c 34 	call	0x6918	; 0x6918 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <status_leds_fastBlink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     4e2:	51 d7       	rcall	.+3746   	; 0x1386 <vPortYield>
		}
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	}
}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	60 97       	sbiw	r28, 0x10	; 16
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	98 8b       	std	Y+16, r25	; 0x10
     506:	8f 87       	std	Y+15, r24	; 0x0f
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <lora_driver_resetRn2483>
	vTaskDelay(2);
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>
	lora_driver_resetRn2483(0);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     520:	66 e9       	ldi	r22, 0x96	; 150
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     52c:	0e 94 99 2b 	call	0x5732	; 0x5732 <lora_driver_flushBuffers>

	_lora_setup();
     530:	aa de       	rcall	.-684    	; 0x286 <_lora_setup>

	_uplink_payload.len = 6;
     532:	86 e0       	ldi	r24, 0x06	; 6
     534:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <_uplink_payload+0x1>
	_uplink_payload.port_no = 2;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <_uplink_payload>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
     53e:	88 ea       	ldi	r24, 0xA8	; 168
     540:	98 e4       	ldi	r25, 0x48	; 72
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	ab 83       	std	Y+3, r26	; 0x03
     54c:	bc 83       	std	Y+4, r27	; 0x04
	xLastWakeTime = xTaskGetTickCount();
     54e:	0e 94 2f 19 	call	0x325e	; 0x325e <xTaskGetTickCount>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	8b 87       	std	Y+11, r24	; 0x0b
     558:	9c 87       	std	Y+12, r25	; 0x0c
     55a:	ad 87       	std	Y+13, r26	; 0x0d
     55c:	be 87       	std	Y+14, r27	; 0x0e
	
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	ab 81       	ldd	r26, Y+3	; 0x03
     564:	bc 81       	ldd	r27, Y+4	; 0x04
     566:	9e 01       	movw	r18, r28
     568:	25 5f       	subi	r18, 0xF5	; 245
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	ac 01       	movw	r20, r24
     56e:	bd 01       	movw	r22, r26
     570:	c9 01       	movw	r24, r18
     572:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <vTaskDelayUntil>

		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
     576:	89 e3       	ldi	r24, 0x39	; 57
     578:	90 e3       	ldi	r25, 0x30	; 48
     57a:	9e 83       	std	Y+6, r25	; 0x06
		int16_t temp = getTemperatureFromSensor(); // Dummy temp
     57c:	8d 83       	std	Y+5, r24	; 0x05
     57e:	45 d0       	rcall	.+138    	; 0x60a <getTemperatureFromSensor>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	0e 94 79 28 	call	0x50f2	; 0x50f2 <__fixsfsi>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	98 87       	std	Y+8, r25	; 0x08
     592:	8f 83       	std	Y+7, r24	; 0x07
		uint16_t co2_ppm = 1050; // Dummy CO2
     594:	8a e1       	ldi	r24, 0x1A	; 26
     596:	94 e0       	ldi	r25, 0x04	; 4
     598:	9a 87       	std	Y+10, r25	; 0x0a
     59a:	89 87       	std	Y+9, r24	; 0x09

		_uplink_payload.bytes[0] = hum >> 8;
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	9e 81       	ldd	r25, Y+6	; 0x06
     5a0:	89 2f       	mov	r24, r25
     5a2:	99 27       	eor	r25, r25
     5a4:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <_uplink_payload+0x2>
		_uplink_payload.bytes[1] = hum & 0xFF;
     5a8:	8d 81       	ldd	r24, Y+5	; 0x05
     5aa:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <_uplink_payload+0x3>
		_uplink_payload.bytes[2] = temp >> 8;
     5ae:	8f 81       	ldd	r24, Y+7	; 0x07
     5b0:	98 85       	ldd	r25, Y+8	; 0x08
     5b2:	89 2f       	mov	r24, r25
     5b4:	99 0f       	add	r25, r25
     5b6:	99 0b       	sbc	r25, r25
     5b8:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <_uplink_payload+0x4>
		_uplink_payload.bytes[3] = temp & 0xFF;
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <_uplink_payload+0x5>
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     5c2:	89 85       	ldd	r24, Y+9	; 0x09
     5c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c6:	89 2f       	mov	r24, r25
     5c8:	99 27       	eor	r25, r25
     5ca:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <_uplink_payload+0x6>
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <_uplink_payload+0x7>

		status_leds_shortPuls(led_ST4);  // OPTIONAL
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	0e 94 ad 34 	call	0x695a	; 0x695a <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     5da:	62 ea       	ldi	r22, 0xA2	; 162
     5dc:	77 e0       	ldi	r23, 0x07	; 7
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 87 2c 	call	0x590e	; 0x590e <lora_driver_sendUploadMessage>
     5e4:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <lora_driver_mapReturnCodeToText>
     5e8:	29 2f       	mov	r18, r25
     5ea:	2f 93       	push	r18
     5ec:	8f 93       	push	r24
     5ee:	85 e5       	ldi	r24, 0x55	; 85
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	89 2f       	mov	r24, r25
     5f4:	8f 93       	push	r24
     5f6:	85 e5       	ldi	r24, 0x55	; 85
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	8f 93       	push	r24
     5fc:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
	}
     608:	aa cf       	rjmp	.-172    	; 0x55e <lora_handler_task+0x6e>

0000060a <getTemperatureFromSensor>:
#include <hih8120.h>
#include <ATMEGA_FreeRTOS.h>
#include <stdio.h>

float getTemperatureFromSensor()
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	1f 92       	push	r1
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	uint16_t temperature = 0;
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	19 82       	std	Y+1, r1	; 0x01
	
	if(HIH8120_OK != hih8120_wakeup())
     61a:	0e 94 39 2a 	call	0x5472	; 0x5472 <hih8120_wakeup>
     61e:	88 23       	and	r24, r24
     620:	a1 f0       	breq	.+40     	; 0x64a <getTemperatureFromSensor+0x40>
	{
		printf("Error in wake up temp sensor! %s\n", hih8120_wakeup());
     622:	0e 94 39 2a 	call	0x5472	; 0x5472 <hih8120_wakeup>
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	29 2f       	mov	r18, r25
     62c:	2f 93       	push	r18
     62e:	8f 93       	push	r24
     630:	8a e6       	ldi	r24, 0x6A	; 106
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	89 2f       	mov	r24, r25
     636:	8f 93       	push	r24
     638:	8a e6       	ldi	r24, 0x6A	; 106
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	8f 93       	push	r24
     63e:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
	}
	vTaskDelay(pdMS_TO_TICKS(250));
     64a:	6f e0       	ldi	r22, 0x0F	; 15
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>
	
	if(HIH8120_OK != hih8120_measure())
     656:	0e 94 4e 2a 	call	0x549c	; 0x549c <hih8120_measure>
     65a:	88 23       	and	r24, r24
     65c:	a1 f0       	breq	.+40     	; 0x686 <getTemperatureFromSensor+0x7c>
	{
		printf("Error in measure temp sensor! %s\n", hih8120_measure());
     65e:	0e 94 4e 2a 	call	0x549c	; 0x549c <hih8120_measure>
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	29 2f       	mov	r18, r25
     668:	2f 93       	push	r18
     66a:	8f 93       	push	r24
     66c:	8c e8       	ldi	r24, 0x8C	; 140
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	89 2f       	mov	r24, r25
     672:	8f 93       	push	r24
     674:	8c e8       	ldi	r24, 0x8C	; 140
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	8f 93       	push	r24
     67a:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
	}
	vTaskDelay(pdMS_TO_TICKS(100));	
     686:	66 e0       	ldi	r22, 0x06	; 6
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>
	temperature = hih8120_getTemperature_x10();
     692:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <hih8120_getTemperature_x10>
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	89 83       	std	Y+1, r24	; 0x01
	printf("Temperature: %.2f",temperature);
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	8f 93       	push	r24
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	8f 93       	push	r24
     6a2:	8e ea       	ldi	r24, 0xAE	; 174
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	89 2f       	mov	r24, r25
     6a8:	8f 93       	push	r24
     6aa:	8e ea       	ldi	r24, 0xAE	; 174
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	8f 93       	push	r24
     6b0:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
	return temperature;
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	cc 01       	movw	r24, r24
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	bc 01       	movw	r22, r24
     6c8:	cd 01       	movw	r24, r26
     6ca:	0e 94 aa 28 	call	0x5154	; 0x5154 <__floatunsisf>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	27 e0       	ldi	r18, 0x07	; 7
     6ee:	31 e0       	ldi	r19, 0x01	; 1
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	2f 60       	ori	r18, 0x0F	; 15
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
	 #endif
	 #endif
 }
     6fa:	00 00       	nop
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	28 e0       	ldi	r18, 0x08	; 8
     714:	31 e0       	ldi	r19, 0x01	; 1
     716:	f9 01       	movw	r30, r18
     718:	20 81       	ld	r18, Z
     71a:	20 7f       	andi	r18, 0xF0	; 240
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	28 e0       	ldi	r18, 0x08	; 8
     726:	31 e0       	ldi	r19, 0x01	; 1
     728:	f9 01       	movw	r30, r18
     72a:	20 81       	ld	r18, Z
     72c:	32 2f       	mov	r19, r18
     72e:	29 81       	ldd	r18, Y+1	; 0x01
     730:	2f 70       	andi	r18, 0x0F	; 15
     732:	23 2b       	or	r18, r19
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
		 #endif
	}
     738:	00 00       	nop
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	1f 92       	push	r1
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	28 e0       	ldi	r18, 0x08	; 8
     754:	31 e0       	ldi	r19, 0x01	; 1
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	20 7f       	andi	r18, 0xF0	; 240
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
		#endif
	}
     760:	00 00       	nop
     762:	0f 90       	pop	r0
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	2a 97       	sbiw	r28, 0x0a	; 10
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	9a 87       	std	Y+10, r25	; 0x0a
     780:	89 87       	std	Y+9, r24	; 0x09
     782:	1e 82       	std	Y+6, r1	; 0x06
     784:	1d 82       	std	Y+5, r1	; 0x05
     786:	0e 94 90 18 	call	0x3120	; 0x3120 <vTaskSuspendAll>
     78a:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <pxEnd>
     78e:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <pxEnd+0x1>
     792:	89 2b       	or	r24, r25
     794:	09 f4       	brne	.+2      	; 0x798 <pvPortMalloc+0x2e>
     796:	4e d1       	rcall	.+668    	; 0xa34 <prvHeapInit>
     798:	20 91 62 17 	lds	r18, 0x1762	; 0x801762 <xBlockAllocatedBit>
     79c:	30 91 63 17 	lds	r19, 0x1763	; 0x801763 <xBlockAllocatedBit+0x1>
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a4:	82 23       	and	r24, r18
     7a6:	93 23       	and	r25, r19
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <pvPortMalloc+0x44>
     7ac:	ca c0       	rjmp	.+404    	; 0x942 <pvPortMalloc+0x1d8>
     7ae:	89 85       	ldd	r24, Y+9	; 0x09
     7b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b2:	89 2b       	or	r24, r25
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <pvPortMalloc+0x5c>
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	29 85       	ldd	r18, Y+9	; 0x09
     7bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7be:	82 0f       	add	r24, r18
     7c0:	93 1f       	adc	r25, r19
     7c2:	9a 87       	std	Y+10, r25	; 0x0a
     7c4:	89 87       	std	Y+9, r24	; 0x09
     7c6:	89 85       	ldd	r24, Y+9	; 0x09
     7c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ca:	89 2b       	or	r24, r25
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <pvPortMalloc+0x66>
     7ce:	b9 c0       	rjmp	.+370    	; 0x942 <pvPortMalloc+0x1d8>
     7d0:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <xFreeBytesRemaining>
     7d4:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <xFreeBytesRemaining+0x1>
     7d8:	29 85       	ldd	r18, Y+9	; 0x09
     7da:	3a 85       	ldd	r19, Y+10	; 0x0a
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	08 f4       	brcc	.+2      	; 0x7e4 <pvPortMalloc+0x7a>
     7e2:	af c0       	rjmp	.+350    	; 0x942 <pvPortMalloc+0x1d8>
     7e4:	88 e5       	ldi	r24, 0x58	; 88
     7e6:	97 e1       	ldi	r25, 0x17	; 23
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	80 91 58 17 	lds	r24, 0x1758	; 0x801758 <xStart>
     7f0:	90 91 59 17 	lds	r25, 0x1759	; 0x801759 <xStart+0x1>
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <pvPortMalloc+0xa6>
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	fc 01       	movw	r30, r24
     816:	22 81       	ldd	r18, Z+2	; 0x02
     818:	33 81       	ldd	r19, Z+3	; 0x03
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	9a 85       	ldd	r25, Y+10	; 0x0a
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	38 f4       	brcc	.+14     	; 0x832 <pvPortMalloc+0xc8>
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	89 2b       	or	r24, r25
     830:	21 f7       	brne	.-56     	; 0x7fa <pvPortMalloc+0x90>
     832:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <pxEnd>
     836:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <pxEnd+0x1>
     83a:	29 81       	ldd	r18, Y+1	; 0x01
     83c:	3a 81       	ldd	r19, Y+2	; 0x02
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	09 f4       	brne	.+2      	; 0x846 <pvPortMalloc+0xdc>
     844:	7e c0       	rjmp	.+252    	; 0x942 <pvPortMalloc+0x1d8>
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	9c 81       	ldd	r25, Y+4	; 0x04
     84a:	fc 01       	movw	r30, r24
     84c:	20 81       	ld	r18, Z
     84e:	31 81       	ldd	r19, Z+1	; 0x01
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	9e 83       	std	Y+6, r25	; 0x06
     85a:	8d 83       	std	Y+5, r24	; 0x05
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	fc 01       	movw	r30, r24
     862:	20 81       	ld	r18, Z
     864:	31 81       	ldd	r19, Z+1	; 0x01
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	fc 01       	movw	r30, r24
     86c:	31 83       	std	Z+1, r19	; 0x01
     86e:	20 83       	st	Z, r18
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	fc 01       	movw	r30, r24
     876:	22 81       	ldd	r18, Z+2	; 0x02
     878:	33 81       	ldd	r19, Z+3	; 0x03
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	9a 85       	ldd	r25, Y+10	; 0x0a
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	00 f5       	brcc	.+64     	; 0x8d0 <pvPortMalloc+0x166>
     890:	29 81       	ldd	r18, Y+1	; 0x01
     892:	3a 81       	ldd	r19, Y+2	; 0x02
     894:	89 85       	ldd	r24, Y+9	; 0x09
     896:	9a 85       	ldd	r25, Y+10	; 0x0a
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
     89c:	98 87       	std	Y+8, r25	; 0x08
     89e:	8f 83       	std	Y+7, r24	; 0x07
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	fc 01       	movw	r30, r24
     8a6:	22 81       	ldd	r18, Z+2	; 0x02
     8a8:	33 81       	ldd	r19, Z+3	; 0x03
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ae:	28 1b       	sub	r18, r24
     8b0:	39 0b       	sbc	r19, r25
     8b2:	8f 81       	ldd	r24, Y+7	; 0x07
     8b4:	98 85       	ldd	r25, Y+8	; 0x08
     8b6:	fc 01       	movw	r30, r24
     8b8:	33 83       	std	Z+3, r19	; 0x03
     8ba:	22 83       	std	Z+2, r18	; 0x02
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	29 85       	ldd	r18, Y+9	; 0x09
     8c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c4:	fc 01       	movw	r30, r24
     8c6:	33 83       	std	Z+3, r19	; 0x03
     8c8:	22 83       	std	Z+2, r18	; 0x02
     8ca:	8f 81       	ldd	r24, Y+7	; 0x07
     8cc:	98 85       	ldd	r25, Y+8	; 0x08
     8ce:	32 d1       	rcall	.+612    	; 0xb34 <prvInsertBlockIntoFreeList>
     8d0:	20 91 5e 17 	lds	r18, 0x175E	; 0x80175e <xFreeBytesRemaining>
     8d4:	30 91 5f 17 	lds	r19, 0x175F	; 0x80175f <xFreeBytesRemaining+0x1>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	82 81       	ldd	r24, Z+2	; 0x02
     8e0:	93 81       	ldd	r25, Z+3	; 0x03
     8e2:	a9 01       	movw	r20, r18
     8e4:	48 1b       	sub	r20, r24
     8e6:	59 0b       	sbc	r21, r25
     8e8:	ca 01       	movw	r24, r20
     8ea:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <xFreeBytesRemaining+0x1>
     8ee:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <xFreeBytesRemaining>
     8f2:	20 91 5e 17 	lds	r18, 0x175E	; 0x80175e <xFreeBytesRemaining>
     8f6:	30 91 5f 17 	lds	r19, 0x175F	; 0x80175f <xFreeBytesRemaining+0x1>
     8fa:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <xMinimumEverFreeBytesRemaining>
     8fe:	90 91 61 17 	lds	r25, 0x1761	; 0x801761 <xMinimumEverFreeBytesRemaining+0x1>
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	40 f4       	brcc	.+16     	; 0x918 <pvPortMalloc+0x1ae>
     908:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <xFreeBytesRemaining>
     90c:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <xFreeBytesRemaining+0x1>
     910:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <xMinimumEverFreeBytesRemaining+0x1>
     914:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <xMinimumEverFreeBytesRemaining>
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	fc 01       	movw	r30, r24
     91e:	22 81       	ldd	r18, Z+2	; 0x02
     920:	33 81       	ldd	r19, Z+3	; 0x03
     922:	80 91 62 17 	lds	r24, 0x1762	; 0x801762 <xBlockAllocatedBit>
     926:	90 91 63 17 	lds	r25, 0x1763	; 0x801763 <xBlockAllocatedBit+0x1>
     92a:	28 2b       	or	r18, r24
     92c:	39 2b       	or	r19, r25
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	fc 01       	movw	r30, r24
     934:	33 83       	std	Z+3, r19	; 0x03
     936:	22 83       	std	Z+2, r18	; 0x02
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	9a 81       	ldd	r25, Y+2	; 0x02
     93c:	fc 01       	movw	r30, r24
     93e:	11 82       	std	Z+1, r1	; 0x01
     940:	10 82       	st	Z, r1
     942:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	89 2b       	or	r24, r25
     94c:	11 f4       	brne	.+4      	; 0x952 <pvPortMalloc+0x1e8>
     94e:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <vApplicationMallocFailedHook>
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	2a 96       	adiw	r28, 0x0a	; 10
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <vPortFree>:
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	00 d0       	rcall	.+0      	; 0x96e <vPortFree+0x6>
     96e:	00 d0       	rcall	.+0      	; 0x970 <vPortFree+0x8>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	9e 83       	std	Y+6, r25	; 0x06
     976:	8d 83       	std	Y+5, r24	; 0x05
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	9e 81       	ldd	r25, Y+6	; 0x06
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	89 2b       	or	r24, r25
     986:	09 f4       	brne	.+2      	; 0x98a <vPortFree+0x22>
     988:	4b c0       	rjmp	.+150    	; 0xa20 <vPortFree+0xb8>
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	91 95       	neg	r25
     990:	81 95       	neg	r24
     992:	91 09       	sbc	r25, r1
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	3a 81       	ldd	r19, Y+2	; 0x02
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	9c 83       	std	Y+4, r25	; 0x04
     9a6:	8b 83       	std	Y+3, r24	; 0x03
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	fc 01       	movw	r30, r24
     9ae:	22 81       	ldd	r18, Z+2	; 0x02
     9b0:	33 81       	ldd	r19, Z+3	; 0x03
     9b2:	80 91 62 17 	lds	r24, 0x1762	; 0x801762 <xBlockAllocatedBit>
     9b6:	90 91 63 17 	lds	r25, 0x1763	; 0x801763 <xBlockAllocatedBit+0x1>
     9ba:	82 23       	and	r24, r18
     9bc:	93 23       	and	r25, r19
     9be:	89 2b       	or	r24, r25
     9c0:	79 f1       	breq	.+94     	; 0xa20 <vPortFree+0xb8>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	89 2b       	or	r24, r25
     9ce:	41 f5       	brne	.+80     	; 0xa20 <vPortFree+0xb8>
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	fc 01       	movw	r30, r24
     9d6:	22 81       	ldd	r18, Z+2	; 0x02
     9d8:	33 81       	ldd	r19, Z+3	; 0x03
     9da:	80 91 62 17 	lds	r24, 0x1762	; 0x801762 <xBlockAllocatedBit>
     9de:	90 91 63 17 	lds	r25, 0x1763	; 0x801763 <xBlockAllocatedBit+0x1>
     9e2:	80 95       	com	r24
     9e4:	90 95       	com	r25
     9e6:	28 23       	and	r18, r24
     9e8:	39 23       	and	r19, r25
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	fc 01       	movw	r30, r24
     9f0:	33 83       	std	Z+3, r19	; 0x03
     9f2:	22 83       	std	Z+2, r18	; 0x02
     9f4:	0e 94 90 18 	call	0x3120	; 0x3120 <vTaskSuspendAll>
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	fc 01       	movw	r30, r24
     9fe:	22 81       	ldd	r18, Z+2	; 0x02
     a00:	33 81       	ldd	r19, Z+3	; 0x03
     a02:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <xFreeBytesRemaining>
     a06:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <xFreeBytesRemaining+0x1>
     a0a:	82 0f       	add	r24, r18
     a0c:	93 1f       	adc	r25, r19
     a0e:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <xFreeBytesRemaining+0x1>
     a12:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <xFreeBytesRemaining>
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	8c d0       	rcall	.+280    	; 0xb34 <prvInsertBlockIntoFreeList>
     a1c:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
     a20:	00 00       	nop
     a22:	26 96       	adiw	r28, 0x06	; 6
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	28 97       	sbiw	r28, 0x08	; 8
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
     a48:	80 ea       	ldi	r24, 0xA0	; 160
     a4a:	9f e0       	ldi	r25, 0x0F	; 15
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
     a50:	88 eb       	ldi	r24, 0xB8	; 184
     a52:	97 e0       	ldi	r25, 0x07	; 7
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	8b 83       	std	Y+3, r24	; 0x03
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	9e 83       	std	Y+6, r25	; 0x06
     a5e:	8d 83       	std	Y+5, r24	; 0x05

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	9e 81       	ldd	r25, Y+6	; 0x06
     a64:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <xStart+0x1>
     a68:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <xStart>
	xStart.xBlockSize = ( size_t ) 0;
     a6c:	10 92 5b 17 	sts	0x175B, r1	; 0x80175b <xStart+0x3>
     a70:	10 92 5a 17 	sts	0x175A, r1	; 0x80175a <xStart+0x2>

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     a74:	2d 81       	ldd	r18, Y+5	; 0x05
     a76:	3e 81       	ldd	r19, Y+6	; 0x06
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
	uxAddress -= xHeapStructSize;
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	2b 81       	ldd	r18, Y+3	; 0x03
     a8a:	3c 81       	ldd	r19, Y+4	; 0x04
     a8c:	a9 01       	movw	r20, r18
     a8e:	48 1b       	sub	r20, r24
     a90:	59 0b       	sbc	r21, r25
     a92:	ca 01       	movw	r24, r20
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 83       	std	Y+3, r24	; 0x03
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <pxEnd+0x1>
     aa0:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <pxEnd>
	pxEnd->xBlockSize = 0;
     aa4:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <pxEnd>
     aa8:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <pxEnd+0x1>
     aac:	fc 01       	movw	r30, r24
     aae:	13 82       	std	Z+3, r1	; 0x03
     ab0:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     ab2:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <pxEnd>
     ab6:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <pxEnd+0x1>
     aba:	fc 01       	movw	r30, r24
     abc:	11 82       	std	Z+1, r1	; 0x01
     abe:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     ac0:	8d 81       	ldd	r24, Y+5	; 0x05
     ac2:	9e 81       	ldd	r25, Y+6	; 0x06
     ac4:	98 87       	std	Y+8, r25	; 0x08
     ac6:	8f 83       	std	Y+7, r24	; 0x07
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     ac8:	8f 81       	ldd	r24, Y+7	; 0x07
     aca:	98 85       	ldd	r25, Y+8	; 0x08
     acc:	2b 81       	ldd	r18, Y+3	; 0x03
     ace:	3c 81       	ldd	r19, Y+4	; 0x04
     ad0:	28 1b       	sub	r18, r24
     ad2:	39 0b       	sbc	r19, r25
     ad4:	8f 81       	ldd	r24, Y+7	; 0x07
     ad6:	98 85       	ldd	r25, Y+8	; 0x08
     ad8:	fc 01       	movw	r30, r24
     ada:	33 83       	std	Z+3, r19	; 0x03
     adc:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     ade:	20 91 5c 17 	lds	r18, 0x175C	; 0x80175c <pxEnd>
     ae2:	30 91 5d 17 	lds	r19, 0x175D	; 0x80175d <pxEnd+0x1>
     ae6:	8f 81       	ldd	r24, Y+7	; 0x07
     ae8:	98 85       	ldd	r25, Y+8	; 0x08
     aea:	fc 01       	movw	r30, r24
     aec:	31 83       	std	Z+1, r19	; 0x01
     aee:	20 83       	st	Z, r18

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	98 85       	ldd	r25, Y+8	; 0x08
     af4:	fc 01       	movw	r30, r24
     af6:	82 81       	ldd	r24, Z+2	; 0x02
     af8:	93 81       	ldd	r25, Z+3	; 0x03
     afa:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <xMinimumEverFreeBytesRemaining+0x1>
     afe:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b02:	8f 81       	ldd	r24, Y+7	; 0x07
     b04:	98 85       	ldd	r25, Y+8	; 0x08
     b06:	fc 01       	movw	r30, r24
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <xFreeBytesRemaining+0x1>
     b10:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e8       	ldi	r25, 0x80	; 128
     b18:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <xBlockAllocatedBit+0x1>
     b1c:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <xBlockAllocatedBit>
}
     b20:	00 00       	nop
     b22:	28 96       	adiw	r28, 0x08	; 8
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <prvInsertBlockIntoFreeList+0x6>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <prvInsertBlockIntoFreeList+0x8>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	9e 83       	std	Y+6, r25	; 0x06
     b42:	8d 83       	std	Y+5, r24	; 0x05
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     b44:	88 e5       	ldi	r24, 0x58	; 88
     b46:	97 e1       	ldi	r25, 0x17	; 23
     b48:	9a 83       	std	Y+2, r25	; 0x02
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <prvInsertBlockIntoFreeList+0x28>
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	fc 01       	movw	r30, r24
     b62:	20 81       	ld	r18, Z
     b64:	31 81       	ldd	r19, Z+1	; 0x01
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	28 17       	cp	r18, r24
     b6c:	39 07       	cpc	r19, r25
     b6e:	78 f3       	brcs	.-34     	; 0xb4e <prvInsertBlockIntoFreeList+0x1a>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	fc 01       	movw	r30, r24
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	2b 81       	ldd	r18, Y+3	; 0x03
     b84:	3c 81       	ldd	r19, Y+4	; 0x04
     b86:	28 0f       	add	r18, r24
     b88:	39 1f       	adc	r19, r25
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	28 17       	cp	r18, r24
     b90:	39 07       	cpc	r19, r25
     b92:	a9 f4       	brne	.+42     	; 0xbbe <prvInsertBlockIntoFreeList+0x8a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	fc 01       	movw	r30, r24
     b9a:	22 81       	ldd	r18, Z+2	; 0x02
     b9c:	33 81       	ldd	r19, Z+3	; 0x03
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	fc 01       	movw	r30, r24
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	28 0f       	add	r18, r24
     baa:	39 1f       	adc	r19, r25
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	fc 01       	movw	r30, r24
     bb2:	33 83       	std	Z+3, r19	; 0x03
     bb4:	22 83       	std	Z+2, r18	; 0x02
		pxBlockToInsert = pxIterator;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	9e 83       	std	Y+6, r25	; 0x06
     bbc:	8d 83       	std	Y+5, r24	; 0x05
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     bc6:	8d 81       	ldd	r24, Y+5	; 0x05
     bc8:	9e 81       	ldd	r25, Y+6	; 0x06
     bca:	fc 01       	movw	r30, r24
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	93 81       	ldd	r25, Z+3	; 0x03
     bd0:	2b 81       	ldd	r18, Y+3	; 0x03
     bd2:	3c 81       	ldd	r19, Y+4	; 0x04
     bd4:	28 0f       	add	r18, r24
     bd6:	39 1f       	adc	r19, r25
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	c1 f5       	brne	.+112    	; 0xc58 <prvInsertBlockIntoFreeList+0x124>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	fc 01       	movw	r30, r24
     bee:	20 81       	ld	r18, Z
     bf0:	31 81       	ldd	r19, Z+1	; 0x01
     bf2:	80 91 5c 17 	lds	r24, 0x175C	; 0x80175c <pxEnd>
     bf6:	90 91 5d 17 	lds	r25, 0x175D	; 0x80175d <pxEnd+0x1>
     bfa:	28 17       	cp	r18, r24
     bfc:	39 07       	cpc	r19, r25
     bfe:	11 f1       	breq	.+68     	; 0xc44 <prvInsertBlockIntoFreeList+0x110>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	9e 81       	ldd	r25, Y+6	; 0x06
     c04:	fc 01       	movw	r30, r24
     c06:	22 81       	ldd	r18, Z+2	; 0x02
     c08:	33 81       	ldd	r19, Z+3	; 0x03
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	fc 01       	movw	r30, r24
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	28 0f       	add	r18, r24
     c1c:	39 1f       	adc	r19, r25
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	fc 01       	movw	r30, r24
     c24:	33 83       	std	Z+3, r19	; 0x03
     c26:	22 83       	std	Z+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	fc 01       	movw	r30, r24
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	fc 01       	movw	r30, r24
     c3e:	31 83       	std	Z+1, r19	; 0x01
     c40:	20 83       	st	Z, r18
     c42:	14 c0       	rjmp	.+40     	; 0xc6c <prvInsertBlockIntoFreeList+0x138>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c44:	20 91 5c 17 	lds	r18, 0x175C	; 0x80175c <pxEnd>
     c48:	30 91 5d 17 	lds	r19, 0x175D	; 0x80175d <pxEnd+0x1>
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	fc 01       	movw	r30, r24
     c52:	31 83       	std	Z+1, r19	; 0x01
     c54:	20 83       	st	Z, r18
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <prvInsertBlockIntoFreeList+0x138>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 81       	ld	r18, Z
     c60:	31 81       	ldd	r19, Z+1	; 0x01
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	fc 01       	movw	r30, r24
     c68:	31 83       	std	Z+1, r19	; 0x01
     c6a:	20 83       	st	Z, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     c6c:	29 81       	ldd	r18, Y+1	; 0x01
     c6e:	3a 81       	ldd	r19, Y+2	; 0x02
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	39 f0       	breq	.+14     	; 0xc88 <prvInsertBlockIntoFreeList+0x154>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	2d 81       	ldd	r18, Y+5	; 0x05
     c80:	3e 81       	ldd	r19, Y+6	; 0x06
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     c88:	00 00       	nop
     c8a:	26 96       	adiw	r28, 0x06	; 6
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	1f 92       	push	r1
     ca2:	1f 92       	push	r1
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	9c 01       	movw	r18, r24
     cb2:	2d 5f       	subi	r18, 0xFD	; 253
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	32 83       	std	Z+2, r19	; 0x02
     cbe:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     cc0:	29 81       	ldd	r18, Y+1	; 0x01
     cc2:	3a 81       	ldd	r19, Y+2	; 0x02
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	9f ef       	ldi	r25, 0xFF	; 255
     cc8:	dc 01       	movw	r26, r24
     cca:	f9 01       	movw	r30, r18
     ccc:	83 83       	std	Z+3, r24	; 0x03
     cce:	94 83       	std	Z+4, r25	; 0x04
     cd0:	a5 83       	std	Z+5, r26	; 0x05
     cd2:	b6 83       	std	Z+6, r27	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	9c 01       	movw	r18, r24
     cda:	2d 5f       	subi	r18, 0xFD	; 253
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	fc 01       	movw	r30, r24
     ce4:	30 87       	std	Z+8, r19	; 0x08
     ce6:	27 83       	std	Z+7, r18	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	9c 01       	movw	r18, r24
     cee:	2d 5f       	subi	r18, 0xFD	; 253
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
     cf6:	fc 01       	movw	r30, r24
     cf8:	32 87       	std	Z+10, r19	; 0x0a
     cfa:	21 87       	std	Z+9, r18	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	fc 01       	movw	r30, r24
     d02:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d04:	00 00       	nop
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	1f 92       	push	r1
     d16:	1f 92       	push	r1
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	fc 01       	movw	r30, r24
     d26:	13 86       	std	Z+11, r1	; 0x0b
     d28:	12 86       	std	Z+10, r1	; 0x0a

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d2a:	00 00       	nop
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <vListInsertEnd+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <vListInsertEnd+0x8>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	7e 83       	std	Y+6, r23	; 0x06
     d48:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	fc 01       	movw	r30, r24
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	92 81       	ldd	r25, Z+2	; 0x02
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	29 81       	ldd	r18, Y+1	; 0x01
     d5e:	3a 81       	ldd	r19, Y+2	; 0x02
     d60:	fc 01       	movw	r30, r24
     d62:	35 83       	std	Z+5, r19	; 0x05
     d64:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	26 81       	ldd	r18, Z+6	; 0x06
     d6e:	37 81       	ldd	r19, Z+7	; 0x07
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	fc 01       	movw	r30, r24
     d76:	37 83       	std	Z+7, r19	; 0x07
     d78:	26 83       	std	Z+6, r18	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	86 81       	ldd	r24, Z+6	; 0x06
     d82:	97 81       	ldd	r25, Z+7	; 0x07
     d84:	2d 81       	ldd	r18, Y+5	; 0x05
     d86:	3e 81       	ldd	r19, Y+6	; 0x06
     d88:	fc 01       	movw	r30, r24
     d8a:	35 83       	std	Z+5, r19	; 0x05
     d8c:	24 83       	std	Z+4, r18	; 0x04
    pxIndex->pxPrevious = pxNewListItem;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	2d 81       	ldd	r18, Y+5	; 0x05
     d94:	3e 81       	ldd	r19, Y+6	; 0x06
     d96:	fc 01       	movw	r30, r24
     d98:	37 83       	std	Z+7, r19	; 0x07
     d9a:	26 83       	std	Z+6, r18	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	fc 01       	movw	r30, r24
     da6:	33 87       	std	Z+11, r19	; 0x0b
     da8:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	fc 01       	movw	r30, r24
     db0:	80 81       	ld	r24, Z
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	28 0f       	add	r18, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18
}
     dbe:	00 00       	nop
     dc0:	26 96       	adiw	r28, 0x06	; 6
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2a 97       	sbiw	r28, 0x0a	; 10
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	98 87       	std	Y+8, r25	; 0x08
     de8:	8f 83       	std	Y+7, r24	; 0x07
     dea:	7a 87       	std	Y+10, r23	; 0x0a
     dec:	69 87       	std	Y+9, r22	; 0x09
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	a2 81       	ldd	r26, Z+2	; 0x02
     dfa:	b3 81       	ldd	r27, Z+3	; 0x03
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	ad 83       	std	Y+5, r26	; 0x05
     e02:	be 83       	std	Y+6, r27	; 0x06
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	ad 81       	ldd	r26, Y+5	; 0x05
     e0a:	be 81       	ldd	r27, Y+6	; 0x06
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	af 4f       	sbci	r26, 0xFF	; 255
     e12:	bf 4f       	sbci	r27, 0xFF	; 255
     e14:	41 f4       	brne	.+16     	; 0xe26 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	fc 01       	movw	r30, r24
     e1c:	81 85       	ldd	r24, Z+9	; 0x09
     e1e:	92 85       	ldd	r25, Z+10	; 0x0a
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	20 c0       	rjmp	.+64     	; 0xe66 <vListInsert+0x94>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	98 85       	ldd	r25, Y+8	; 0x08
     e2a:	03 96       	adiw	r24, 0x03	; 3
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <vListInsert+0x6e>
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	fc 01       	movw	r30, r24
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	95 81       	ldd	r25, Z+5	; 0x05
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	fc 01       	movw	r30, r24
     e46:	84 81       	ldd	r24, Z+4	; 0x04
     e48:	95 81       	ldd	r25, Z+5	; 0x05
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 81       	ld	r18, Z
     e4e:	31 81       	ldd	r19, Z+1	; 0x01
     e50:	42 81       	ldd	r20, Z+2	; 0x02
     e52:	53 81       	ldd	r21, Z+3	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	ad 81       	ldd	r26, Y+5	; 0x05
     e5a:	be 81       	ldd	r27, Y+6	; 0x06
     e5c:	82 17       	cp	r24, r18
     e5e:	93 07       	cpc	r25, r19
     e60:	a4 07       	cpc	r26, r20
     e62:	b5 07       	cpc	r27, r21
     e64:	30 f7       	brcc	.-52     	; 0xe32 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	24 81       	ldd	r18, Z+4	; 0x04
     e6e:	35 81       	ldd	r19, Z+5	; 0x05
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	fc 01       	movw	r30, r24
     e76:	35 83       	std	Z+5, r19	; 0x05
     e78:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	fc 01       	movw	r30, r24
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	95 81       	ldd	r25, Z+5	; 0x05
     e84:	29 85       	ldd	r18, Y+9	; 0x09
     e86:	3a 85       	ldd	r19, Y+10	; 0x0a
     e88:	fc 01       	movw	r30, r24
     e8a:	37 83       	std	Z+7, r19	; 0x07
     e8c:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	37 83       	std	Z+7, r19	; 0x07
     e9a:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	29 85       	ldd	r18, Y+9	; 0x09
     ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea4:	fc 01       	movw	r30, r24
     ea6:	35 83       	std	Z+5, r19	; 0x05
     ea8:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	2f 81       	ldd	r18, Y+7	; 0x07
     eb0:	38 85       	ldd	r19, Y+8	; 0x08
     eb2:	fc 01       	movw	r30, r24
     eb4:	33 87       	std	Z+11, r19	; 0x0b
     eb6:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	98 85       	ldd	r25, Y+8	; 0x08
     ebc:	fc 01       	movw	r30, r24
     ebe:	80 81       	ld	r24, Z
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	28 0f       	add	r18, r24
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	98 85       	ldd	r25, Y+8	; 0x08
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
}
     ecc:	00 00       	nop
     ece:	2a 96       	adiw	r28, 0x0a	; 10
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <uxListRemove+0x6>
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	fc 01       	movw	r30, r24
     ef6:	82 85       	ldd	r24, Z+10	; 0x0a
     ef8:	93 85       	ldd	r25, Z+11	; 0x0b
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	fc 01       	movw	r30, r24
     f04:	84 81       	ldd	r24, Z+4	; 0x04
     f06:	95 81       	ldd	r25, Z+5	; 0x05
     f08:	2b 81       	ldd	r18, Y+3	; 0x03
     f0a:	3c 81       	ldd	r19, Y+4	; 0x04
     f0c:	f9 01       	movw	r30, r18
     f0e:	26 81       	ldd	r18, Z+6	; 0x06
     f10:	37 81       	ldd	r19, Z+7	; 0x07
     f12:	fc 01       	movw	r30, r24
     f14:	37 83       	std	Z+7, r19	; 0x07
     f16:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	fc 01       	movw	r30, r24
     f1e:	86 81       	ldd	r24, Z+6	; 0x06
     f20:	97 81       	ldd	r25, Z+7	; 0x07
     f22:	2b 81       	ldd	r18, Y+3	; 0x03
     f24:	3c 81       	ldd	r19, Y+4	; 0x04
     f26:	f9 01       	movw	r30, r18
     f28:	24 81       	ldd	r18, Z+4	; 0x04
     f2a:	35 81       	ldd	r19, Z+5	; 0x05
     f2c:	fc 01       	movw	r30, r24
     f2e:	35 83       	std	Z+5, r19	; 0x05
     f30:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	21 81       	ldd	r18, Z+1	; 0x01
     f3a:	32 81       	ldd	r19, Z+2	; 0x02
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	28 17       	cp	r18, r24
     f42:	39 07       	cpc	r19, r25
     f44:	51 f4       	brne	.+20     	; 0xf5a <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	fc 01       	movw	r30, r24
     f4c:	26 81       	ldd	r18, Z+6	; 0x06
     f4e:	37 81       	ldd	r19, Z+7	; 0x07
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	32 83       	std	Z+2, r19	; 0x02
     f58:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	fc 01       	movw	r30, r24
     f60:	13 86       	std	Z+11, r1	; 0x0b
     f62:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	28 0f       	add	r18, r24
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	28 97       	sbiw	r28, 0x08	; 8
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	7e 83       	std	Y+6, r23	; 0x06
     fa8:	6d 83       	std	Y+5, r22	; 0x05
     faa:	58 87       	std	Y+8, r21	; 0x08
     fac:	4f 83       	std	Y+7, r20	; 0x07
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	21 e1       	ldi	r18, 0x11	; 17
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	22 e2       	ldi	r18, 0x22	; 34
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	23 e3       	ldi	r18, 0x33	; 51
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	29 81       	ldd	r18, Y+1	; 0x01
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	89 2f       	mov	r24, r25
    100c:	99 27       	eor	r25, r25
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	29 81       	ldd	r18, Y+1	; 0x01
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	fc 01       	movw	r30, r24
    102c:	10 82       	st	Z, r1
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	fc 01       	movw	r30, r24
    103e:	10 82       	st	Z, r1
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	20 e8       	ldi	r18, 0x80	; 128
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	fc 01       	movw	r30, r24
    1064:	10 82       	st	Z, r1
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	fc 01       	movw	r30, r24
    1076:	10 82       	st	Z, r1
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	fc 01       	movw	r30, r24
    1088:	10 82       	st	Z, r1
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9c 83       	std	Y+4, r25	; 0x04
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	22 e0       	ldi	r18, 0x02	; 2
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	8b 83       	std	Y+3, r24	; 0x03
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	23 e0       	ldi	r18, 0x03	; 3
    10ae:	fc 01       	movw	r30, r24
    10b0:	20 83       	st	Z, r18
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9c 83       	std	Y+4, r25	; 0x04
    10ba:	8b 83       	std	Y+3, r24	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	24 e0       	ldi	r18, 0x04	; 4
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	25 e0       	ldi	r18, 0x05	; 5
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	26 e0       	ldi	r18, 0x06	; 6
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	27 e0       	ldi	r18, 0x07	; 7
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	28 e0       	ldi	r18, 0x08	; 8
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	29 e0       	ldi	r18, 0x09	; 9
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	20 e1       	ldi	r18, 0x10	; 16
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	21 e1       	ldi	r18, 0x11	; 17
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	22 e1       	ldi	r18, 0x12	; 18
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	23 e1       	ldi	r18, 0x13	; 19
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	24 e1       	ldi	r18, 0x14	; 20
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	25 e1       	ldi	r18, 0x15	; 21
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	26 e1       	ldi	r18, 0x16	; 22
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	27 e1       	ldi	r18, 0x17	; 23
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	28 e1       	ldi	r18, 0x18	; 24
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	29 e1       	ldi	r18, 0x19	; 25
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	20 e2       	ldi	r18, 0x20	; 32
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	21 e2       	ldi	r18, 0x21	; 33
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	22 e2       	ldi	r18, 0x22	; 34
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	23 e2       	ldi	r18, 0x23	; 35
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	98 85       	ldd	r25, Y+8	; 0x08
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	29 81       	ldd	r18, Y+1	; 0x01
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	89 2f       	mov	r24, r25
    126e:	99 27       	eor	r25, r25
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	29 81       	ldd	r18, Y+1	; 0x01
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	26 e2       	ldi	r18, 0x26	; 38
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	27 e2       	ldi	r18, 0x27	; 39
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	28 e2       	ldi	r18, 0x28	; 40
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	29 e2       	ldi	r18, 0x29	; 41
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	20 e3       	ldi	r18, 0x30	; 48
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	21 e3       	ldi	r18, 0x31	; 49
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	28 96       	adiw	r28, 0x08	; 8
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <xPortStartScheduler>:
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	ff d0       	rcall	.+510    	; 0x151e <prvSetupTimerInterrupt>
    1320:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <pxCurrentTCB>
    1324:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    1328:	cd 91       	ld	r28, X+
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	dd 91       	ld	r29, X+
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	3f 90       	pop	r3
    136a:	2f 90       	pop	r2
    136c:	1f 90       	pop	r1
    136e:	0f 90       	pop	r0
    1370:	0c be       	out	0x3c, r0	; 60
    1372:	0f 90       	pop	r0
    1374:	0b be       	out	0x3b, r0	; 59
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	08 95       	ret
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	0f 92       	push	r0
    138e:	0b b6       	in	r0, 0x3b	; 59
    1390:	0f 92       	push	r0
    1392:	0c b6       	in	r0, 0x3c	; 60
    1394:	0f 92       	push	r0
    1396:	1f 92       	push	r1
    1398:	11 24       	eor	r1, r1
    139a:	2f 92       	push	r2
    139c:	3f 92       	push	r3
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <pxCurrentTCB>
    13da:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    13de:	0d b6       	in	r0, 0x3d	; 61
    13e0:	0d 92       	st	X+, r0
    13e2:	0e b6       	in	r0, 0x3e	; 62
    13e4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    13e6:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    13ea:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <pxCurrentTCB>
    13ee:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    13f2:	cd 91       	ld	r28, X+
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	dd 91       	ld	r29, X+
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	7f 90       	pop	r7
    142c:	6f 90       	pop	r6
    142e:	5f 90       	pop	r5
    1430:	4f 90       	pop	r4
    1432:	3f 90       	pop	r3
    1434:	2f 90       	pop	r2
    1436:	1f 90       	pop	r1
    1438:	0f 90       	pop	r0
    143a:	0c be       	out	0x3c, r0	; 60
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1446:	08 95       	ret
	...

0000144a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	0f 92       	push	r0
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	0c b6       	in	r0, 0x3c	; 60
    1458:	0f 92       	push	r0
    145a:	1f 92       	push	r1
    145c:	11 24       	eor	r1, r1
    145e:	2f 92       	push	r2
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <pxCurrentTCB>
    149e:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    14a2:	0d b6       	in	r0, 0x3d	; 61
    14a4:	0d 92       	st	X+, r0
    14a6:	0e b6       	in	r0, 0x3e	; 62
    14a8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    14aa:	83 e5       	ldi	r24, 0x53	; 83
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
    14b2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <xTaskIncrementTick>
    14b6:	88 23       	and	r24, r24
    14b8:	11 f0       	breq	.+4      	; 0x14be <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    14ba:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    14be:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <pxCurrentTCB>
    14c2:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    14c6:	cd 91       	ld	r28, X+
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	dd 91       	ld	r29, X+
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	ff 91       	pop	r31
    14d0:	ef 91       	pop	r30
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	3f 90       	pop	r3
    1508:	2f 90       	pop	r2
    150a:	1f 90       	pop	r1
    150c:	0f 90       	pop	r0
    150e:	0c be       	out	0x3c, r0	; 60
    1510:	0f 90       	pop	r0
    1512:	0b be       	out	0x3b, r0	; 59
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    151a:	08 95       	ret
	...

0000151e <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
    1526:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	88 70       	andi	r24, 0x08	; 8
    152e:	99 27       	eor	r25, r25
    1530:	89 2b       	or	r24, r25
    1532:	11 f0       	breq	.+4      	; 0x1538 <prvSetupTimerInterrupt+0x1a>
    1534:	80 ee       	ldi	r24, 0xE0	; 224
    1536:	01 c0       	rjmp	.+2      	; 0x153a <prvSetupTimerInterrupt+0x1c>
    1538:	80 ec       	ldi	r24, 0xC0	; 192
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	97 70       	andi	r25, 0x07	; 7
    153e:	89 2b       	or	r24, r25
    1540:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1542:	88 e1       	ldi	r24, 0x18	; 24
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	a8 95       	wdr
    154a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
    1554:	00 00       	nop
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    155c:	76 df       	rcall	.-276    	; 0x144a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    155e:	18 95       	reti
	...

00001562 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 d0       	rcall	.+0      	; 0x1568 <xQueueGenericReset+0x6>
    1568:	1f 92       	push	r1
    156a:	1f 92       	push	r1
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9c 83       	std	Y+4, r25	; 0x04
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	6d 83       	std	Y+5, r22	; 0x05
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	0f 92       	push	r0
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	29 81       	ldd	r18, Y+1	; 0x01
    1590:	3a 81       	ldd	r19, Y+2	; 0x02
    1592:	f9 01       	movw	r30, r18
    1594:	27 8d       	ldd	r18, Z+31	; 0x1f
    1596:	42 2f       	mov	r20, r18
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	3a 81       	ldd	r19, Y+2	; 0x02
    159e:	f9 01       	movw	r30, r18
    15a0:	20 a1       	ldd	r18, Z+32	; 0x20
    15a2:	22 2f       	mov	r18, r18
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	42 9f       	mul	r20, r18
    15a8:	b0 01       	movw	r22, r0
    15aa:	43 9f       	mul	r20, r19
    15ac:	70 0d       	add	r23, r0
    15ae:	52 9f       	mul	r21, r18
    15b0:	70 0d       	add	r23, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	9b 01       	movw	r18, r22
    15b6:	28 0f       	add	r18, r24
    15b8:	39 1f       	adc	r19, r25
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	fc 01       	movw	r30, r24
    15c0:	35 83       	std	Z+5, r19	; 0x05
    15c2:	24 83       	std	Z+4, r18	; 0x04
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	fc 01       	movw	r30, r24
    15ca:	16 8e       	std	Z+30, r1	; 0x1e
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 81       	ld	r18, Z
    15d4:	31 81       	ldd	r19, Z+1	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	fc 01       	movw	r30, r24
    15dc:	33 83       	std	Z+3, r19	; 0x03
    15de:	22 83       	std	Z+2, r18	; 0x02
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 81       	ld	r18, Z
    15e8:	31 81       	ldd	r19, Z+1	; 0x01
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	fc 01       	movw	r30, r24
    15f0:	87 8d       	ldd	r24, Z+31	; 0x1f
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	bc 01       	movw	r22, r24
    15f8:	61 50       	subi	r22, 0x01	; 1
    15fa:	71 09       	sbc	r23, r1
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	fc 01       	movw	r30, r24
    1602:	80 a1       	ldd	r24, Z+32	; 0x20
    1604:	48 2f       	mov	r20, r24
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	64 9f       	mul	r22, r20
    160a:	c0 01       	movw	r24, r0
    160c:	65 9f       	mul	r22, r21
    160e:	90 0d       	add	r25, r0
    1610:	74 9f       	mul	r23, r20
    1612:	90 0d       	add	r25, r0
    1614:	11 24       	eor	r1, r1
    1616:	28 0f       	add	r18, r24
    1618:	39 1f       	adc	r19, r25
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	fc 01       	movw	r30, r24
    1620:	37 83       	std	Z+7, r19	; 0x07
    1622:	26 83       	std	Z+6, r18	; 0x06
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	2f ef       	ldi	r18, 0xFF	; 255
    162a:	fc 01       	movw	r30, r24
    162c:	21 a3       	std	Z+33, r18	; 0x21
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	fc 01       	movw	r30, r24
    1636:	22 a3       	std	Z+34, r18	; 0x22
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	88 23       	and	r24, r24
    163c:	79 f4       	brne	.+30     	; 0x165c <xQueueGenericReset+0xfa>
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	fc 01       	movw	r30, r24
    1644:	80 85       	ldd	r24, Z+8	; 0x08
    1646:	88 23       	and	r24, r24
    1648:	89 f0       	breq	.+34     	; 0x166c <xQueueGenericReset+0x10a>
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	08 96       	adiw	r24, 0x08	; 8
    1650:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    1654:	88 23       	and	r24, r24
    1656:	51 f0       	breq	.+20     	; 0x166c <xQueueGenericReset+0x10a>
    1658:	96 de       	rcall	.-724    	; 0x1386 <vPortYield>
    165a:	08 c0       	rjmp	.+16     	; 0x166c <xQueueGenericReset+0x10a>
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	08 96       	adiw	r24, 0x08	; 8
    1662:	1c db       	rcall	.-2504   	; 0xc9c <vListInitialise>
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	43 96       	adiw	r24, 0x13	; 19
    166a:	18 db       	rcall	.-2512   	; 0xc9c <vListInitialise>
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <xQueueGenericCreate>:
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	29 97       	sbiw	r28, 0x09	; 9
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	8f 83       	std	Y+7, r24	; 0x07
    169c:	68 87       	std	Y+8, r22	; 0x08
    169e:	49 87       	std	Y+9, r20	; 0x09
    16a0:	88 85       	ldd	r24, Y+8	; 0x08
    16a2:	88 23       	and	r24, r24
    16a4:	19 f4       	brne	.+6      	; 0x16ac <xQueueGenericCreate+0x2a>
    16a6:	1a 82       	std	Y+2, r1	; 0x02
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <xQueueGenericCreate+0x48>
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	48 2f       	mov	r20, r24
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	42 9f       	mul	r20, r18
    16ba:	c0 01       	movw	r24, r0
    16bc:	43 9f       	mul	r20, r19
    16be:	90 0d       	add	r25, r0
    16c0:	52 9f       	mul	r21, r18
    16c2:	90 0d       	add	r25, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	85 96       	adiw	r24, 0x25	; 37
    16d0:	4c d8       	rcall	.-3944   	; 0x76a <pvPortMalloc>
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	89 2b       	or	r24, r25
    16dc:	99 f0       	breq	.+38     	; 0x1704 <xQueueGenericCreate+0x82>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	85 96       	adiw	r24, 0x25	; 37
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	3c 81       	ldd	r19, Y+4	; 0x04
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	89 01       	movw	r16, r18
    16fa:	29 85       	ldd	r18, Y+9	; 0x09
    16fc:	ac 01       	movw	r20, r24
    16fe:	68 85       	ldd	r22, Y+8	; 0x08
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	0d d0       	rcall	.+26     	; 0x171e <prvInitialiseNewQueue>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	29 96       	adiw	r28, 0x09	; 9
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <prvInitialiseNewQueue>:
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	27 97       	sbiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
    173a:	5c 83       	std	Y+4, r21	; 0x04
    173c:	4b 83       	std	Y+3, r20	; 0x03
    173e:	2d 83       	std	Y+5, r18	; 0x05
    1740:	1f 83       	std	Y+7, r17	; 0x07
    1742:	0e 83       	std	Y+6, r16	; 0x06
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	88 23       	and	r24, r24
    1748:	41 f4       	brne	.+16     	; 0x175a <prvInitialiseNewQueue+0x3c>
    174a:	8e 81       	ldd	r24, Y+6	; 0x06
    174c:	9f 81       	ldd	r25, Y+7	; 0x07
    174e:	2e 81       	ldd	r18, Y+6	; 0x06
    1750:	3f 81       	ldd	r19, Y+7	; 0x07
    1752:	fc 01       	movw	r30, r24
    1754:	31 83       	std	Z+1, r19	; 0x01
    1756:	20 83       	st	Z, r18
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <prvInitialiseNewQueue+0x4a>
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	9f 81       	ldd	r25, Y+7	; 0x07
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	fc 01       	movw	r30, r24
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	20 83       	st	Z, r18
    1768:	8e 81       	ldd	r24, Y+6	; 0x06
    176a:	9f 81       	ldd	r25, Y+7	; 0x07
    176c:	29 81       	ldd	r18, Y+1	; 0x01
    176e:	fc 01       	movw	r30, r24
    1770:	27 8f       	std	Z+31, r18	; 0x1f
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	2a 81       	ldd	r18, Y+2	; 0x02
    1778:	fc 01       	movw	r30, r24
    177a:	20 a3       	std	Z+32, r18	; 0x20
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	ef de       	rcall	.-546    	; 0x1562 <xQueueGenericReset>
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	9f 81       	ldd	r25, Y+7	; 0x07
    1788:	2d 81       	ldd	r18, Y+5	; 0x05
    178a:	fc 01       	movw	r30, r24
    178c:	24 a3       	std	Z+36, r18	; 0x24
    178e:	00 00       	nop
    1790:	27 96       	adiw	r28, 0x07	; 7
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <prvInitialiseMutex>:
    17a6:	0f 93       	push	r16
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	1f 92       	push	r1
    17ae:	1f 92       	push	r1
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	89 2b       	or	r24, r25
    17be:	b9 f0       	breq	.+46     	; 0x17ee <prvInitialiseMutex+0x48>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	fc 01       	movw	r30, r24
    17c6:	15 82       	std	Z+5, r1	; 0x05
    17c8:	14 82       	std	Z+4, r1	; 0x04
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	fc 01       	movw	r30, r24
    17d0:	11 82       	std	Z+1, r1	; 0x01
    17d2:	10 82       	st	Z, r1
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	fc 01       	movw	r30, r24
    17da:	16 82       	std	Z+6, r1	; 0x06
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	25 d0       	rcall	.+74     	; 0x1838 <xQueueGenericSend>
    17ee:	00 00       	nop
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	0f 91       	pop	r16
    17fa:	08 95       	ret

000017fc <xQueueCreateMutex>:
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	00 d0       	rcall	.+0      	; 0x1802 <xQueueCreateMutex+0x6>
    1802:	1f 92       	push	r1
    1804:	1f 92       	push	r1
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	1a 82       	std	Y+2, r1	; 0x02
    1812:	4d 81       	ldd	r20, Y+5	; 0x05
    1814:	6a 81       	ldd	r22, Y+2	; 0x02
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	34 df       	rcall	.-408    	; 0x1682 <xQueueGenericCreate>
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	c1 df       	rcall	.-126    	; 0x17a6 <prvInitialiseMutex>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <xQueueGenericSend>:
    1838:	0f 93       	push	r16
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	62 97       	sbiw	r28, 0x12	; 18
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	9b 87       	std	Y+11, r25	; 0x0b
    1850:	8a 87       	std	Y+10, r24	; 0x0a
    1852:	7d 87       	std	Y+13, r23	; 0x0d
    1854:	6c 87       	std	Y+12, r22	; 0x0c
    1856:	2e 87       	std	Y+14, r18	; 0x0e
    1858:	3f 87       	std	Y+15, r19	; 0x0f
    185a:	48 8b       	std	Y+16, r20	; 0x10
    185c:	59 8b       	std	Y+17, r21	; 0x11
    185e:	0a 8b       	std	Y+18, r16	; 0x12
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	8a 85       	ldd	r24, Y+10	; 0x0a
    1864:	9b 85       	ldd	r25, Y+11	; 0x0b
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	0f 92       	push	r0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	fc 01       	movw	r30, r24
    1876:	26 8d       	ldd	r18, Z+30	; 0x1e
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	fc 01       	movw	r30, r24
    187e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1880:	28 17       	cp	r18, r24
    1882:	18 f0       	brcs	.+6      	; 0x188a <xQueueGenericSend+0x52>
    1884:	8a 89       	ldd	r24, Y+18	; 0x12
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	f9 f4       	brne	.+62     	; 0x18c8 <xQueueGenericSend+0x90>
    188a:	2c 85       	ldd	r18, Y+12	; 0x0c
    188c:	3d 85       	ldd	r19, Y+13	; 0x0d
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	4a 89       	ldd	r20, Y+18	; 0x12
    1894:	b9 01       	movw	r22, r18
    1896:	98 d1       	rcall	.+816    	; 0x1bc8 <prvCopyDataToQueue>
    1898:	8c 83       	std	Y+4, r24	; 0x04
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	fc 01       	movw	r30, r24
    18a0:	83 89       	ldd	r24, Z+19	; 0x13
    18a2:	88 23       	and	r24, r24
    18a4:	49 f0       	breq	.+18     	; 0x18b8 <xQueueGenericSend+0x80>
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	43 96       	adiw	r24, 0x13	; 19
    18ac:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    18b0:	88 23       	and	r24, r24
    18b2:	31 f0       	breq	.+12     	; 0x18c0 <xQueueGenericSend+0x88>
    18b4:	68 dd       	rcall	.-1328   	; 0x1386 <vPortYield>
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <xQueueGenericSend+0x88>
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	88 23       	and	r24, r24
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <xQueueGenericSend+0x88>
    18be:	63 dd       	rcall	.-1338   	; 0x1386 <vPortYield>
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	64 c0       	rjmp	.+200    	; 0x1990 <xQueueGenericSend+0x158>
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	a8 89       	ldd	r26, Y+16	; 0x10
    18ce:	b9 89       	ldd	r27, Y+17	; 0x11
    18d0:	89 2b       	or	r24, r25
    18d2:	8a 2b       	or	r24, r26
    18d4:	8b 2b       	or	r24, r27
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <xQueueGenericSend+0xa8>
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	58 c0       	rjmp	.+176    	; 0x1990 <xQueueGenericSend+0x158>
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	88 23       	and	r24, r24
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <xQueueGenericSend+0xba>
    18e6:	ce 01       	movw	r24, r28
    18e8:	05 96       	adiw	r24, 0x05	; 5
    18ea:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskInternalSetTimeOutState>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	0e 94 90 18 	call	0x3120	; 0x3120 <vTaskSuspendAll>
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	0f 92       	push	r0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	fc 01       	movw	r30, r24
    1906:	81 a1       	ldd	r24, Z+33	; 0x21
    1908:	8f 3f       	cpi	r24, 0xFF	; 255
    190a:	21 f4       	brne	.+8      	; 0x1914 <xQueueGenericSend+0xdc>
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	fc 01       	movw	r30, r24
    1912:	11 a2       	std	Z+33, r1	; 0x21
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	fc 01       	movw	r30, r24
    191a:	82 a1       	ldd	r24, Z+34	; 0x22
    191c:	8f 3f       	cpi	r24, 0xFF	; 255
    191e:	21 f4       	brne	.+8      	; 0x1928 <xQueueGenericSend+0xf0>
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	9b 81       	ldd	r25, Y+3	; 0x03
    1924:	fc 01       	movw	r30, r24
    1926:	12 a2       	std	Z+34, r1	; 0x22
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	9e 01       	movw	r18, r28
    192e:	22 5f       	subi	r18, 0xF2	; 242
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	ce 01       	movw	r24, r28
    1934:	05 96       	adiw	r24, 0x05	; 5
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 1e 1c 	call	0x383c	; 0x383c <xTaskCheckForTimeOut>
    193c:	88 23       	and	r24, r24
    193e:	11 f5       	brne	.+68     	; 0x1984 <xQueueGenericSend+0x14c>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	dd d2       	rcall	.+1466   	; 0x1f00 <prvIsQueueFull>
    1946:	88 23       	and	r24, r24
    1948:	b9 f0       	breq	.+46     	; 0x1978 <xQueueGenericSend+0x140>
    194a:	8e 85       	ldd	r24, Y+14	; 0x0e
    194c:	9f 85       	ldd	r25, Y+15	; 0x0f
    194e:	a8 89       	ldd	r26, Y+16	; 0x10
    1950:	b9 89       	ldd	r27, Y+17	; 0x11
    1952:	2a 81       	ldd	r18, Y+2	; 0x02
    1954:	3b 81       	ldd	r19, Y+3	; 0x03
    1956:	28 5f       	subi	r18, 0xF8	; 248
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	ac 01       	movw	r20, r24
    195c:	bd 01       	movw	r22, r26
    195e:	c9 01       	movw	r24, r18
    1960:	0e 94 06 1b 	call	0x360c	; 0x360c <vTaskPlaceOnEventList>
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	50 d2       	rcall	.+1184   	; 0x1e0a <prvUnlockQueue>
    196a:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    196e:	88 23       	and	r24, r24
    1970:	09 f0       	breq	.+2      	; 0x1974 <xQueueGenericSend+0x13c>
    1972:	7b cf       	rjmp	.-266    	; 0x186a <xQueueGenericSend+0x32>
    1974:	08 dd       	rcall	.-1520   	; 0x1386 <vPortYield>
    1976:	79 cf       	rjmp	.-270    	; 0x186a <xQueueGenericSend+0x32>
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	46 d2       	rcall	.+1164   	; 0x1e0a <prvUnlockQueue>
    197e:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    1982:	73 cf       	rjmp	.-282    	; 0x186a <xQueueGenericSend+0x32>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	40 d2       	rcall	.+1152   	; 0x1e0a <prvUnlockQueue>
    198a:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	62 96       	adiw	r28, 0x12	; 18
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <xQueueGenericSendFromISR>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	2c 97       	sbiw	r28, 0x0c	; 12
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	9f 83       	std	Y+7, r25	; 0x07
    19ba:	8e 83       	std	Y+6, r24	; 0x06
    19bc:	79 87       	std	Y+9, r23	; 0x09
    19be:	68 87       	std	Y+8, r22	; 0x08
    19c0:	5b 87       	std	Y+11, r21	; 0x0b
    19c2:	4a 87       	std	Y+10, r20	; 0x0a
    19c4:	2c 87       	std	Y+12, r18	; 0x0c
    19c6:	8e 81       	ldd	r24, Y+6	; 0x06
    19c8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ca:	9b 83       	std	Y+3, r25	; 0x03
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	1c 82       	std	Y+4, r1	; 0x04
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	fc 01       	movw	r30, r24
    19d6:	26 8d       	ldd	r18, Z+30	; 0x1e
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	fc 01       	movw	r30, r24
    19de:	87 8d       	ldd	r24, Z+31	; 0x1f
    19e0:	28 17       	cp	r18, r24
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <xQueueGenericSendFromISR+0x46>
    19e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e6:	82 30       	cpi	r24, 0x02	; 2
    19e8:	81 f5       	brne	.+96     	; 0x1a4a <xQueueGenericSendFromISR+0xa6>
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	fc 01       	movw	r30, r24
    19f0:	82 a1       	ldd	r24, Z+34	; 0x22
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	28 85       	ldd	r18, Y+8	; 0x08
    19f6:	39 85       	ldd	r19, Y+9	; 0x09
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    19fe:	b9 01       	movw	r22, r18
    1a00:	e3 d0       	rcall	.+454    	; 0x1bc8 <prvCopyDataToQueue>
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	8f 3f       	cpi	r24, 0xFF	; 255
    1a06:	b9 f4       	brne	.+46     	; 0x1a36 <xQueueGenericSendFromISR+0x92>
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	83 89       	ldd	r24, Z+19	; 0x13
    1a10:	88 23       	and	r24, r24
    1a12:	c1 f0       	breq	.+48     	; 0x1a44 <xQueueGenericSendFromISR+0xa0>
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	9b 81       	ldd	r25, Y+3	; 0x03
    1a18:	43 96       	adiw	r24, 0x13	; 19
    1a1a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    1a1e:	88 23       	and	r24, r24
    1a20:	89 f0       	breq	.+34     	; 0x1a44 <xQueueGenericSendFromISR+0xa0>
    1a22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a26:	89 2b       	or	r24, r25
    1a28:	69 f0       	breq	.+26     	; 0x1a44 <xQueueGenericSendFromISR+0xa0>
    1a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	07 c0       	rjmp	.+14     	; 0x1a44 <xQueueGenericSendFromISR+0xa0>
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	8f 5f       	subi	r24, 0xFF	; 255
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	fc 01       	movw	r30, r24
    1a42:	22 a3       	std	Z+34, r18	; 0x22
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <xQueueGenericSendFromISR+0xa8>
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	2c 96       	adiw	r28, 0x0c	; 12
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <xQueueReceive>:
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	61 97       	sbiw	r28, 0x11	; 17
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	9b 87       	std	Y+11, r25	; 0x0b
    1a76:	8a 87       	std	Y+10, r24	; 0x0a
    1a78:	7d 87       	std	Y+13, r23	; 0x0d
    1a7a:	6c 87       	std	Y+12, r22	; 0x0c
    1a7c:	2e 87       	std	Y+14, r18	; 0x0e
    1a7e:	3f 87       	std	Y+15, r19	; 0x0f
    1a80:	48 8b       	std	Y+16, r20	; 0x10
    1a82:	59 8b       	std	Y+17, r21	; 0x11
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8a:	9b 83       	std	Y+3, r25	; 0x03
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	0f 92       	push	r0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	fc 01       	movw	r30, r24
    1a9a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	88 23       	and	r24, r24
    1aa2:	f9 f0       	breq	.+62     	; 0x1ae2 <xQueueReceive+0x82>
    1aa4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	b9 01       	movw	r22, r18
    1aae:	5c d1       	rcall	.+696    	; 0x1d68 <prvCopyDataFromQueue>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	2f ef       	ldi	r18, 0xFF	; 255
    1ab4:	28 0f       	add	r18, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	fc 01       	movw	r30, r24
    1abc:	26 8f       	std	Z+30, r18	; 0x1e
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	80 85       	ldd	r24, Z+8	; 0x08
    1ac6:	88 23       	and	r24, r24
    1ac8:	41 f0       	breq	.+16     	; 0x1ada <xQueueReceive+0x7a>
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	08 96       	adiw	r24, 0x08	; 8
    1ad0:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <xQueueReceive+0x7a>
    1ad8:	56 dc       	rcall	.-1876   	; 0x1386 <vPortYield>
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	6a c0       	rjmp	.+212    	; 0x1bb6 <xQueueReceive+0x156>
    1ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ae8:	b9 89       	ldd	r27, Y+17	; 0x11
    1aea:	89 2b       	or	r24, r25
    1aec:	8a 2b       	or	r24, r26
    1aee:	8b 2b       	or	r24, r27
    1af0:	21 f4       	brne	.+8      	; 0x1afa <xQueueReceive+0x9a>
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	5e c0       	rjmp	.+188    	; 0x1bb6 <xQueueReceive+0x156>
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 23       	and	r24, r24
    1afe:	31 f4       	brne	.+12     	; 0x1b0c <xQueueReceive+0xac>
    1b00:	ce 01       	movw	r24, r28
    1b02:	05 96       	adiw	r24, 0x05	; 5
    1b04:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskInternalSetTimeOutState>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	0e 94 90 18 	call	0x3120	; 0x3120 <vTaskSuspendAll>
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	0f 92       	push	r0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	fc 01       	movw	r30, r24
    1b20:	81 a1       	ldd	r24, Z+33	; 0x21
    1b22:	8f 3f       	cpi	r24, 0xFF	; 255
    1b24:	21 f4       	brne	.+8      	; 0x1b2e <xQueueReceive+0xce>
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	11 a2       	std	Z+33, r1	; 0x21
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	fc 01       	movw	r30, r24
    1b34:	82 a1       	ldd	r24, Z+34	; 0x22
    1b36:	8f 3f       	cpi	r24, 0xFF	; 255
    1b38:	21 f4       	brne	.+8      	; 0x1b42 <xQueueReceive+0xe2>
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	fc 01       	movw	r30, r24
    1b40:	12 a2       	std	Z+34, r1	; 0x22
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	9e 01       	movw	r18, r28
    1b48:	22 5f       	subi	r18, 0xF2	; 242
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	05 96       	adiw	r24, 0x05	; 5
    1b50:	b9 01       	movw	r22, r18
    1b52:	0e 94 1e 1c 	call	0x383c	; 0x383c <xTaskCheckForTimeOut>
    1b56:	88 23       	and	r24, r24
    1b58:	11 f5       	brne	.+68     	; 0x1b9e <xQueueReceive+0x13e>
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	b3 d1       	rcall	.+870    	; 0x1ec6 <prvIsQueueEmpty>
    1b60:	88 23       	and	r24, r24
    1b62:	b9 f0       	breq	.+46     	; 0x1b92 <xQueueReceive+0x132>
    1b64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b66:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b68:	a8 89       	ldd	r26, Y+16	; 0x10
    1b6a:	b9 89       	ldd	r27, Y+17	; 0x11
    1b6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b70:	2d 5e       	subi	r18, 0xED	; 237
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	ac 01       	movw	r20, r24
    1b76:	bd 01       	movw	r22, r26
    1b78:	c9 01       	movw	r24, r18
    1b7a:	0e 94 06 1b 	call	0x360c	; 0x360c <vTaskPlaceOnEventList>
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	43 d1       	rcall	.+646    	; 0x1e0a <prvUnlockQueue>
    1b84:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <xQueueReceive+0x12e>
    1b8c:	80 cf       	rjmp	.-256    	; 0x1a8e <xQueueReceive+0x2e>
    1b8e:	fb db       	rcall	.-2058   	; 0x1386 <vPortYield>
    1b90:	7e cf       	rjmp	.-260    	; 0x1a8e <xQueueReceive+0x2e>
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	39 d1       	rcall	.+626    	; 0x1e0a <prvUnlockQueue>
    1b98:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    1b9c:	78 cf       	rjmp	.-272    	; 0x1a8e <xQueueReceive+0x2e>
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba2:	33 d1       	rcall	.+614    	; 0x1e0a <prvUnlockQueue>
    1ba4:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	8c d1       	rcall	.+792    	; 0x1ec6 <prvIsQueueEmpty>
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <xQueueReceive+0x154>
    1bb2:	6d cf       	rjmp	.-294    	; 0x1a8e <xQueueReceive+0x2e>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	61 96       	adiw	r28, 0x11	; 17
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <prvCopyDataToQueue>:
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	27 97       	sbiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	7e 83       	std	Y+6, r23	; 0x06
    1be2:	6d 83       	std	Y+5, r22	; 0x05
    1be4:	4f 83       	std	Y+7, r20	; 0x07
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	fc 01       	movw	r30, r24
    1bee:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	80 a1       	ldd	r24, Z+32	; 0x20
    1bfa:	88 23       	and	r24, r24
    1bfc:	b1 f4       	brne	.+44     	; 0x1c2a <prvCopyDataToQueue+0x62>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	fc 01       	movw	r30, r24
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	89 2b       	or	r24, r25
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <prvCopyDataToQueue+0x46>
    1c0c:	9c c0       	rjmp	.+312    	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	fc 01       	movw	r30, r24
    1c14:	84 81       	ldd	r24, Z+4	; 0x04
    1c16:	95 81       	ldd	r25, Z+5	; 0x05
    1c18:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <xTaskPriorityDisinherit>
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	fc 01       	movw	r30, r24
    1c24:	15 82       	std	Z+5, r1	; 0x05
    1c26:	14 82       	std	Z+4, r1	; 0x04
    1c28:	8e c0       	rjmp	.+284    	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	88 23       	and	r24, r24
    1c2e:	d9 f5       	brne	.+118    	; 0x1ca6 <prvCopyDataToQueue+0xde>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	fc 01       	movw	r30, r24
    1c36:	80 a1       	ldd	r24, Z+32	; 0x20
    1c38:	48 2f       	mov	r20, r24
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	fc 01       	movw	r30, r24
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	2d 81       	ldd	r18, Y+5	; 0x05
    1c48:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4a:	b9 01       	movw	r22, r18
    1c4c:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	fc 01       	movw	r30, r24
    1c56:	22 81       	ldd	r18, Z+2	; 0x02
    1c58:	33 81       	ldd	r19, Z+3	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	fc 01       	movw	r30, r24
    1c60:	80 a1       	ldd	r24, Z+32	; 0x20
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	28 0f       	add	r18, r24
    1c68:	39 1f       	adc	r19, r25
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	fc 01       	movw	r30, r24
    1c70:	33 83       	std	Z+3, r19	; 0x03
    1c72:	22 83       	std	Z+2, r18	; 0x02
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	fc 01       	movw	r30, r24
    1c7a:	22 81       	ldd	r18, Z+2	; 0x02
    1c7c:	33 81       	ldd	r19, Z+3	; 0x03
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	fc 01       	movw	r30, r24
    1c84:	84 81       	ldd	r24, Z+4	; 0x04
    1c86:	95 81       	ldd	r25, Z+5	; 0x05
    1c88:	28 17       	cp	r18, r24
    1c8a:	39 07       	cpc	r19, r25
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <prvCopyDataToQueue+0xc8>
    1c8e:	5b c0       	rjmp	.+182    	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	fc 01       	movw	r30, r24
    1c96:	20 81       	ld	r18, Z
    1c98:	31 81       	ldd	r19, Z+1	; 0x01
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	33 83       	std	Z+3, r19	; 0x03
    1ca2:	22 83       	std	Z+2, r18	; 0x02
    1ca4:	50 c0       	rjmp	.+160    	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 a1       	ldd	r24, Z+32	; 0x20
    1cae:	48 2f       	mov	r20, r24
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	86 81       	ldd	r24, Z+6	; 0x06
    1cba:	97 81       	ldd	r25, Z+7	; 0x07
    1cbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	fc 01       	movw	r30, r24
    1ccc:	26 81       	ldd	r18, Z+6	; 0x06
    1cce:	37 81       	ldd	r19, Z+7	; 0x07
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 a1       	ldd	r24, Z+32	; 0x20
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	91 95       	neg	r25
    1cde:	81 95       	neg	r24
    1ce0:	91 09       	sbc	r25, r1
    1ce2:	28 0f       	add	r18, r24
    1ce4:	39 1f       	adc	r19, r25
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	fc 01       	movw	r30, r24
    1cec:	37 83       	std	Z+7, r19	; 0x07
    1cee:	26 83       	std	Z+6, r18	; 0x06
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	26 81       	ldd	r18, Z+6	; 0x06
    1cf8:	37 81       	ldd	r19, Z+7	; 0x07
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	28 17       	cp	r18, r24
    1d06:	39 07       	cpc	r19, r25
    1d08:	a8 f4       	brcc	.+42     	; 0x1d34 <prvCopyDataToQueue+0x16c>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	fc 01       	movw	r30, r24
    1d10:	24 81       	ldd	r18, Z+4	; 0x04
    1d12:	35 81       	ldd	r19, Z+5	; 0x05
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	fc 01       	movw	r30, r24
    1d1a:	80 a1       	ldd	r24, Z+32	; 0x20
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	91 95       	neg	r25
    1d22:	81 95       	neg	r24
    1d24:	91 09       	sbc	r25, r1
    1d26:	28 0f       	add	r18, r24
    1d28:	39 1f       	adc	r19, r25
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	fc 01       	movw	r30, r24
    1d30:	37 83       	std	Z+7, r19	; 0x07
    1d32:	26 83       	std	Z+6, r18	; 0x06
    1d34:	8f 81       	ldd	r24, Y+7	; 0x07
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	31 f4       	brne	.+12     	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	88 23       	and	r24, r24
    1d3e:	19 f0       	breq	.+6      	; 0x1d46 <prvCopyDataToQueue+0x17e>
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	81 50       	subi	r24, 0x01	; 1
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	21 e0       	ldi	r18, 0x01	; 1
    1d4a:	28 0f       	add	r18, r24
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	fc 01       	movw	r30, r24
    1d52:	26 8f       	std	Z+30, r18	; 0x1e
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	27 96       	adiw	r28, 0x07	; 7
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <prvCopyDataFromQueue>:
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <prvCopyDataFromQueue+0x6>
    1d6e:	1f 92       	push	r1
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	7c 83       	std	Y+4, r23	; 0x04
    1d7a:	6b 83       	std	Y+3, r22	; 0x03
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	fc 01       	movw	r30, r24
    1d82:	80 a1       	ldd	r24, Z+32	; 0x20
    1d84:	88 23       	and	r24, r24
    1d86:	c9 f1       	breq	.+114    	; 0x1dfa <prvCopyDataFromQueue+0x92>
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	26 81       	ldd	r18, Z+6	; 0x06
    1d90:	37 81       	ldd	r19, Z+7	; 0x07
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	fc 01       	movw	r30, r24
    1d98:	80 a1       	ldd	r24, Z+32	; 0x20
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	fc 01       	movw	r30, r24
    1da8:	37 83       	std	Z+7, r19	; 0x07
    1daa:	26 83       	std	Z+6, r18	; 0x06
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	fc 01       	movw	r30, r24
    1db2:	26 81       	ldd	r18, Z+6	; 0x06
    1db4:	37 81       	ldd	r19, Z+7	; 0x07
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	fc 01       	movw	r30, r24
    1dbc:	84 81       	ldd	r24, Z+4	; 0x04
    1dbe:	95 81       	ldd	r25, Z+5	; 0x05
    1dc0:	28 17       	cp	r18, r24
    1dc2:	39 07       	cpc	r19, r25
    1dc4:	50 f0       	brcs	.+20     	; 0x1dda <prvCopyDataFromQueue+0x72>
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 81       	ld	r18, Z
    1dce:	31 81       	ldd	r19, Z+1	; 0x01
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	37 83       	std	Z+7, r19	; 0x07
    1dd8:	26 83       	std	Z+6, r18	; 0x06
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	fc 01       	movw	r30, r24
    1de0:	80 a1       	ldd	r24, Z+32	; 0x20
    1de2:	48 2f       	mov	r20, r24
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	fc 01       	movw	r30, r24
    1dec:	26 81       	ldd	r18, Z+6	; 0x06
    1dee:	37 81       	ldd	r19, Z+7	; 0x07
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	b9 01       	movw	r22, r18
    1df6:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>
    1dfa:	00 00       	nop
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <prvUnlockQueue>:
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <prvUnlockQueue+0x6>
    1e10:	1f 92       	push	r1
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	0f 92       	push	r0
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	fc 01       	movw	r30, r24
    1e26:	82 a1       	ldd	r24, Z+34	; 0x22
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	12 c0       	rjmp	.+36     	; 0x1e50 <prvUnlockQueue+0x46>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	fc 01       	movw	r30, r24
    1e32:	83 89       	ldd	r24, Z+19	; 0x13
    1e34:	88 23       	and	r24, r24
    1e36:	81 f0       	breq	.+32     	; 0x1e58 <prvUnlockQueue+0x4e>
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	43 96       	adiw	r24, 0x13	; 19
    1e3e:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    1e42:	88 23       	and	r24, r24
    1e44:	11 f0       	breq	.+4      	; 0x1e4a <prvUnlockQueue+0x40>
    1e46:	0e 94 c7 1c 	call	0x398e	; 0x398e <vTaskMissedYield>
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	81 50       	subi	r24, 0x01	; 1
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	18 16       	cp	r1, r24
    1e54:	5c f3       	brlt	.-42     	; 0x1e2c <prvUnlockQueue+0x22>
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <prvUnlockQueue+0x50>
    1e58:	00 00       	nop
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	2f ef       	ldi	r18, 0xFF	; 255
    1e60:	fc 01       	movw	r30, r24
    1e62:	22 a3       	std	Z+34, r18	; 0x22
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	0f 92       	push	r0
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	fc 01       	movw	r30, r24
    1e74:	81 a1       	ldd	r24, Z+33	; 0x21
    1e76:	8a 83       	std	Y+2, r24	; 0x02
    1e78:	12 c0       	rjmp	.+36     	; 0x1e9e <prvUnlockQueue+0x94>
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	fc 01       	movw	r30, r24
    1e80:	80 85       	ldd	r24, Z+8	; 0x08
    1e82:	88 23       	and	r24, r24
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <prvUnlockQueue+0x9c>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	08 96       	adiw	r24, 0x08	; 8
    1e8c:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <xTaskRemoveFromEventList>
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <prvUnlockQueue+0x8e>
    1e94:	0e 94 c7 1c 	call	0x398e	; 0x398e <vTaskMissedYield>
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	18 16       	cp	r1, r24
    1ea2:	5c f3       	brlt	.-42     	; 0x1e7a <prvUnlockQueue+0x70>
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <prvUnlockQueue+0x9e>
    1ea6:	00 00       	nop
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	2f ef       	ldi	r18, 0xFF	; 255
    1eae:	fc 01       	movw	r30, r24
    1eb0:	21 a3       	std	Z+33, r18	; 0x21
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	00 00       	nop
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <prvIsQueueEmpty>:
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <prvIsQueueEmpty+0x6>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9b 83       	std	Y+3, r25	; 0x03
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	0f 92       	push	r0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	fc 01       	movw	r30, r24
    1ee0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ee2:	88 23       	and	r24, r24
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <prvIsQueueEmpty+0x26>
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <prvIsQueueEmpty+0x28>
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <prvIsQueueFull>:
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <prvIsQueueFull+0x6>
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	9b 83       	std	Y+3, r25	; 0x03
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	0f 92       	push	r0
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	fc 01       	movw	r30, r24
    1f1a:	26 8d       	ldd	r18, Z+30	; 0x1e
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	fc 01       	movw	r30, r24
    1f22:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f24:	28 17       	cp	r18, r24
    1f26:	19 f4       	brne	.+6      	; 0x1f2e <prvIsQueueFull+0x2e>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <prvIsQueueFull+0x30>
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	08 95       	ret

00001f42 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	29 97       	sbiw	r28, 0x09	; 9
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	4d 83       	std	Y+5, r20	; 0x05
    1f5c:	5e 83       	std	Y+6, r21	; 0x06
    1f5e:	6f 83       	std	Y+7, r22	; 0x07
    1f60:	78 87       	std	Y+8, r23	; 0x08
    1f62:	29 87       	std	Y+9, r18	; 0x09
    Queue_t * const pxQueue = xQueue;
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	0f 92       	push	r0
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	fc 01       	movw	r30, r24
    1f78:	81 a1       	ldd	r24, Z+33	; 0x21
    1f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <vQueueWaitForMessageRestricted+0x44>
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	fc 01       	movw	r30, r24
    1f84:	11 a2       	std	Z+33, r1	; 0x21
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	82 a1       	ldd	r24, Z+34	; 0x22
    1f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f90:	21 f4       	brne	.+8      	; 0x1f9a <vQueueWaitForMessageRestricted+0x58>
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	fc 01       	movw	r30, r24
    1f98:	12 a2       	std	Z+34, r1	; 0x22
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fa6:	88 23       	and	r24, r24
    1fa8:	71 f4       	brne	.+28     	; 0x1fc6 <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	fc 01       	movw	r30, r24
    1fb0:	73 96       	adiw	r30, 0x13	; 19
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	af 81       	ldd	r26, Y+7	; 0x07
    1fb8:	b8 85       	ldd	r27, Y+8	; 0x08
    1fba:	29 85       	ldd	r18, Y+9	; 0x09
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	bd 01       	movw	r22, r26
    1fc0:	cf 01       	movw	r24, r30
    1fc2:	0e 94 30 1b 	call	0x3660	; 0x3660 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	1f df       	rcall	.-450    	; 0x1e0a <prvUnlockQueue>
    }
    1fcc:	00 00       	nop
    1fce:	29 96       	adiw	r28, 0x09	; 9
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1fe0:	0f 93       	push	r16
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	28 97       	sbiw	r28, 0x08	; 8
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	9d 83       	std	Y+5, r25	; 0x05
    1ff8:	8c 83       	std	Y+4, r24	; 0x04
    1ffa:	7f 83       	std	Y+7, r23	; 0x07
    1ffc:	6e 83       	std	Y+6, r22	; 0x06
    1ffe:	48 87       	std	Y+8, r20	; 0x08
    2000:	88 85       	ldd	r24, Y+8	; 0x08
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	19 f4       	brne	.+6      	; 0x200c <xStreamBufferGenericCreate+0x2c>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	01 c0       	rjmp	.+2      	; 0x200e <xStreamBufferGenericCreate+0x2e>
    200c:	19 82       	std	Y+1, r1	; 0x01
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	9f 81       	ldd	r25, Y+7	; 0x07
    2012:	89 2b       	or	r24, r25
    2014:	21 f4       	brne	.+8      	; 0x201e <xStreamBufferGenericCreate+0x3e>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9f 83       	std	Y+7, r25	; 0x07
    201c:	8e 83       	std	Y+6, r24	; 0x06
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	9d 81       	ldd	r25, Y+5	; 0x05
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	40 96       	adiw	r24, 0x10	; 16
    202e:	0e 94 b5 03 	call	0x76a	; 0x76a <pvPortMalloc>
    2032:	9b 83       	std	Y+3, r25	; 0x03
    2034:	8a 83       	std	Y+2, r24	; 0x02
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	9b 81       	ldd	r25, Y+3	; 0x03
    203a:	89 2b       	or	r24, r25
    203c:	69 f0       	breq	.+26     	; 0x2058 <xStreamBufferGenericCreate+0x78>
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	bc 01       	movw	r22, r24
    2044:	60 5f       	subi	r22, 0xF0	; 240
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	2e 81       	ldd	r18, Y+6	; 0x06
    204a:	3f 81       	ldd	r19, Y+7	; 0x07
    204c:	4c 81       	ldd	r20, Y+4	; 0x04
    204e:	5d 81       	ldd	r21, Y+5	; 0x05
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	09 81       	ldd	r16, Y+1	; 0x01
    2056:	11 d5       	rcall	.+2594   	; 0x2a7a <prvInitialiseNewStreamBuffer>
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	28 96       	adiw	r28, 0x08	; 8
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <xStreamBufferReset>:
    2070:	0f 93       	push	r16
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 d0       	rcall	.+0      	; 0x2078 <xStreamBufferReset+0x8>
    2078:	00 d0       	rcall	.+0      	; 0x207a <xStreamBufferReset+0xa>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	9b 83       	std	Y+3, r25	; 0x03
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	19 82       	std	Y+1, r1	; 0x01
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	9b 81       	ldd	r25, Y+3	; 0x03
    2090:	dc 01       	movw	r26, r24
    2092:	1f 96       	adiw	r26, 0x0f	; 15
    2094:	8c 91       	ld	r24, X
    2096:	8c 83       	std	Y+4, r24	; 0x04
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	0f 92       	push	r0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 85       	ldd	r24, Z+8	; 0x08
    20a6:	91 85       	ldd	r25, Z+9	; 0x09
    20a8:	89 2b       	or	r24, r25
    20aa:	71 f5       	brne	.+92     	; 0x2108 <xStreamBufferReset+0x98>
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	dc 01       	movw	r26, r24
    20b2:	1a 96       	adiw	r26, 0x0a	; 10
    20b4:	8d 91       	ld	r24, X+
    20b6:	9c 91       	ld	r25, X
    20b8:	1b 97       	sbiw	r26, 0x0b	; 11
    20ba:	89 2b       	or	r24, r25
    20bc:	29 f5       	brne	.+74     	; 0x2108 <xStreamBufferReset+0x98>
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	dc 01       	movw	r26, r24
    20c4:	1e 96       	adiw	r26, 0x0e	; 14
    20c6:	ec 91       	ld	r30, X
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	dc 01       	movw	r26, r24
    20ce:	16 96       	adiw	r26, 0x06	; 6
    20d0:	2d 91       	ld	r18, X+
    20d2:	3c 91       	ld	r19, X
    20d4:	17 97       	sbiw	r26, 0x07	; 7
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	dc 01       	movw	r26, r24
    20dc:	14 96       	adiw	r26, 0x04	; 4
    20de:	4d 91       	ld	r20, X+
    20e0:	5c 91       	ld	r21, X
    20e2:	15 97       	sbiw	r26, 0x05	; 5
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	dc 01       	movw	r26, r24
    20ea:	1c 96       	adiw	r26, 0x0c	; 12
    20ec:	6d 91       	ld	r22, X+
    20ee:	7c 91       	ld	r23, X
    20f0:	1d 97       	sbiw	r26, 0x0d	; 13
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	0e 2f       	mov	r16, r30
    20f8:	c0 d4       	rcall	.+2432   	; 0x2a7a <prvInitialiseNewStreamBuffer>
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	fc 01       	movw	r30, r24
    2106:	27 87       	std	Z+15, r18	; 0x0f
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	26 96       	adiw	r28, 0x06	; 6
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <xStreamBufferSpacesAvailable>:
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	00 d0       	rcall	.+0      	; 0x2128 <xStreamBufferSpacesAvailable+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <xStreamBufferSpacesAvailable+0x8>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	fc 01       	movw	r30, r24
    2140:	24 81       	ldd	r18, Z+4	; 0x04
    2142:	35 81       	ldd	r19, Z+5	; 0x05
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	fc 01       	movw	r30, r24
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	29 81       	ldd	r18, Y+1	; 0x01
    2162:	3a 81       	ldd	r19, Y+2	; 0x02
    2164:	a9 01       	movw	r20, r18
    2166:	48 1b       	sub	r20, r24
    2168:	59 0b       	sbc	r21, r25
    216a:	ca 01       	movw	r24, r20
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	fc 01       	movw	r30, r24
    2180:	24 81       	ldd	r18, Z+4	; 0x04
    2182:	35 81       	ldd	r19, Z+5	; 0x05
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	82 17       	cp	r24, r18
    218a:	93 07       	cpc	r25, r19
    218c:	68 f0       	brcs	.+26     	; 0x21a8 <xStreamBufferSpacesAvailable+0x86>
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	fc 01       	movw	r30, r24
    2194:	84 81       	ldd	r24, Z+4	; 0x04
    2196:	95 81       	ldd	r25, Z+5	; 0x05
    2198:	29 81       	ldd	r18, Y+1	; 0x01
    219a:	3a 81       	ldd	r19, Y+2	; 0x02
    219c:	a9 01       	movw	r20, r18
    219e:	48 1b       	sub	r20, r24
    21a0:	59 0b       	sbc	r21, r25
    21a2:	ca 01       	movw	r24, r20
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	26 96       	adiw	r28, 0x06	; 6
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <xStreamBufferSend>:
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	67 97       	sbiw	r28, 0x17	; 23
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	9f 87       	std	Y+15, r25	; 0x0f
    21e0:	8e 87       	std	Y+14, r24	; 0x0e
    21e2:	79 8b       	std	Y+17, r23	; 0x11
    21e4:	68 8b       	std	Y+16, r22	; 0x10
    21e6:	5b 8b       	std	Y+19, r21	; 0x13
    21e8:	4a 8b       	std	Y+18, r20	; 0x12
    21ea:	0c 8b       	std	Y+20, r16	; 0x14
    21ec:	1d 8b       	std	Y+21, r17	; 0x15
    21ee:	2e 8b       	std	Y+22, r18	; 0x16
    21f0:	3f 8b       	std	Y+23, r19	; 0x17
    21f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2200:	9b 89       	ldd	r25, Y+19	; 0x13
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	fc 01       	movw	r30, r24
    220c:	86 85       	ldd	r24, Z+14	; 0x0e
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	81 70       	andi	r24, 0x01	; 1
    2214:	99 27       	eor	r25, r25
    2216:	89 2b       	or	r24, r25
    2218:	29 f0       	breq	.+10     	; 0x2224 <__stack+0x25>
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	02 96       	adiw	r24, 0x02	; 2
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
    2224:	8c 89       	ldd	r24, Y+20	; 0x14
    2226:	9d 89       	ldd	r25, Y+21	; 0x15
    2228:	ae 89       	ldd	r26, Y+22	; 0x16
    222a:	bf 89       	ldd	r27, Y+23	; 0x17
    222c:	89 2b       	or	r24, r25
    222e:	8a 2b       	or	r24, r26
    2230:	8b 2b       	or	r24, r27
    2232:	09 f4       	brne	.+2      	; 0x2236 <__stack+0x37>
    2234:	45 c0       	rjmp	.+138    	; 0x22c0 <__stack+0xc1>
    2236:	ce 01       	movw	r24, r28
    2238:	09 96       	adiw	r24, 0x09	; 9
    223a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <vTaskSetTimeOutState>
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	0f 92       	push	r0
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	6c df       	rcall	.-296    	; 0x2122 <xStreamBufferSpacesAvailable>
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	29 81       	ldd	r18, Y+1	; 0x01
    2250:	3a 81       	ldd	r19, Y+2	; 0x02
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	28 17       	cp	r18, r24
    2258:	39 07       	cpc	r19, r25
    225a:	68 f4       	brcc	.+26     	; 0x2276 <__stack+0x77>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <xTaskNotifyStateClear>
    2264:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <xTaskGetCurrentTaskHandle>
    2268:	9c 01       	movw	r18, r24
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	fc 01       	movw	r30, r24
    2270:	33 87       	std	Z+11, r19	; 0x0b
    2272:	22 87       	std	Z+10, r18	; 0x0a
    2274:	03 c0       	rjmp	.+6      	; 0x227c <__stack+0x7d>
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	22 c0       	rjmp	.+68     	; 0x22c0 <__stack+0xc1>
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	8c 89       	ldd	r24, Y+20	; 0x14
    2282:	9d 89       	ldd	r25, Y+21	; 0x15
    2284:	ae 89       	ldd	r26, Y+22	; 0x16
    2286:	bf 89       	ldd	r27, Y+23	; 0x17
    2288:	6c 01       	movw	r12, r24
    228a:	7d 01       	movw	r14, r26
    228c:	00 e0       	ldi	r16, 0x00	; 0
    228e:	10 e0       	ldi	r17, 0x00	; 0
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	a9 01       	movw	r20, r18
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	cb 01       	movw	r24, r22
    229c:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <xTaskNotifyWait>
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	fc 01       	movw	r30, r24
    22a6:	13 86       	std	Z+11, r1	; 0x0b
    22a8:	12 86       	std	Z+10, r1	; 0x0a
    22aa:	9e 01       	movw	r18, r28
    22ac:	2c 5e       	subi	r18, 0xEC	; 236
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	ce 01       	movw	r24, r28
    22b2:	09 96       	adiw	r24, 0x09	; 9
    22b4:	b9 01       	movw	r22, r18
    22b6:	0e 94 1e 1c 	call	0x383c	; 0x383c <xTaskCheckForTimeOut>
    22ba:	88 23       	and	r24, r24
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	bf cf       	rjmp	.-130    	; 0x223e <__stack+0x3f>
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	89 2b       	or	r24, r25
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <__stack+0xd3>
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	2a df       	rcall	.-428    	; 0x2122 <xStreamBufferSpacesAvailable>
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	eb 81       	ldd	r30, Y+3	; 0x03
    22d4:	fc 81       	ldd	r31, Y+4	; 0x04
    22d6:	29 81       	ldd	r18, Y+1	; 0x01
    22d8:	3a 81       	ldd	r19, Y+2	; 0x02
    22da:	4a 89       	ldd	r20, Y+18	; 0x12
    22dc:	5b 89       	ldd	r21, Y+19	; 0x13
    22de:	68 89       	ldd	r22, Y+16	; 0x10
    22e0:	79 89       	ldd	r23, Y+17	; 0x11
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	8f 01       	movw	r16, r30
    22e8:	ba d0       	rcall	.+372    	; 0x245e <prvWriteMessageToBuffer>
    22ea:	98 87       	std	Y+8, r25	; 0x08
    22ec:	8f 83       	std	Y+7, r24	; 0x07
    22ee:	8f 81       	ldd	r24, Y+7	; 0x07
    22f0:	98 85       	ldd	r25, Y+8	; 0x08
    22f2:	89 2b       	or	r24, r25
    22f4:	39 f1       	breq	.+78     	; 0x2344 <__stack+0x145>
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	7c d3       	rcall	.+1784   	; 0x29f4 <prvBytesInBuffer>
    22fc:	9c 01       	movw	r18, r24
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	fc 01       	movw	r30, r24
    2304:	86 81       	ldd	r24, Z+6	; 0x06
    2306:	97 81       	ldd	r25, Z+7	; 0x07
    2308:	28 17       	cp	r18, r24
    230a:	39 07       	cpc	r19, r25
    230c:	d8 f0       	brcs	.+54     	; 0x2344 <__stack+0x145>
    230e:	08 d7       	rcall	.+3600   	; 0x3120 <vTaskSuspendAll>
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	fc 01       	movw	r30, r24
    2316:	80 85       	ldd	r24, Z+8	; 0x08
    2318:	91 85       	ldd	r25, Z+9	; 0x09
    231a:	89 2b       	or	r24, r25
    231c:	91 f0       	breq	.+36     	; 0x2342 <__stack+0x143>
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	fc 01       	movw	r30, r24
    2324:	80 85       	ldd	r24, Z+8	; 0x08
    2326:	91 85       	ldd	r25, Z+9	; 0x09
    2328:	00 e0       	ldi	r16, 0x00	; 0
    232a:	10 e0       	ldi	r17, 0x00	; 0
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	ba 01       	movw	r22, r20
    2334:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <xTaskGenericNotify>
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	fc 01       	movw	r30, r24
    233e:	11 86       	std	Z+9, r1	; 0x09
    2340:	10 86       	std	Z+8, r1	; 0x08
    2342:	fb d6       	rcall	.+3574   	; 0x313a <xTaskResumeAll>
    2344:	8f 81       	ldd	r24, Y+7	; 0x07
    2346:	98 85       	ldd	r25, Y+8	; 0x08
    2348:	67 96       	adiw	r28, 0x17	; 23
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	08 95       	ret

00002366 <xStreamBufferSendFromISR>:
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	61 97       	sbiw	r28, 0x11	; 17
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	9b 87       	std	Y+11, r25	; 0x0b
    2384:	8a 87       	std	Y+10, r24	; 0x0a
    2386:	7d 87       	std	Y+13, r23	; 0x0d
    2388:	6c 87       	std	Y+12, r22	; 0x0c
    238a:	5f 87       	std	Y+15, r21	; 0x0f
    238c:	4e 87       	std	Y+14, r20	; 0x0e
    238e:	39 8b       	std	Y+17, r19	; 0x11
    2390:	28 8b       	std	Y+16, r18	; 0x10
    2392:	8a 85       	ldd	r24, Y+10	; 0x0a
    2394:	9b 85       	ldd	r25, Y+11	; 0x0b
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	9f 85       	ldd	r25, Y+15	; 0x0f
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	fc 01       	movw	r30, r24
    23a8:	86 85       	ldd	r24, Z+14	; 0x0e
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	81 70       	andi	r24, 0x01	; 1
    23b0:	99 27       	eor	r25, r25
    23b2:	89 2b       	or	r24, r25
    23b4:	29 f0       	breq	.+10     	; 0x23c0 <xStreamBufferSendFromISR+0x5a>
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	02 96       	adiw	r24, 0x02	; 2
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	ae de       	rcall	.-676    	; 0x2122 <xStreamBufferSpacesAvailable>
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	2d 81       	ldd	r18, Y+5	; 0x05
    23d0:	3e 81       	ldd	r19, Y+6	; 0x06
    23d2:	4e 85       	ldd	r20, Y+14	; 0x0e
    23d4:	5f 85       	ldd	r21, Y+15	; 0x0f
    23d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    23d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	8f 01       	movw	r16, r30
    23e0:	3e d0       	rcall	.+124    	; 0x245e <prvWriteMessageToBuffer>
    23e2:	98 87       	std	Y+8, r25	; 0x08
    23e4:	8f 83       	std	Y+7, r24	; 0x07
    23e6:	8f 81       	ldd	r24, Y+7	; 0x07
    23e8:	98 85       	ldd	r25, Y+8	; 0x08
    23ea:	89 2b       	or	r24, r25
    23ec:	49 f1       	breq	.+82     	; 0x2440 <xStreamBufferSendFromISR+0xda>
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	00 d3       	rcall	.+1536   	; 0x29f4 <prvBytesInBuffer>
    23f4:	9c 01       	movw	r18, r24
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	fc 01       	movw	r30, r24
    23fc:	86 81       	ldd	r24, Z+6	; 0x06
    23fe:	97 81       	ldd	r25, Z+7	; 0x07
    2400:	28 17       	cp	r18, r24
    2402:	39 07       	cpc	r19, r25
    2404:	e8 f0       	brcs	.+58     	; 0x2440 <xStreamBufferSendFromISR+0xda>
    2406:	19 86       	std	Y+9, r1	; 0x09
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	fc 01       	movw	r30, r24
    240e:	80 85       	ldd	r24, Z+8	; 0x08
    2410:	91 85       	ldd	r25, Z+9	; 0x09
    2412:	89 2b       	or	r24, r25
    2414:	a9 f0       	breq	.+42     	; 0x2440 <xStreamBufferSendFromISR+0xda>
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	fc 01       	movw	r30, r24
    241c:	80 85       	ldd	r24, Z+8	; 0x08
    241e:	91 85       	ldd	r25, Z+9	; 0x09
    2420:	28 89       	ldd	r18, Y+16	; 0x10
    2422:	39 89       	ldd	r19, Y+17	; 0x11
    2424:	79 01       	movw	r14, r18
    2426:	00 e0       	ldi	r16, 0x00	; 0
    2428:	10 e0       	ldi	r17, 0x00	; 0
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	ba 01       	movw	r22, r20
    2432:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <xTaskGenericNotifyFromISR>
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	fc 01       	movw	r30, r24
    243c:	11 86       	std	Z+9, r1	; 0x09
    243e:	10 86       	std	Z+8, r1	; 0x08
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	98 85       	ldd	r25, Y+8	; 0x08
    2444:	61 96       	adiw	r28, 0x11	; 17
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	08 95       	ret

0000245e <prvWriteMessageToBuffer>:
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	61 97       	sbiw	r28, 0x11	; 17
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	99 87       	std	Y+9, r25	; 0x09
    2478:	88 87       	std	Y+8, r24	; 0x08
    247a:	7b 87       	std	Y+11, r23	; 0x0b
    247c:	6a 87       	std	Y+10, r22	; 0x0a
    247e:	5d 87       	std	Y+13, r21	; 0x0d
    2480:	4c 87       	std	Y+12, r20	; 0x0c
    2482:	3f 87       	std	Y+15, r19	; 0x0f
    2484:	2e 87       	std	Y+14, r18	; 0x0e
    2486:	19 8b       	std	Y+17, r17	; 0x11
    2488:	08 8b       	std	Y+16, r16	; 0x10
    248a:	8e 85       	ldd	r24, Y+14	; 0x0e
    248c:	9f 85       	ldd	r25, Y+15	; 0x0f
    248e:	89 2b       	or	r24, r25
    2490:	11 f4       	brne	.+4      	; 0x2496 <prvWriteMessageToBuffer+0x38>
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	33 c0       	rjmp	.+102    	; 0x24fc <prvWriteMessageToBuffer+0x9e>
    2496:	88 85       	ldd	r24, Y+8	; 0x08
    2498:	99 85       	ldd	r25, Y+9	; 0x09
    249a:	fc 01       	movw	r30, r24
    249c:	86 85       	ldd	r24, Z+14	; 0x0e
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	81 70       	andi	r24, 0x01	; 1
    24a4:	99 27       	eor	r25, r25
    24a6:	89 2b       	or	r24, r25
    24a8:	a9 f4       	brne	.+42     	; 0x24d4 <prvWriteMessageToBuffer+0x76>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b2:	9d 83       	std	Y+5, r25	; 0x05
    24b4:	8c 83       	std	Y+4, r24	; 0x04
    24b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ba:	9f 83       	std	Y+7, r25	; 0x07
    24bc:	8e 83       	std	Y+6, r24	; 0x06
    24be:	2c 81       	ldd	r18, Y+4	; 0x04
    24c0:	3d 81       	ldd	r19, Y+5	; 0x05
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	9f 81       	ldd	r25, Y+7	; 0x07
    24c6:	28 17       	cp	r18, r24
    24c8:	39 07       	cpc	r19, r25
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <prvWriteMessageToBuffer+0x70>
    24cc:	c9 01       	movw	r24, r18
    24ce:	9d 87       	std	Y+13, r25	; 0x0d
    24d0:	8c 87       	std	Y+12, r24	; 0x0c
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <prvWriteMessageToBuffer+0x9e>
    24d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    24d6:	3f 85       	ldd	r19, Y+15	; 0x0f
    24d8:	88 89       	ldd	r24, Y+16	; 0x10
    24da:	99 89       	ldd	r25, Y+17	; 0x11
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	60 f0       	brcs	.+24     	; 0x24fa <prvWriteMessageToBuffer+0x9c>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	9e 01       	movw	r18, r28
    24e8:	24 5f       	subi	r18, 0xF4	; 244
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	88 85       	ldd	r24, Y+8	; 0x08
    24ee:	99 85       	ldd	r25, Y+9	; 0x09
    24f0:	42 e0       	ldi	r20, 0x02	; 2
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	b9 01       	movw	r22, r18
    24f6:	48 d1       	rcall	.+656    	; 0x2788 <prvWriteBytesToBuffer>
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <prvWriteMessageToBuffer+0x9e>
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	88 23       	and	r24, r24
    2500:	59 f0       	breq	.+22     	; 0x2518 <prvWriteMessageToBuffer+0xba>
    2502:	4c 85       	ldd	r20, Y+12	; 0x0c
    2504:	5d 85       	ldd	r21, Y+13	; 0x0d
    2506:	2a 85       	ldd	r18, Y+10	; 0x0a
    2508:	3b 85       	ldd	r19, Y+11	; 0x0b
    250a:	88 85       	ldd	r24, Y+8	; 0x08
    250c:	99 85       	ldd	r25, Y+9	; 0x09
    250e:	b9 01       	movw	r22, r18
    2510:	3b d1       	rcall	.+630    	; 0x2788 <prvWriteBytesToBuffer>
    2512:	9b 83       	std	Y+3, r25	; 0x03
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	02 c0       	rjmp	.+4      	; 0x251c <prvWriteMessageToBuffer+0xbe>
    2518:	1b 82       	std	Y+3, r1	; 0x03
    251a:	1a 82       	std	Y+2, r1	; 0x02
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	61 96       	adiw	r28, 0x11	; 17
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <xStreamBufferReceive>:
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	62 97       	sbiw	r28, 0x12	; 18
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	9a 87       	std	Y+10, r25	; 0x0a
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	7c 87       	std	Y+12, r23	; 0x0c
    255c:	6b 87       	std	Y+11, r22	; 0x0b
    255e:	5e 87       	std	Y+14, r21	; 0x0e
    2560:	4d 87       	std	Y+13, r20	; 0x0d
    2562:	0f 87       	std	Y+15, r16	; 0x0f
    2564:	18 8b       	std	Y+16, r17	; 0x10
    2566:	29 8b       	std	Y+17, r18	; 0x11
    2568:	3a 8b       	std	Y+18, r19	; 0x12
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	98 87       	std	Y+8, r25	; 0x08
    2570:	8f 83       	std	Y+7, r24	; 0x07
    2572:	1a 82       	std	Y+2, r1	; 0x02
    2574:	19 82       	std	Y+1, r1	; 0x01
    2576:	8f 81       	ldd	r24, Y+7	; 0x07
    2578:	98 85       	ldd	r25, Y+8	; 0x08
    257a:	fc 01       	movw	r30, r24
    257c:	86 85       	ldd	r24, Z+14	; 0x0e
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	81 70       	andi	r24, 0x01	; 1
    2584:	99 27       	eor	r25, r25
    2586:	89 2b       	or	r24, r25
    2588:	29 f0       	breq	.+10     	; 0x2594 <xStreamBufferReceive+0x5e>
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <xStreamBufferReceive+0x62>
    2594:	1e 82       	std	Y+6, r1	; 0x06
    2596:	1d 82       	std	Y+5, r1	; 0x05
    2598:	8f 85       	ldd	r24, Y+15	; 0x0f
    259a:	98 89       	ldd	r25, Y+16	; 0x10
    259c:	a9 89       	ldd	r26, Y+17	; 0x11
    259e:	ba 89       	ldd	r27, Y+18	; 0x12
    25a0:	89 2b       	or	r24, r25
    25a2:	8a 2b       	or	r24, r26
    25a4:	8b 2b       	or	r24, r27
    25a6:	09 f4       	brne	.+2      	; 0x25aa <xStreamBufferReceive+0x74>
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <xStreamBufferReceive+0xf2>
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	0f 92       	push	r0
    25b0:	8f 81       	ldd	r24, Y+7	; 0x07
    25b2:	98 85       	ldd	r25, Y+8	; 0x08
    25b4:	1f d2       	rcall	.+1086   	; 0x29f4 <prvBytesInBuffer>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	2b 81       	ldd	r18, Y+3	; 0x03
    25bc:	3c 81       	ldd	r19, Y+4	; 0x04
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	60 f0       	brcs	.+24     	; 0x25e0 <xStreamBufferReceive+0xaa>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <xTaskNotifyStateClear>
    25d0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <xTaskGetCurrentTaskHandle>
    25d4:	9c 01       	movw	r18, r24
    25d6:	8f 81       	ldd	r24, Y+7	; 0x07
    25d8:	98 85       	ldd	r25, Y+8	; 0x08
    25da:	fc 01       	movw	r30, r24
    25dc:	31 87       	std	Z+9, r19	; 0x09
    25de:	20 87       	std	Z+8, r18	; 0x08
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	2b 81       	ldd	r18, Y+3	; 0x03
    25e6:	3c 81       	ldd	r19, Y+4	; 0x04
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	82 17       	cp	r24, r18
    25ee:	93 07       	cpc	r25, r19
    25f0:	00 f1       	brcs	.+64     	; 0x2632 <xStreamBufferReceive+0xfc>
    25f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f4:	98 89       	ldd	r25, Y+16	; 0x10
    25f6:	a9 89       	ldd	r26, Y+17	; 0x11
    25f8:	ba 89       	ldd	r27, Y+18	; 0x12
    25fa:	6c 01       	movw	r12, r24
    25fc:	7d 01       	movw	r14, r26
    25fe:	00 e0       	ldi	r16, 0x00	; 0
    2600:	10 e0       	ldi	r17, 0x00	; 0
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	a9 01       	movw	r20, r18
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	cb 01       	movw	r24, r22
    260e:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <xTaskNotifyWait>
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	98 85       	ldd	r25, Y+8	; 0x08
    2616:	fc 01       	movw	r30, r24
    2618:	11 86       	std	Z+9, r1	; 0x09
    261a:	10 86       	std	Z+8, r1	; 0x08
    261c:	8f 81       	ldd	r24, Y+7	; 0x07
    261e:	98 85       	ldd	r25, Y+8	; 0x08
    2620:	e9 d1       	rcall	.+978    	; 0x29f4 <prvBytesInBuffer>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <xStreamBufferReceive+0xfc>
    2628:	8f 81       	ldd	r24, Y+7	; 0x07
    262a:	98 85       	ldd	r25, Y+8	; 0x08
    262c:	e3 d1       	rcall	.+966    	; 0x29f4 <prvBytesInBuffer>
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	2b 81       	ldd	r18, Y+3	; 0x03
    2634:	3c 81       	ldd	r19, Y+4	; 0x04
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	68 f5       	brcc	.+90     	; 0x269a <xStreamBufferReceive+0x164>
    2640:	ed 81       	ldd	r30, Y+5	; 0x05
    2642:	fe 81       	ldd	r31, Y+6	; 0x06
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	3c 81       	ldd	r19, Y+4	; 0x04
    2648:	4d 85       	ldd	r20, Y+13	; 0x0d
    264a:	5e 85       	ldd	r21, Y+14	; 0x0e
    264c:	6b 85       	ldd	r22, Y+11	; 0x0b
    264e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2650:	8f 81       	ldd	r24, Y+7	; 0x07
    2652:	98 85       	ldd	r25, Y+8	; 0x08
    2654:	8f 01       	movw	r16, r30
    2656:	32 d0       	rcall	.+100    	; 0x26bc <prvReadMessageFromBuffer>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	89 2b       	or	r24, r25
    2662:	d9 f0       	breq	.+54     	; 0x269a <xStreamBufferReceive+0x164>
    2664:	5d d5       	rcall	.+2746   	; 0x3120 <vTaskSuspendAll>
    2666:	8f 81       	ldd	r24, Y+7	; 0x07
    2668:	98 85       	ldd	r25, Y+8	; 0x08
    266a:	fc 01       	movw	r30, r24
    266c:	82 85       	ldd	r24, Z+10	; 0x0a
    266e:	93 85       	ldd	r25, Z+11	; 0x0b
    2670:	89 2b       	or	r24, r25
    2672:	91 f0       	breq	.+36     	; 0x2698 <xStreamBufferReceive+0x162>
    2674:	8f 81       	ldd	r24, Y+7	; 0x07
    2676:	98 85       	ldd	r25, Y+8	; 0x08
    2678:	fc 01       	movw	r30, r24
    267a:	82 85       	ldd	r24, Z+10	; 0x0a
    267c:	93 85       	ldd	r25, Z+11	; 0x0b
    267e:	00 e0       	ldi	r16, 0x00	; 0
    2680:	10 e0       	ldi	r17, 0x00	; 0
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	ba 01       	movw	r22, r20
    268a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <xTaskGenericNotify>
    268e:	8f 81       	ldd	r24, Y+7	; 0x07
    2690:	98 85       	ldd	r25, Y+8	; 0x08
    2692:	fc 01       	movw	r30, r24
    2694:	13 86       	std	Z+11, r1	; 0x0b
    2696:	12 86       	std	Z+10, r1	; 0x0a
    2698:	50 d5       	rcall	.+2720   	; 0x313a <xTaskResumeAll>
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	62 96       	adiw	r28, 0x12	; 18
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	08 95       	ret

000026bc <prvReadMessageFromBuffer>:
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	62 97       	sbiw	r28, 0x12	; 18
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	9a 87       	std	Y+10, r25	; 0x0a
    26d6:	89 87       	std	Y+9, r24	; 0x09
    26d8:	7c 87       	std	Y+12, r23	; 0x0c
    26da:	6b 87       	std	Y+11, r22	; 0x0b
    26dc:	5e 87       	std	Y+14, r21	; 0x0e
    26de:	4d 87       	std	Y+13, r20	; 0x0d
    26e0:	38 8b       	std	Y+16, r19	; 0x10
    26e2:	2f 87       	std	Y+15, r18	; 0x0f
    26e4:	1a 8b       	std	Y+18, r17	; 0x12
    26e6:	09 8b       	std	Y+17, r16	; 0x11
    26e8:	89 89       	ldd	r24, Y+17	; 0x11
    26ea:	9a 89       	ldd	r25, Y+18	; 0x12
    26ec:	89 2b       	or	r24, r25
    26ee:	81 f1       	breq	.+96     	; 0x2750 <prvReadMessageFromBuffer+0x94>
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	fc 01       	movw	r30, r24
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	8b 83       	std	Y+3, r24	; 0x03
    26fe:	2f 85       	ldd	r18, Y+15	; 0x0f
    2700:	38 89       	ldd	r19, Y+16	; 0x10
    2702:	49 89       	ldd	r20, Y+17	; 0x11
    2704:	5a 89       	ldd	r21, Y+18	; 0x12
    2706:	be 01       	movw	r22, r28
    2708:	69 5f       	subi	r22, 0xF9	; 249
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	ca d0       	rcall	.+404    	; 0x28a6 <prvReadBytesFromBuffer>
    2712:	8f 81       	ldd	r24, Y+7	; 0x07
    2714:	98 85       	ldd	r25, Y+8	; 0x08
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	2f 85       	ldd	r18, Y+15	; 0x0f
    271c:	38 89       	ldd	r19, Y+16	; 0x10
    271e:	89 89       	ldd	r24, Y+17	; 0x11
    2720:	9a 89       	ldd	r25, Y+18	; 0x12
    2722:	a9 01       	movw	r20, r18
    2724:	48 1b       	sub	r20, r24
    2726:	59 0b       	sbc	r21, r25
    2728:	ca 01       	movw	r24, r20
    272a:	98 8b       	std	Y+16, r25	; 0x10
    272c:	8f 87       	std	Y+15, r24	; 0x0f
    272e:	29 81       	ldd	r18, Y+1	; 0x01
    2730:	3a 81       	ldd	r19, Y+2	; 0x02
    2732:	8d 85       	ldd	r24, Y+13	; 0x0d
    2734:	9e 85       	ldd	r25, Y+14	; 0x0e
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	70 f4       	brcc	.+28     	; 0x2758 <prvReadMessageFromBuffer+0x9c>
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	fc 01       	movw	r30, r24
    2746:	31 83       	std	Z+1, r19	; 0x01
    2748:	20 83       	st	Z, r18
    274a:	1a 82       	std	Y+2, r1	; 0x02
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <prvReadMessageFromBuffer+0x9c>
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	2f 85       	ldd	r18, Y+15	; 0x0f
    275a:	38 89       	ldd	r19, Y+16	; 0x10
    275c:	49 81       	ldd	r20, Y+1	; 0x01
    275e:	5a 81       	ldd	r21, Y+2	; 0x02
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	9e d0       	rcall	.+316    	; 0x28a6 <prvReadBytesFromBuffer>
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	62 96       	adiw	r28, 0x12	; 18
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	08 95       	ret

00002788 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	2e 97       	sbiw	r28, 0x0e	; 14
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	9a 87       	std	Y+10, r25	; 0x0a
    279e:	89 87       	std	Y+9, r24	; 0x09
    27a0:	7c 87       	std	Y+12, r23	; 0x0c
    27a2:	6b 87       	std	Y+11, r22	; 0x0b
    27a4:	5e 87       	std	Y+14, r21	; 0x0e
    27a6:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	fc 01       	movw	r30, r24
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	fc 01       	movw	r30, r24
    27bc:	24 81       	ldd	r18, Z+4	; 0x04
    27be:	35 81       	ldd	r19, Z+5	; 0x05
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	a9 01       	movw	r20, r18
    27c6:	48 1b       	sub	r20, r24
    27c8:	59 0b       	sbc	r21, r25
    27ca:	ca 01       	movw	r24, r20
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	2b 81       	ldd	r18, Y+3	; 0x03
    27da:	3c 81       	ldd	r19, Y+4	; 0x04
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	28 17       	cp	r18, r24
    27e2:	39 07       	cpc	r19, r25
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <prvWriteBytesToBuffer+0x60>
    27e6:	c9 01       	movw	r24, r18
    27e8:	98 87       	std	Y+8, r25	; 0x08
    27ea:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	fc 01       	movw	r30, r24
    27f2:	24 85       	ldd	r18, Z+12	; 0x0c
    27f4:	35 85       	ldd	r19, Z+13	; 0x0d
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	82 0f       	add	r24, r18
    27fc:	93 1f       	adc	r25, r19
    27fe:	4f 81       	ldd	r20, Y+7	; 0x07
    2800:	58 85       	ldd	r21, Y+8	; 0x08
    2802:	2b 85       	ldd	r18, Y+11	; 0x0b
    2804:	3c 85       	ldd	r19, Y+12	; 0x0c
    2806:	b9 01       	movw	r22, r18
    2808:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    280c:	2d 85       	ldd	r18, Y+13	; 0x0d
    280e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2810:	8f 81       	ldd	r24, Y+7	; 0x07
    2812:	98 85       	ldd	r25, Y+8	; 0x08
    2814:	82 17       	cp	r24, r18
    2816:	93 07       	cpc	r25, r19
    2818:	a8 f4       	brcc	.+42     	; 0x2844 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    281a:	2d 85       	ldd	r18, Y+13	; 0x0d
    281c:	3e 85       	ldd	r19, Y+14	; 0x0e
    281e:	8f 81       	ldd	r24, Y+7	; 0x07
    2820:	98 85       	ldd	r25, Y+8	; 0x08
    2822:	a9 01       	movw	r20, r18
    2824:	48 1b       	sub	r20, r24
    2826:	59 0b       	sbc	r21, r25
    2828:	2b 85       	ldd	r18, Y+11	; 0x0b
    282a:	3c 85       	ldd	r19, Y+12	; 0x0c
    282c:	8f 81       	ldd	r24, Y+7	; 0x07
    282e:	98 85       	ldd	r25, Y+8	; 0x08
    2830:	28 0f       	add	r18, r24
    2832:	39 1f       	adc	r19, r25
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	fc 01       	movw	r30, r24
    283a:	84 85       	ldd	r24, Z+12	; 0x0c
    283c:	95 85       	ldd	r25, Z+13	; 0x0d
    283e:	b9 01       	movw	r22, r18
    2840:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2844:	29 81       	ldd	r18, Y+1	; 0x01
    2846:	3a 81       	ldd	r19, Y+2	; 0x02
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	82 0f       	add	r24, r18
    284e:	93 1f       	adc	r25, r19
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	fc 01       	movw	r30, r24
    285a:	24 81       	ldd	r18, Z+4	; 0x04
    285c:	35 81       	ldd	r19, Z+5	; 0x05
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	82 17       	cp	r24, r18
    2864:	93 07       	cpc	r25, r19
    2866:	68 f0       	brcs	.+26     	; 0x2882 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	fc 01       	movw	r30, r24
    286e:	84 81       	ldd	r24, Z+4	; 0x04
    2870:	95 81       	ldd	r25, Z+5	; 0x05
    2872:	29 81       	ldd	r18, Y+1	; 0x01
    2874:	3a 81       	ldd	r19, Y+2	; 0x02
    2876:	a9 01       	movw	r20, r18
    2878:	48 1b       	sub	r20, r24
    287a:	59 0b       	sbc	r21, r25
    287c:	ca 01       	movw	r24, r20
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	29 81       	ldd	r18, Y+1	; 0x01
    2888:	3a 81       	ldd	r19, Y+2	; 0x02
    288a:	fc 01       	movw	r30, r24
    288c:	33 83       	std	Z+3, r19	; 0x03
    288e:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2894:	2e 96       	adiw	r28, 0x0e	; 14
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	66 97       	sbiw	r28, 0x16	; 22
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	98 8b       	std	Y+16, r25	; 0x10
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
    28be:	7a 8b       	std	Y+18, r23	; 0x12
    28c0:	69 8b       	std	Y+17, r22	; 0x11
    28c2:	5c 8b       	std	Y+20, r21	; 0x14
    28c4:	4b 8b       	std	Y+19, r20	; 0x13
    28c6:	3e 8b       	std	Y+22, r19	; 0x16
    28c8:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    28ca:	8d 89       	ldd	r24, Y+21	; 0x15
    28cc:	9e 89       	ldd	r25, Y+22	; 0x16
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	2b 81       	ldd	r18, Y+3	; 0x03
    28dc:	3c 81       	ldd	r19, Y+4	; 0x04
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	28 17       	cp	r18, r24
    28e4:	39 07       	cpc	r19, r25
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <prvReadBytesFromBuffer+0x44>
    28e8:	c9 01       	movw	r24, r18
    28ea:	98 87       	std	Y+8, r25	; 0x08
    28ec:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    28ee:	8f 81       	ldd	r24, Y+7	; 0x07
    28f0:	98 85       	ldd	r25, Y+8	; 0x08
    28f2:	89 2b       	or	r24, r25
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <prvReadBytesFromBuffer+0x52>
    28f6:	73 c0       	rjmp	.+230    	; 0x29de <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    28f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fa:	98 89       	ldd	r25, Y+16	; 0x10
    28fc:	fc 01       	movw	r30, r24
    28fe:	80 81       	ld	r24, Z
    2900:	91 81       	ldd	r25, Z+1	; 0x01
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2906:	8f 85       	ldd	r24, Y+15	; 0x0f
    2908:	98 89       	ldd	r25, Y+16	; 0x10
    290a:	fc 01       	movw	r30, r24
    290c:	24 81       	ldd	r18, Z+4	; 0x04
    290e:	35 81       	ldd	r19, Z+5	; 0x05
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	a9 01       	movw	r20, r18
    2916:	48 1b       	sub	r20, r24
    2918:	59 0b       	sbc	r21, r25
    291a:	ca 01       	movw	r24, r20
    291c:	9a 87       	std	Y+10, r25	; 0x0a
    291e:	89 87       	std	Y+9, r24	; 0x09
    2920:	8f 81       	ldd	r24, Y+7	; 0x07
    2922:	98 85       	ldd	r25, Y+8	; 0x08
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	8b 87       	std	Y+11, r24	; 0x0b
    2928:	29 85       	ldd	r18, Y+9	; 0x09
    292a:	3a 85       	ldd	r19, Y+10	; 0x0a
    292c:	8b 85       	ldd	r24, Y+11	; 0x0b
    292e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2930:	28 17       	cp	r18, r24
    2932:	39 07       	cpc	r19, r25
    2934:	08 f4       	brcc	.+2      	; 0x2938 <prvReadBytesFromBuffer+0x92>
    2936:	c9 01       	movw	r24, r18
    2938:	9e 87       	std	Y+14, r25	; 0x0e
    293a:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    293c:	8f 85       	ldd	r24, Y+15	; 0x0f
    293e:	98 89       	ldd	r25, Y+16	; 0x10
    2940:	fc 01       	movw	r30, r24
    2942:	24 85       	ldd	r18, Z+12	; 0x0c
    2944:	35 85       	ldd	r19, Z+13	; 0x0d
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	28 0f       	add	r18, r24
    294c:	39 1f       	adc	r19, r25
    294e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2950:	5e 85       	ldd	r21, Y+14	; 0x0e
    2952:	89 89       	ldd	r24, Y+17	; 0x11
    2954:	9a 89       	ldd	r25, Y+18	; 0x12
    2956:	b9 01       	movw	r22, r18
    2958:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    295c:	2f 81       	ldd	r18, Y+7	; 0x07
    295e:	38 85       	ldd	r19, Y+8	; 0x08
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	82 17       	cp	r24, r18
    2966:	93 07       	cpc	r25, r19
    2968:	a0 f4       	brcc	.+40     	; 0x2992 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    296a:	2f 81       	ldd	r18, Y+7	; 0x07
    296c:	38 85       	ldd	r19, Y+8	; 0x08
    296e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2970:	9e 85       	ldd	r25, Y+14	; 0x0e
    2972:	a9 01       	movw	r20, r18
    2974:	48 1b       	sub	r20, r24
    2976:	59 0b       	sbc	r21, r25
    2978:	8f 85       	ldd	r24, Y+15	; 0x0f
    297a:	98 89       	ldd	r25, Y+16	; 0x10
    297c:	fc 01       	movw	r30, r24
    297e:	64 85       	ldd	r22, Z+12	; 0x0c
    2980:	75 85       	ldd	r23, Z+13	; 0x0d
    2982:	29 89       	ldd	r18, Y+17	; 0x11
    2984:	3a 89       	ldd	r19, Y+18	; 0x12
    2986:	8d 85       	ldd	r24, Y+13	; 0x0d
    2988:	9e 85       	ldd	r25, Y+14	; 0x0e
    298a:	82 0f       	add	r24, r18
    298c:	93 1f       	adc	r25, r19
    298e:	0e 94 bf 38 	call	0x717e	; 0x717e <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    2992:	29 81       	ldd	r18, Y+1	; 0x01
    2994:	3a 81       	ldd	r19, Y+2	; 0x02
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	82 0f       	add	r24, r18
    299c:	93 1f       	adc	r25, r19
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    29a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a4:	98 89       	ldd	r25, Y+16	; 0x10
    29a6:	fc 01       	movw	r30, r24
    29a8:	24 81       	ldd	r18, Z+4	; 0x04
    29aa:	35 81       	ldd	r19, Z+5	; 0x05
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	82 17       	cp	r24, r18
    29b2:	93 07       	cpc	r25, r19
    29b4:	68 f0       	brcs	.+26     	; 0x29d0 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    29b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b8:	98 89       	ldd	r25, Y+16	; 0x10
    29ba:	fc 01       	movw	r30, r24
    29bc:	84 81       	ldd	r24, Z+4	; 0x04
    29be:	95 81       	ldd	r25, Z+5	; 0x05
    29c0:	29 81       	ldd	r18, Y+1	; 0x01
    29c2:	3a 81       	ldd	r19, Y+2	; 0x02
    29c4:	a9 01       	movw	r20, r18
    29c6:	48 1b       	sub	r20, r24
    29c8:	59 0b       	sbc	r21, r25
    29ca:	ca 01       	movw	r24, r20
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    29d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d2:	98 89       	ldd	r25, Y+16	; 0x10
    29d4:	29 81       	ldd	r18, Y+1	; 0x01
    29d6:	3a 81       	ldd	r19, Y+2	; 0x02
    29d8:	fc 01       	movw	r30, r24
    29da:	31 83       	std	Z+1, r19	; 0x01
    29dc:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    29de:	8f 81       	ldd	r24, Y+7	; 0x07
    29e0:	98 85       	ldd	r25, Y+8	; 0x08
}
    29e2:	66 96       	adiw	r28, 0x16	; 22
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <prvBytesInBuffer+0x6>
    29fa:	1f 92       	push	r1
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	fc 01       	movw	r30, r24
    2a0a:	24 81       	ldd	r18, Z+4	; 0x04
    2a0c:	35 81       	ldd	r19, Z+5	; 0x05
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	9c 81       	ldd	r25, Y+4	; 0x04
    2a12:	fc 01       	movw	r30, r24
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	fc 01       	movw	r30, r24
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	29 81       	ldd	r18, Y+1	; 0x01
    2a2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2e:	a9 01       	movw	r20, r18
    2a30:	48 1b       	sub	r20, r24
    2a32:	59 0b       	sbc	r21, r25
    2a34:	ca 01       	movw	r24, r20
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	fc 01       	movw	r30, r24
    2a40:	24 81       	ldd	r18, Z+4	; 0x04
    2a42:	35 81       	ldd	r19, Z+5	; 0x05
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	82 17       	cp	r24, r18
    2a4a:	93 07       	cpc	r25, r19
    2a4c:	68 f0       	brcs	.+26     	; 0x2a68 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	fc 01       	movw	r30, r24
    2a54:	84 81       	ldd	r24, Z+4	; 0x04
    2a56:	95 81       	ldd	r25, Z+5	; 0x05
    2a58:	29 81       	ldd	r18, Y+1	; 0x01
    2a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5c:	a9 01       	movw	r20, r18
    2a5e:	48 1b       	sub	r20, r24
    2a60:	59 0b       	sbc	r21, r25
    2a62:	ca 01       	movw	r24, r20
    2a64:	9a 83       	std	Y+2, r25	; 0x02
    2a66:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2a7a:	0f 93       	push	r16
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	29 97       	sbiw	r28, 0x09	; 9
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	7c 83       	std	Y+4, r23	; 0x04
    2a96:	6b 83       	std	Y+3, r22	; 0x03
    2a98:	5e 83       	std	Y+6, r21	; 0x06
    2a9a:	4d 83       	std	Y+5, r20	; 0x05
    2a9c:	38 87       	std	Y+8, r19	; 0x08
    2a9e:	2f 83       	std	Y+7, r18	; 0x07
    2aa0:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	40 e1       	ldi	r20, 0x10	; 16
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	0e 94 c8 38 	call	0x7190	; 0x7190 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aba:	fc 01       	movw	r30, r24
    2abc:	35 87       	std	Z+13, r19	; 0x0d
    2abe:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac8:	fc 01       	movw	r30, r24
    2aca:	35 83       	std	Z+5, r19	; 0x05
    2acc:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ad4:	38 85       	ldd	r19, Y+8	; 0x08
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	37 83       	std	Z+7, r19	; 0x07
    2ada:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	29 85       	ldd	r18, Y+9	; 0x09
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	26 87       	std	Z+14, r18	; 0x0e
}
    2ae6:	00 00       	nop
    2ae8:	29 96       	adiw	r28, 0x09	; 9
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <xTaskCreate>:
    2afc:	af 92       	push	r10
    2afe:	bf 92       	push	r11
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	60 97       	sbiw	r28, 0x10	; 16
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	9f 83       	std	Y+7, r25	; 0x07
    2b20:	8e 83       	std	Y+6, r24	; 0x06
    2b22:	79 87       	std	Y+9, r23	; 0x09
    2b24:	68 87       	std	Y+8, r22	; 0x08
    2b26:	5b 87       	std	Y+11, r21	; 0x0b
    2b28:	4a 87       	std	Y+10, r20	; 0x0a
    2b2a:	3d 87       	std	Y+13, r19	; 0x0d
    2b2c:	2c 87       	std	Y+12, r18	; 0x0c
    2b2e:	0e 87       	std	Y+14, r16	; 0x0e
    2b30:	f8 8a       	std	Y+16, r15	; 0x10
    2b32:	ef 86       	std	Y+15, r14	; 0x0f
    2b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b38:	0e 94 b5 03 	call	0x76a	; 0x76a <pvPortMalloc>
    2b3c:	9d 83       	std	Y+5, r25	; 0x05
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
    2b40:	8c 81       	ldd	r24, Y+4	; 0x04
    2b42:	9d 81       	ldd	r25, Y+5	; 0x05
    2b44:	89 2b       	or	r24, r25
    2b46:	b9 f0       	breq	.+46     	; 0x2b76 <xTaskCreate+0x7a>
    2b48:	80 e3       	ldi	r24, 0x30	; 48
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 b5 03 	call	0x76a	; 0x76a <pvPortMalloc>
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	89 2b       	or	r24, r25
    2b5a:	41 f0       	breq	.+16     	; 0x2b6c <xTaskCreate+0x70>
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	2c 81       	ldd	r18, Y+4	; 0x04
    2b62:	3d 81       	ldd	r19, Y+5	; 0x05
    2b64:	fc 01       	movw	r30, r24
    2b66:	34 8f       	std	Z+28, r19	; 0x1c
    2b68:	23 8f       	std	Z+27, r18	; 0x1b
    2b6a:	07 c0       	rjmp	.+14     	; 0x2b7a <xTaskCreate+0x7e>
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b70:	0e 94 b4 04 	call	0x968	; 0x968 <vPortFree>
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <xTaskCreate+0x7e>
    2b76:	1a 82       	std	Y+2, r1	; 0x02
    2b78:	19 82       	std	Y+1, r1	; 0x01
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	89 2b       	or	r24, r25
    2b80:	c1 f0       	breq	.+48     	; 0x2bb2 <xTaskCreate+0xb6>
    2b82:	a9 81       	ldd	r26, Y+1	; 0x01
    2b84:	ba 81       	ldd	r27, Y+2	; 0x02
    2b86:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b88:	f8 89       	ldd	r31, Y+16	; 0x10
    2b8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b8c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b8e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b90:	5b 85       	ldd	r21, Y+11	; 0x0b
    2b92:	68 85       	ldd	r22, Y+8	; 0x08
    2b94:	79 85       	ldd	r23, Y+9	; 0x09
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9a:	a1 2c       	mov	r10, r1
    2b9c:	b1 2c       	mov	r11, r1
    2b9e:	6d 01       	movw	r12, r26
    2ba0:	7f 01       	movw	r14, r30
    2ba2:	0e 85       	ldd	r16, Y+14	; 0x0e
    2ba4:	19 d0       	rcall	.+50     	; 0x2bd8 <prvInitialiseNewTask>
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	03 d1       	rcall	.+518    	; 0x2db2 <prvAddNewTaskToReadyList>
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <xTaskCreate+0xba>
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	60 96       	adiw	r28, 0x10	; 16
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
    2bd2:	bf 90       	pop	r11
    2bd4:	af 90       	pop	r10
    2bd6:	08 95       	ret

00002bd8 <prvInitialiseNewTask>:
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	62 97       	sbiw	r28, 0x12	; 18
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	9d 83       	std	Y+5, r25	; 0x05
    2bfe:	8c 83       	std	Y+4, r24	; 0x04
    2c00:	7f 83       	std	Y+7, r23	; 0x07
    2c02:	6e 83       	std	Y+6, r22	; 0x06
    2c04:	59 87       	std	Y+9, r21	; 0x09
    2c06:	48 87       	std	Y+8, r20	; 0x08
    2c08:	3b 87       	std	Y+11, r19	; 0x0b
    2c0a:	2a 87       	std	Y+10, r18	; 0x0a
    2c0c:	0c 87       	std	Y+12, r16	; 0x0c
    2c0e:	fe 86       	std	Y+14, r15	; 0x0e
    2c10:	ed 86       	std	Y+13, r14	; 0x0d
    2c12:	d8 8a       	std	Y+16, r13	; 0x10
    2c14:	cf 86       	std	Y+15, r12	; 0x0f
    2c16:	ba 8a       	std	Y+18, r11	; 0x12
    2c18:	a9 8a       	std	Y+17, r10	; 0x11
    2c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1c:	98 89       	ldd	r25, Y+16	; 0x10
    2c1e:	fc 01       	movw	r30, r24
    2c20:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c22:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c24:	28 85       	ldd	r18, Y+8	; 0x08
    2c26:	39 85       	ldd	r19, Y+9	; 0x09
    2c28:	a9 01       	movw	r20, r18
    2c2a:	65 ea       	ldi	r22, 0xA5	; 165
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	0e 94 c8 38 	call	0x7190	; 0x7190 <memset>
    2c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c34:	98 89       	ldd	r25, Y+16	; 0x10
    2c36:	fc 01       	movw	r30, r24
    2c38:	23 8d       	ldd	r18, Z+27	; 0x1b
    2c3a:	34 8d       	ldd	r19, Z+28	; 0x1c
    2c3c:	88 85       	ldd	r24, Y+8	; 0x08
    2c3e:	99 85       	ldd	r25, Y+9	; 0x09
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	82 0f       	add	r24, r18
    2c44:	93 1f       	adc	r25, r19
    2c46:	9b 83       	std	Y+3, r25	; 0x03
    2c48:	8a 83       	std	Y+2, r24	; 0x02
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4e:	89 2b       	or	r24, r25
    2c50:	69 f1       	breq	.+90     	; 0x2cac <prvInitialiseNewTask+0xd4>
    2c52:	19 82       	std	Y+1, r1	; 0x01
    2c54:	21 c0       	rjmp	.+66     	; 0x2c98 <prvInitialiseNewTask+0xc0>
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	29 81       	ldd	r18, Y+1	; 0x01
    2c5e:	22 2f       	mov	r18, r18
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4e 81       	ldd	r20, Y+6	; 0x06
    2c64:	5f 81       	ldd	r21, Y+7	; 0x07
    2c66:	24 0f       	add	r18, r20
    2c68:	35 1f       	adc	r19, r21
    2c6a:	f9 01       	movw	r30, r18
    2c6c:	40 81       	ld	r20, Z
    2c6e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c70:	38 89       	ldd	r19, Y+16	; 0x10
    2c72:	82 0f       	add	r24, r18
    2c74:	93 1f       	adc	r25, r19
    2c76:	4d 96       	adiw	r24, 0x1d	; 29
    2c78:	fc 01       	movw	r30, r24
    2c7a:	40 83       	st	Z, r20
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	2e 81       	ldd	r18, Y+6	; 0x06
    2c84:	3f 81       	ldd	r19, Y+7	; 0x07
    2c86:	82 0f       	add	r24, r18
    2c88:	93 1f       	adc	r25, r19
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 23       	and	r24, r24
    2c90:	39 f0       	breq	.+14     	; 0x2ca0 <prvInitialiseNewTask+0xc8>
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	88 30       	cpi	r24, 0x08	; 8
    2c9c:	e0 f2       	brcs	.-72     	; 0x2c56 <prvInitialiseNewTask+0x7e>
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <prvInitialiseNewTask+0xca>
    2ca0:	00 00       	nop
    2ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca4:	98 89       	ldd	r25, Y+16	; 0x10
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	14 a2       	std	Z+36, r1	; 0x24
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <prvInitialiseNewTask+0xdc>
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	98 89       	ldd	r25, Y+16	; 0x10
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	15 8e       	std	Z+29, r1	; 0x1d
    2cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb6:	84 30       	cpi	r24, 0x04	; 4
    2cb8:	10 f0       	brcs	.+4      	; 0x2cbe <prvInitialiseNewTask+0xe6>
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	8c 87       	std	Y+12, r24	; 0x0c
    2cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc0:	98 89       	ldd	r25, Y+16	; 0x10
    2cc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	22 8f       	std	Z+26, r18	; 0x1a
    2cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cca:	98 89       	ldd	r25, Y+16	; 0x10
    2ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cce:	fc 01       	movw	r30, r24
    2cd0:	27 a3       	std	Z+39, r18	; 0x27
    2cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd4:	98 89       	ldd	r25, Y+16	; 0x10
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	10 a6       	std	Z+40, r1	; 0x28
    2cda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cdc:	98 89       	ldd	r25, Y+16	; 0x10
    2cde:	02 96       	adiw	r24, 0x02	; 2
    2ce0:	0e 94 88 06 	call	0xd10	; 0xd10 <vListInitialiseItem>
    2ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce6:	98 89       	ldd	r25, Y+16	; 0x10
    2ce8:	0e 96       	adiw	r24, 0x0e	; 14
    2cea:	0e 94 88 06 	call	0xd10	; 0xd10 <vListInitialiseItem>
    2cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf0:	98 89       	ldd	r25, Y+16	; 0x10
    2cf2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cf4:	38 89       	ldd	r19, Y+16	; 0x10
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	33 87       	std	Z+11, r19	; 0x0b
    2cfa:	22 87       	std	Z+10, r18	; 0x0a
    2cfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 e0       	ldi	r26, 0x00	; 0
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	24 e0       	ldi	r18, 0x04	; 4
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	79 01       	movw	r14, r18
    2d10:	8a 01       	movw	r16, r20
    2d12:	e8 1a       	sub	r14, r24
    2d14:	f9 0a       	sbc	r15, r25
    2d16:	0a 0b       	sbc	r16, r26
    2d18:	1b 0b       	sbc	r17, r27
    2d1a:	d8 01       	movw	r26, r16
    2d1c:	c7 01       	movw	r24, r14
    2d1e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d20:	38 89       	ldd	r19, Y+16	; 0x10
    2d22:	f9 01       	movw	r30, r18
    2d24:	86 87       	std	Z+14, r24	; 0x0e
    2d26:	97 87       	std	Z+15, r25	; 0x0f
    2d28:	a0 8b       	std	Z+16, r26	; 0x10
    2d2a:	b1 8b       	std	Z+17, r27	; 0x11
    2d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2e:	98 89       	ldd	r25, Y+16	; 0x10
    2d30:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d32:	38 89       	ldd	r19, Y+16	; 0x10
    2d34:	fc 01       	movw	r30, r24
    2d36:	37 8b       	std	Z+23, r19	; 0x17
    2d38:	26 8b       	std	Z+22, r18	; 0x16
    2d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3c:	98 89       	ldd	r25, Y+16	; 0x10
    2d3e:	fc 01       	movw	r30, r24
    2d40:	12 a6       	std	Z+42, r1	; 0x2a
    2d42:	11 a6       	std	Z+41, r1	; 0x29
    2d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d46:	98 89       	ldd	r25, Y+16	; 0x10
    2d48:	fc 01       	movw	r30, r24
    2d4a:	13 a6       	std	Z+43, r1	; 0x2b
    2d4c:	14 a6       	std	Z+44, r1	; 0x2c
    2d4e:	15 a6       	std	Z+45, r1	; 0x2d
    2d50:	16 a6       	std	Z+46, r1	; 0x2e
    2d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d54:	98 89       	ldd	r25, Y+16	; 0x10
    2d56:	fc 01       	movw	r30, r24
    2d58:	17 a6       	std	Z+47, r1	; 0x2f
    2d5a:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d5c:	5b 85       	ldd	r21, Y+11	; 0x0b
    2d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d60:	3d 81       	ldd	r19, Y+5	; 0x05
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	b9 01       	movw	r22, r18
    2d68:	0e 94 c7 07 	call	0xf8e	; 0xf8e <pxPortInitialiseStack>
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d70:	98 89       	ldd	r25, Y+16	; 0x10
    2d72:	fc 01       	movw	r30, r24
    2d74:	31 83       	std	Z+1, r19	; 0x01
    2d76:	20 83       	st	Z, r18
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	89 2b       	or	r24, r25
    2d7e:	39 f0       	breq	.+14     	; 0x2d8e <prvInitialiseNewTask+0x1b6>
    2d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d84:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d86:	38 89       	ldd	r19, Y+16	; 0x10
    2d88:	fc 01       	movw	r30, r24
    2d8a:	31 83       	std	Z+1, r19	; 0x01
    2d8c:	20 83       	st	Z, r18
    2d8e:	00 00       	nop
    2d90:	62 96       	adiw	r28, 0x12	; 18
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	ff 90       	pop	r15
    2da6:	ef 90       	pop	r14
    2da8:	df 90       	pop	r13
    2daa:	cf 90       	pop	r12
    2dac:	bf 90       	pop	r11
    2dae:	af 90       	pop	r10
    2db0:	08 95       	ret

00002db2 <prvAddNewTaskToReadyList>:
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	1f 92       	push	r1
    2db8:	1f 92       	push	r1
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	0f 92       	push	r0
    2dc8:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxCurrentNumberOfTasks>
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	80 93 ce 17 	sts	0x17CE, r24	; 0x8017ce <uxCurrentNumberOfTasks>
    2dd2:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    2dd6:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    2dda:	89 2b       	or	r24, r25
    2ddc:	61 f4       	brne	.+24     	; 0x2df6 <prvAddNewTaskToReadyList+0x44>
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <pxCurrentTCB+0x1>
    2de6:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <pxCurrentTCB>
    2dea:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxCurrentNumberOfTasks>
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	c1 f4       	brne	.+48     	; 0x2e22 <prvAddNewTaskToReadyList+0x70>
    2df2:	d8 d5       	rcall	.+2992   	; 0x39a4 <prvInitialiseTaskLists>
    2df4:	16 c0       	rjmp	.+44     	; 0x2e22 <prvAddNewTaskToReadyList+0x70>
    2df6:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xSchedulerRunning>
    2dfa:	88 23       	and	r24, r24
    2dfc:	91 f4       	brne	.+36     	; 0x2e22 <prvAddNewTaskToReadyList+0x70>
    2dfe:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    2e02:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    2e06:	fc 01       	movw	r30, r24
    2e08:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	fc 01       	movw	r30, r24
    2e10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e12:	82 17       	cp	r24, r18
    2e14:	30 f0       	brcs	.+12     	; 0x2e22 <prvAddNewTaskToReadyList+0x70>
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <pxCurrentTCB+0x1>
    2e1e:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <pxCurrentTCB>
    2e22:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxTaskNumber>
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <uxTaskNumber>
    2e2c:	20 91 d8 17 	lds	r18, 0x17D8	; 0x8017d8 <uxTaskNumber>
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	fc 01       	movw	r30, r24
    2e36:	25 a3       	std	Z+37, r18	; 0x25
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e40:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    2e44:	89 17       	cp	r24, r25
    2e46:	30 f4       	brcc	.+12     	; 0x2e54 <prvAddNewTaskToReadyList+0xa2>
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e50:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	ac 01       	movw	r20, r24
    2e5a:	4e 5f       	subi	r20, 0xFE	; 254
    2e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	fc 01       	movw	r30, r24
    2e64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	6b e0       	ldi	r22, 0x0B	; 11
    2e6c:	62 9f       	mul	r22, r18
    2e6e:	c0 01       	movw	r24, r0
    2e70:	63 9f       	mul	r22, r19
    2e72:	90 0d       	add	r25, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	8a 59       	subi	r24, 0x9A	; 154
    2e78:	98 4e       	sbci	r25, 0xE8	; 232
    2e7a:	ba 01       	movw	r22, r20
    2e7c:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xSchedulerRunning>
    2e88:	88 23       	and	r24, r24
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <prvAddNewTaskToReadyList+0xf6>
    2e8c:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    2e90:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    2e94:	fc 01       	movw	r30, r24
    2e96:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ea0:	28 17       	cp	r18, r24
    2ea2:	10 f4       	brcc	.+4      	; 0x2ea8 <prvAddNewTaskToReadyList+0xf6>
    2ea4:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    2ea8:	00 00       	nop
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	08 95       	ret

00002eb4 <vTaskDelayUntil>:
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	60 97       	sbiw	r28, 0x10	; 16
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	9c 87       	std	Y+12, r25	; 0x0c
    2ed2:	8b 87       	std	Y+11, r24	; 0x0b
    2ed4:	4d 87       	std	Y+13, r20	; 0x0d
    2ed6:	5e 87       	std	Y+14, r21	; 0x0e
    2ed8:	6f 87       	std	Y+15, r22	; 0x0f
    2eda:	78 8b       	std	Y+16, r23	; 0x10
    2edc:	19 82       	std	Y+1, r1	; 0x01
    2ede:	20 d1       	rcall	.+576    	; 0x3120 <vTaskSuspendAll>
    2ee0:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    2ee4:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    2ee8:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    2eec:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
    2ef2:	9b 83       	std	Y+3, r25	; 0x03
    2ef4:	ac 83       	std	Y+4, r26	; 0x04
    2ef6:	bd 83       	std	Y+5, r27	; 0x05
    2ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2efa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2efc:	fc 01       	movw	r30, r24
    2efe:	20 81       	ld	r18, Z
    2f00:	31 81       	ldd	r19, Z+1	; 0x01
    2f02:	42 81       	ldd	r20, Z+2	; 0x02
    2f04:	53 81       	ldd	r21, Z+3	; 0x03
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0a:	af 85       	ldd	r26, Y+15	; 0x0f
    2f0c:	b8 89       	ldd	r27, Y+16	; 0x10
    2f0e:	82 0f       	add	r24, r18
    2f10:	93 1f       	adc	r25, r19
    2f12:	a4 1f       	adc	r26, r20
    2f14:	b5 1f       	adc	r27, r21
    2f16:	8e 83       	std	Y+6, r24	; 0x06
    2f18:	9f 83       	std	Y+7, r25	; 0x07
    2f1a:	a8 87       	std	Y+8, r26	; 0x08
    2f1c:	b9 87       	std	Y+9, r27	; 0x09
    2f1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f22:	fc 01       	movw	r30, r24
    2f24:	20 81       	ld	r18, Z
    2f26:	31 81       	ldd	r19, Z+1	; 0x01
    2f28:	42 81       	ldd	r20, Z+2	; 0x02
    2f2a:	53 81       	ldd	r21, Z+3	; 0x03
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f30:	ac 81       	ldd	r26, Y+4	; 0x04
    2f32:	bd 81       	ldd	r27, Y+5	; 0x05
    2f34:	82 17       	cp	r24, r18
    2f36:	93 07       	cpc	r25, r19
    2f38:	a4 07       	cpc	r26, r20
    2f3a:	b5 07       	cpc	r27, r21
    2f3c:	00 f5       	brcc	.+64     	; 0x2f7e <vTaskDelayUntil+0xca>
    2f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f40:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f42:	fc 01       	movw	r30, r24
    2f44:	20 81       	ld	r18, Z
    2f46:	31 81       	ldd	r19, Z+1	; 0x01
    2f48:	42 81       	ldd	r20, Z+2	; 0x02
    2f4a:	53 81       	ldd	r21, Z+3	; 0x03
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	a8 85       	ldd	r26, Y+8	; 0x08
    2f52:	b9 85       	ldd	r27, Y+9	; 0x09
    2f54:	82 17       	cp	r24, r18
    2f56:	93 07       	cpc	r25, r19
    2f58:	a4 07       	cpc	r26, r20
    2f5a:	b5 07       	cpc	r27, r21
    2f5c:	78 f5       	brcc	.+94     	; 0x2fbc <vTaskDelayUntil+0x108>
    2f5e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f60:	3f 81       	ldd	r19, Y+7	; 0x07
    2f62:	48 85       	ldd	r20, Y+8	; 0x08
    2f64:	59 85       	ldd	r21, Y+9	; 0x09
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	ac 81       	ldd	r26, Y+4	; 0x04
    2f6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2f6e:	82 17       	cp	r24, r18
    2f70:	93 07       	cpc	r25, r19
    2f72:	a4 07       	cpc	r26, r20
    2f74:	b5 07       	cpc	r27, r21
    2f76:	10 f5       	brcc	.+68     	; 0x2fbc <vTaskDelayUntil+0x108>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	1f c0       	rjmp	.+62     	; 0x2fbc <vTaskDelayUntil+0x108>
    2f7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f80:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f82:	fc 01       	movw	r30, r24
    2f84:	20 81       	ld	r18, Z
    2f86:	31 81       	ldd	r19, Z+1	; 0x01
    2f88:	42 81       	ldd	r20, Z+2	; 0x02
    2f8a:	53 81       	ldd	r21, Z+3	; 0x03
    2f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f90:	a8 85       	ldd	r26, Y+8	; 0x08
    2f92:	b9 85       	ldd	r27, Y+9	; 0x09
    2f94:	82 17       	cp	r24, r18
    2f96:	93 07       	cpc	r25, r19
    2f98:	a4 07       	cpc	r26, r20
    2f9a:	b5 07       	cpc	r27, r21
    2f9c:	68 f0       	brcs	.+26     	; 0x2fb8 <vTaskDelayUntil+0x104>
    2f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    2fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa2:	48 85       	ldd	r20, Y+8	; 0x08
    2fa4:	59 85       	ldd	r21, Y+9	; 0x09
    2fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    2faa:	ac 81       	ldd	r26, Y+4	; 0x04
    2fac:	bd 81       	ldd	r27, Y+5	; 0x05
    2fae:	82 17       	cp	r24, r18
    2fb0:	93 07       	cpc	r25, r19
    2fb2:	a4 07       	cpc	r26, r20
    2fb4:	b5 07       	cpc	r27, r21
    2fb6:	10 f4       	brcc	.+4      	; 0x2fbc <vTaskDelayUntil+0x108>
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc4:	a8 85       	ldd	r26, Y+8	; 0x08
    2fc6:	b9 85       	ldd	r27, Y+9	; 0x09
    2fc8:	f9 01       	movw	r30, r18
    2fca:	80 83       	st	Z, r24
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	a2 83       	std	Z+2, r26	; 0x02
    2fd0:	b3 83       	std	Z+3, r27	; 0x03
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	88 23       	and	r24, r24
    2fd6:	a9 f0       	breq	.+42     	; 0x3002 <vTaskDelayUntil+0x14e>
    2fd8:	2e 81       	ldd	r18, Y+6	; 0x06
    2fda:	3f 81       	ldd	r19, Y+7	; 0x07
    2fdc:	48 85       	ldd	r20, Y+8	; 0x08
    2fde:	59 85       	ldd	r21, Y+9	; 0x09
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe4:	ac 81       	ldd	r26, Y+4	; 0x04
    2fe6:	bd 81       	ldd	r27, Y+5	; 0x05
    2fe8:	79 01       	movw	r14, r18
    2fea:	8a 01       	movw	r16, r20
    2fec:	e8 1a       	sub	r14, r24
    2fee:	f9 0a       	sbc	r15, r25
    2ff0:	0a 0b       	sbc	r16, r26
    2ff2:	1b 0b       	sbc	r17, r27
    2ff4:	d8 01       	movw	r26, r16
    2ff6:	c7 01       	movw	r24, r14
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
    3002:	9b d0       	rcall	.+310    	; 0x313a <xTaskResumeAll>
    3004:	8a 87       	std	Y+10, r24	; 0x0a
    3006:	8a 85       	ldd	r24, Y+10	; 0x0a
    3008:	88 23       	and	r24, r24
    300a:	11 f4       	brne	.+4      	; 0x3010 <vTaskDelayUntil+0x15c>
    300c:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    3010:	00 00       	nop
    3012:	60 96       	adiw	r28, 0x10	; 16
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	ff 90       	pop	r15
    3028:	ef 90       	pop	r14
    302a:	08 95       	ret

0000302c <vTaskDelay>:
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	00 d0       	rcall	.+0      	; 0x3032 <vTaskDelay+0x6>
    3032:	1f 92       	push	r1
    3034:	1f 92       	push	r1
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	6a 83       	std	Y+2, r22	; 0x02
    303c:	7b 83       	std	Y+3, r23	; 0x03
    303e:	8c 83       	std	Y+4, r24	; 0x04
    3040:	9d 83       	std	Y+5, r25	; 0x05
    3042:	19 82       	std	Y+1, r1	; 0x01
    3044:	8a 81       	ldd	r24, Y+2	; 0x02
    3046:	9b 81       	ldd	r25, Y+3	; 0x03
    3048:	ac 81       	ldd	r26, Y+4	; 0x04
    304a:	bd 81       	ldd	r27, Y+5	; 0x05
    304c:	89 2b       	or	r24, r25
    304e:	8a 2b       	or	r24, r26
    3050:	8b 2b       	or	r24, r27
    3052:	61 f0       	breq	.+24     	; 0x306c <vTaskDelay+0x40>
    3054:	65 d0       	rcall	.+202    	; 0x3120 <vTaskSuspendAll>
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	ac 81       	ldd	r26, Y+4	; 0x04
    305c:	bd 81       	ldd	r27, Y+5	; 0x05
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
    3068:	68 d0       	rcall	.+208    	; 0x313a <xTaskResumeAll>
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	88 23       	and	r24, r24
    3070:	11 f4       	brne	.+4      	; 0x3076 <vTaskDelay+0x4a>
    3072:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    3076:	00 00       	nop
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	08 95       	ret

00003088 <vTaskStartScheduler>:
    3088:	ef 92       	push	r14
    308a:	ff 92       	push	r15
    308c:	0f 93       	push	r16
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	1f 92       	push	r1
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	0f 2e       	mov	r0, r31
    309a:	fd ed       	ldi	r31, 0xDD	; 221
    309c:	ef 2e       	mov	r14, r31
    309e:	f7 e1       	ldi	r31, 0x17	; 23
    30a0:	ff 2e       	mov	r15, r31
    30a2:	f0 2d       	mov	r31, r0
    30a4:	00 e0       	ldi	r16, 0x00	; 0
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 ec       	ldi	r20, 0xC0	; 192
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	60 ec       	ldi	r22, 0xC0	; 192
    30b0:	73 e0       	ldi	r23, 0x03	; 3
    30b2:	8d ec       	ldi	r24, 0xCD	; 205
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	22 dd       	rcall	.-1468   	; 0x2afc <xTaskCreate>
    30b8:	89 83       	std	Y+1, r24	; 0x01
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	19 f4       	brne	.+6      	; 0x30c6 <vTaskStartScheduler+0x3e>
    30c0:	0e 94 b2 21 	call	0x4364	; 0x4364 <xTimerCreateTimerTask>
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	81 30       	cpi	r24, 0x01	; 1
    30ca:	11 f5       	brne	.+68     	; 0x3110 <vTaskStartScheduler+0x88>
    30cc:	f8 94       	cli
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	9f ef       	ldi	r25, 0xFF	; 255
    30d2:	dc 01       	movw	r26, r24
    30d4:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    30d8:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    30dc:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    30e0:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <xSchedulerRunning>
    30ea:	10 92 cf 17 	sts	0x17CF, r1	; 0x8017cf <xTickCount>
    30ee:	10 92 d0 17 	sts	0x17D0, r1	; 0x8017d0 <xTickCount+0x1>
    30f2:	10 92 d1 17 	sts	0x17D1, r1	; 0x8017d1 <xTickCount+0x2>
    30f6:	10 92 d2 17 	sts	0x17D2, r1	; 0x8017d2 <xTickCount+0x3>
    30fa:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    30fe:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3102:	fc 01       	movw	r30, r24
    3104:	81 a5       	ldd	r24, Z+41	; 0x29
    3106:	92 a5       	ldd	r25, Z+42	; 0x2a
    3108:	0e 94 81 03 	call	0x702	; 0x702 <task_switch_in>
    310c:	0e 94 8b 09 	call	0x1316	; 0x1316 <xPortStartScheduler>
    3110:	00 00       	nop
    3112:	0f 90       	pop	r0
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	0f 91       	pop	r16
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	08 95       	ret

00003120 <vTaskSuspendAll>:
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxSchedulerSuspended>
    3132:	00 00       	nop
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	08 95       	ret

0000313a <xTaskResumeAll>:
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	00 d0       	rcall	.+0      	; 0x3140 <xTaskResumeAll+0x6>
    3140:	1f 92       	push	r1
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	1a 82       	std	Y+2, r1	; 0x02
    3148:	19 82       	std	Y+1, r1	; 0x01
    314a:	1b 82       	std	Y+3, r1	; 0x03
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    3156:	81 50       	subi	r24, 0x01	; 1
    3158:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxSchedulerSuspended>
    315c:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    3160:	88 23       	and	r24, r24
    3162:	09 f0       	breq	.+2      	; 0x3166 <xTaskResumeAll+0x2c>
    3164:	72 c0       	rjmp	.+228    	; 0x324a <xTaskResumeAll+0x110>
    3166:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxCurrentNumberOfTasks>
    316a:	88 23       	and	r24, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <xTaskResumeAll+0x36>
    316e:	6d c0       	rjmp	.+218    	; 0x324a <xTaskResumeAll+0x110>
    3170:	46 c0       	rjmp	.+140    	; 0x31fe <xTaskResumeAll+0xc4>
    3172:	80 91 b3 17 	lds	r24, 0x17B3	; 0x8017b3 <xPendingReadyList+0x7>
    3176:	90 91 b4 17 	lds	r25, 0x17B4	; 0x8017b4 <xPendingReadyList+0x8>
    317a:	fc 01       	movw	r30, r24
    317c:	80 85       	ldd	r24, Z+8	; 0x08
    317e:	91 85       	ldd	r25, Z+9	; 0x09
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	0e 96       	adiw	r24, 0x0e	; 14
    318a:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	02 96       	adiw	r24, 0x02	; 2
    3194:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	fc 01       	movw	r30, r24
    319e:	92 8d       	ldd	r25, Z+26	; 0x1a
    31a0:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    31a4:	89 17       	cp	r24, r25
    31a6:	30 f4       	brcc	.+12     	; 0x31b4 <xTaskResumeAll+0x7a>
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	fc 01       	movw	r30, r24
    31ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b0:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	ac 01       	movw	r20, r24
    31ba:	4e 5f       	subi	r20, 0xFE	; 254
    31bc:	5f 4f       	sbci	r21, 0xFF	; 255
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	fc 01       	movw	r30, r24
    31c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	6b e0       	ldi	r22, 0x0B	; 11
    31cc:	62 9f       	mul	r22, r18
    31ce:	c0 01       	movw	r24, r0
    31d0:	63 9f       	mul	r22, r19
    31d2:	90 0d       	add	r25, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	8a 59       	subi	r24, 0x9A	; 154
    31d8:	98 4e       	sbci	r25, 0xE8	; 232
    31da:	ba 01       	movw	r22, r20
    31dc:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	fc 01       	movw	r30, r24
    31e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    31e8:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    31ec:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    31f0:	fc 01       	movw	r30, r24
    31f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f4:	28 17       	cp	r18, r24
    31f6:	18 f0       	brcs	.+6      	; 0x31fe <xTaskResumeAll+0xc4>
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    31fe:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <xPendingReadyList>
    3202:	88 23       	and	r24, r24
    3204:	09 f0       	breq	.+2      	; 0x3208 <xTaskResumeAll+0xce>
    3206:	b5 cf       	rjmp	.-150    	; 0x3172 <xTaskResumeAll+0x38>
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	89 2b       	or	r24, r25
    320e:	09 f0       	breq	.+2      	; 0x3212 <xTaskResumeAll+0xd8>
    3210:	52 d4       	rcall	.+2212   	; 0x3ab6 <prvResetNextTaskUnblockTime>
    3212:	80 91 d5 17 	lds	r24, 0x17D5	; 0x8017d5 <uxPendedTicks>
    3216:	8c 83       	std	Y+4, r24	; 0x04
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	88 23       	and	r24, r24
    321c:	71 f0       	breq	.+28     	; 0x323a <xTaskResumeAll+0x100>
    321e:	43 d0       	rcall	.+134    	; 0x32a6 <xTaskIncrementTick>
    3220:	88 23       	and	r24, r24
    3222:	19 f0       	breq	.+6      	; 0x322a <xTaskResumeAll+0xf0>
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    322a:	8c 81       	ldd	r24, Y+4	; 0x04
    322c:	81 50       	subi	r24, 0x01	; 1
    322e:	8c 83       	std	Y+4, r24	; 0x04
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	88 23       	and	r24, r24
    3234:	a1 f7       	brne	.-24     	; 0x321e <xTaskResumeAll+0xe4>
    3236:	10 92 d5 17 	sts	0x17D5, r1	; 0x8017d5 <uxPendedTicks>
    323a:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <xYieldPending>
    323e:	88 23       	and	r24, r24
    3240:	21 f0       	breq	.+8      	; 0x324a <xTaskResumeAll+0x110>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	8b 83       	std	Y+3, r24	; 0x03
    3246:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	08 95       	ret

0000325e <xTaskGetTickCount>:
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	00 d0       	rcall	.+0      	; 0x3264 <xTaskGetTickCount+0x6>
    3264:	1f 92       	push	r1
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	0f 92       	push	r0
    3270:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    3274:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    3278:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    327c:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	9a 83       	std	Y+2, r25	; 0x02
    3284:	ab 83       	std	Y+3, r26	; 0x03
    3286:	bc 83       	std	Y+4, r27	; 0x04
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	ab 81       	ldd	r26, Y+3	; 0x03
    3292:	bc 81       	ldd	r27, Y+4	; 0x04
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	08 95       	ret

000032a6 <xTaskIncrementTick>:
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	2d 97       	sbiw	r28, 0x0d	; 13
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	19 82       	std	Y+1, r1	; 0x01
    32bc:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    32c0:	88 23       	and	r24, r24
    32c2:	09 f0       	breq	.+2      	; 0x32c6 <xTaskIncrementTick+0x20>
    32c4:	f0 c0       	rjmp	.+480    	; 0x34a6 <xTaskIncrementTick+0x200>
    32c6:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    32ca:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    32ce:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    32d2:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    32d6:	01 96       	adiw	r24, 0x01	; 1
    32d8:	a1 1d       	adc	r26, r1
    32da:	b1 1d       	adc	r27, r1
    32dc:	8a 83       	std	Y+2, r24	; 0x02
    32de:	9b 83       	std	Y+3, r25	; 0x03
    32e0:	ac 83       	std	Y+4, r26	; 0x04
    32e2:	bd 83       	std	Y+5, r27	; 0x05
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	ac 81       	ldd	r26, Y+4	; 0x04
    32ea:	bd 81       	ldd	r27, Y+5	; 0x05
    32ec:	80 93 cf 17 	sts	0x17CF, r24	; 0x8017cf <xTickCount>
    32f0:	90 93 d0 17 	sts	0x17D0, r25	; 0x8017d0 <xTickCount+0x1>
    32f4:	a0 93 d1 17 	sts	0x17D1, r26	; 0x8017d1 <xTickCount+0x2>
    32f8:	b0 93 d2 17 	sts	0x17D2, r27	; 0x8017d2 <xTickCount+0x3>
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3300:	ac 81       	ldd	r26, Y+4	; 0x04
    3302:	bd 81       	ldd	r27, Y+5	; 0x05
    3304:	89 2b       	or	r24, r25
    3306:	8a 2b       	or	r24, r26
    3308:	8b 2b       	or	r24, r27
    330a:	d1 f4       	brne	.+52     	; 0x3340 <xTaskIncrementTick+0x9a>
    330c:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    3310:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    3314:	9f 83       	std	Y+7, r25	; 0x07
    3316:	8e 83       	std	Y+6, r24	; 0x06
    3318:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <pxOverflowDelayedTaskList>
    331c:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <pxOverflowDelayedTaskList+0x1>
    3320:	90 93 a9 17 	sts	0x17A9, r25	; 0x8017a9 <pxDelayedTaskList+0x1>
    3324:	80 93 a8 17 	sts	0x17A8, r24	; 0x8017a8 <pxDelayedTaskList>
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <pxOverflowDelayedTaskList+0x1>
    3330:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <pxOverflowDelayedTaskList>
    3334:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    3338:	8f 5f       	subi	r24, 0xFF	; 255
    333a:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <xNumOfOverflows>
    333e:	bb d3       	rcall	.+1910   	; 0x3ab6 <prvResetNextTaskUnblockTime>
    3340:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <xNextTaskUnblockTime>
    3344:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <xNextTaskUnblockTime+0x1>
    3348:	a0 91 db 17 	lds	r26, 0x17DB	; 0x8017db <xNextTaskUnblockTime+0x2>
    334c:	b0 91 dc 17 	lds	r27, 0x17DC	; 0x8017dc <xNextTaskUnblockTime+0x3>
    3350:	2a 81       	ldd	r18, Y+2	; 0x02
    3352:	3b 81       	ldd	r19, Y+3	; 0x03
    3354:	4c 81       	ldd	r20, Y+4	; 0x04
    3356:	5d 81       	ldd	r21, Y+5	; 0x05
    3358:	28 17       	cp	r18, r24
    335a:	39 07       	cpc	r19, r25
    335c:	4a 07       	cpc	r20, r26
    335e:	5b 07       	cpc	r21, r27
    3360:	08 f4       	brcc	.+2      	; 0x3364 <xTaskIncrementTick+0xbe>
    3362:	8a c0       	rjmp	.+276    	; 0x3478 <xTaskIncrementTick+0x1d2>
    3364:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    3368:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    336c:	fc 01       	movw	r30, r24
    336e:	80 81       	ld	r24, Z
    3370:	88 23       	and	r24, r24
    3372:	61 f4       	brne	.+24     	; 0x338c <xTaskIncrementTick+0xe6>
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	9f ef       	ldi	r25, 0xFF	; 255
    3378:	dc 01       	movw	r26, r24
    337a:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    337e:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    3382:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    3386:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>
    338a:	76 c0       	rjmp	.+236    	; 0x3478 <xTaskIncrementTick+0x1d2>
    338c:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    3390:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    3394:	fc 01       	movw	r30, r24
    3396:	87 81       	ldd	r24, Z+7	; 0x07
    3398:	90 85       	ldd	r25, Z+8	; 0x08
    339a:	fc 01       	movw	r30, r24
    339c:	80 85       	ldd	r24, Z+8	; 0x08
    339e:	91 85       	ldd	r25, Z+9	; 0x09
    33a0:	99 87       	std	Y+9, r25	; 0x09
    33a2:	88 87       	std	Y+8, r24	; 0x08
    33a4:	88 85       	ldd	r24, Y+8	; 0x08
    33a6:	99 85       	ldd	r25, Y+9	; 0x09
    33a8:	fc 01       	movw	r30, r24
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	a4 81       	ldd	r26, Z+4	; 0x04
    33b0:	b5 81       	ldd	r27, Z+5	; 0x05
    33b2:	8a 87       	std	Y+10, r24	; 0x0a
    33b4:	9b 87       	std	Y+11, r25	; 0x0b
    33b6:	ac 87       	std	Y+12, r26	; 0x0c
    33b8:	bd 87       	std	Y+13, r27	; 0x0d
    33ba:	2a 81       	ldd	r18, Y+2	; 0x02
    33bc:	3b 81       	ldd	r19, Y+3	; 0x03
    33be:	4c 81       	ldd	r20, Y+4	; 0x04
    33c0:	5d 81       	ldd	r21, Y+5	; 0x05
    33c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    33c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    33ca:	28 17       	cp	r18, r24
    33cc:	39 07       	cpc	r19, r25
    33ce:	4a 07       	cpc	r20, r26
    33d0:	5b 07       	cpc	r21, r27
    33d2:	68 f4       	brcc	.+26     	; 0x33ee <xTaskIncrementTick+0x148>
    33d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    33d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    33da:	bd 85       	ldd	r27, Y+13	; 0x0d
    33dc:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    33e0:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    33e4:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    33e8:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>
    33ec:	45 c0       	rjmp	.+138    	; 0x3478 <xTaskIncrementTick+0x1d2>
    33ee:	88 85       	ldd	r24, Y+8	; 0x08
    33f0:	99 85       	ldd	r25, Y+9	; 0x09
    33f2:	02 96       	adiw	r24, 0x02	; 2
    33f4:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    33f8:	88 85       	ldd	r24, Y+8	; 0x08
    33fa:	99 85       	ldd	r25, Y+9	; 0x09
    33fc:	fc 01       	movw	r30, r24
    33fe:	80 8d       	ldd	r24, Z+24	; 0x18
    3400:	91 8d       	ldd	r25, Z+25	; 0x19
    3402:	89 2b       	or	r24, r25
    3404:	29 f0       	breq	.+10     	; 0x3410 <xTaskIncrementTick+0x16a>
    3406:	88 85       	ldd	r24, Y+8	; 0x08
    3408:	99 85       	ldd	r25, Y+9	; 0x09
    340a:	0e 96       	adiw	r24, 0x0e	; 14
    340c:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3410:	88 85       	ldd	r24, Y+8	; 0x08
    3412:	99 85       	ldd	r25, Y+9	; 0x09
    3414:	fc 01       	movw	r30, r24
    3416:	92 8d       	ldd	r25, Z+26	; 0x1a
    3418:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    341c:	89 17       	cp	r24, r25
    341e:	30 f4       	brcc	.+12     	; 0x342c <xTaskIncrementTick+0x186>
    3420:	88 85       	ldd	r24, Y+8	; 0x08
    3422:	99 85       	ldd	r25, Y+9	; 0x09
    3424:	fc 01       	movw	r30, r24
    3426:	82 8d       	ldd	r24, Z+26	; 0x1a
    3428:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    342c:	88 85       	ldd	r24, Y+8	; 0x08
    342e:	99 85       	ldd	r25, Y+9	; 0x09
    3430:	ac 01       	movw	r20, r24
    3432:	4e 5f       	subi	r20, 0xFE	; 254
    3434:	5f 4f       	sbci	r21, 0xFF	; 255
    3436:	88 85       	ldd	r24, Y+8	; 0x08
    3438:	99 85       	ldd	r25, Y+9	; 0x09
    343a:	fc 01       	movw	r30, r24
    343c:	82 8d       	ldd	r24, Z+26	; 0x1a
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	6b e0       	ldi	r22, 0x0B	; 11
    3444:	62 9f       	mul	r22, r18
    3446:	c0 01       	movw	r24, r0
    3448:	63 9f       	mul	r22, r19
    344a:	90 0d       	add	r25, r0
    344c:	11 24       	eor	r1, r1
    344e:	8a 59       	subi	r24, 0x9A	; 154
    3450:	98 4e       	sbci	r25, 0xE8	; 232
    3452:	ba 01       	movw	r22, r20
    3454:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    3458:	88 85       	ldd	r24, Y+8	; 0x08
    345a:	99 85       	ldd	r25, Y+9	; 0x09
    345c:	fc 01       	movw	r30, r24
    345e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3460:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3464:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3468:	fc 01       	movw	r30, r24
    346a:	82 8d       	ldd	r24, Z+26	; 0x1a
    346c:	28 17       	cp	r18, r24
    346e:	08 f4       	brcc	.+2      	; 0x3472 <xTaskIncrementTick+0x1cc>
    3470:	79 cf       	rjmp	.-270    	; 0x3364 <xTaskIncrementTick+0xbe>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	89 83       	std	Y+1, r24	; 0x01
    3476:	76 cf       	rjmp	.-276    	; 0x3364 <xTaskIncrementTick+0xbe>
    3478:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    347c:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3480:	fc 01       	movw	r30, r24
    3482:	82 8d       	ldd	r24, Z+26	; 0x1a
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4b e0       	ldi	r20, 0x0B	; 11
    348a:	42 9f       	mul	r20, r18
    348c:	c0 01       	movw	r24, r0
    348e:	43 9f       	mul	r20, r19
    3490:	90 0d       	add	r25, r0
    3492:	11 24       	eor	r1, r1
    3494:	8a 59       	subi	r24, 0x9A	; 154
    3496:	98 4e       	sbci	r25, 0xE8	; 232
    3498:	fc 01       	movw	r30, r24
    349a:	80 81       	ld	r24, Z
    349c:	82 30       	cpi	r24, 0x02	; 2
    349e:	40 f0       	brcs	.+16     	; 0x34b0 <xTaskIncrementTick+0x20a>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	05 c0       	rjmp	.+10     	; 0x34b0 <xTaskIncrementTick+0x20a>
    34a6:	80 91 d5 17 	lds	r24, 0x17D5	; 0x8017d5 <uxPendedTicks>
    34aa:	8f 5f       	subi	r24, 0xFF	; 255
    34ac:	80 93 d5 17 	sts	0x17D5, r24	; 0x8017d5 <uxPendedTicks>
    34b0:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <xYieldPending>
    34b4:	88 23       	and	r24, r24
    34b6:	11 f0       	breq	.+4      	; 0x34bc <xTaskIncrementTick+0x216>
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	2d 96       	adiw	r28, 0x0d	; 13
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	08 95       	ret

000034d0 <vTaskSwitchContext>:
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <vTaskSwitchContext+0x6>
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    34de:	88 23       	and	r24, r24
    34e0:	21 f0       	breq	.+8      	; 0x34ea <vTaskSwitchContext+0x1a>
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    34e8:	8a c0       	rjmp	.+276    	; 0x35fe <vTaskSwitchContext+0x12e>
    34ea:	10 92 d6 17 	sts	0x17D6, r1	; 0x8017d6 <xYieldPending>
    34ee:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    34f2:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    34f6:	fc 01       	movw	r30, r24
    34f8:	81 a5       	ldd	r24, Z+41	; 0x29
    34fa:	92 a5       	ldd	r25, Z+42	; 0x2a
    34fc:	0e 94 a1 03 	call	0x742	; 0x742 <task_switch_out>
    3500:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3504:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3508:	fc 01       	movw	r30, r24
    350a:	20 81       	ld	r18, Z
    350c:	31 81       	ldd	r19, Z+1	; 0x01
    350e:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3512:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3516:	fc 01       	movw	r30, r24
    3518:	83 8d       	ldd	r24, Z+27	; 0x1b
    351a:	94 8d       	ldd	r25, Z+28	; 0x1c
    351c:	82 17       	cp	r24, r18
    351e:	93 07       	cpc	r25, r19
    3520:	70 f0       	brcs	.+28     	; 0x353e <vTaskSwitchContext+0x6e>
    3522:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3526:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    352a:	9c 01       	movw	r18, r24
    352c:	23 5e       	subi	r18, 0xE3	; 227
    352e:	3f 4f       	sbci	r19, 0xFF	; 255
    3530:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3534:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3538:	b9 01       	movw	r22, r18
    353a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <vApplicationStackOverflowHook>
    353e:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	03 c0       	rjmp	.+6      	; 0x354c <vTaskSwitchContext+0x7c>
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	81 50       	subi	r24, 0x01	; 1
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	4b e0       	ldi	r20, 0x0B	; 11
    3554:	42 9f       	mul	r20, r18
    3556:	c0 01       	movw	r24, r0
    3558:	43 9f       	mul	r20, r19
    355a:	90 0d       	add	r25, r0
    355c:	11 24       	eor	r1, r1
    355e:	8a 59       	subi	r24, 0x9A	; 154
    3560:	98 4e       	sbci	r25, 0xE8	; 232
    3562:	fc 01       	movw	r30, r24
    3564:	80 81       	ld	r24, Z
    3566:	88 23       	and	r24, r24
    3568:	71 f3       	breq	.-36     	; 0x3546 <vTaskSwitchContext+0x76>
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	28 2f       	mov	r18, r24
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	4b e0       	ldi	r20, 0x0B	; 11
    3572:	42 9f       	mul	r20, r18
    3574:	c0 01       	movw	r24, r0
    3576:	43 9f       	mul	r20, r19
    3578:	90 0d       	add	r25, r0
    357a:	11 24       	eor	r1, r1
    357c:	8a 59       	subi	r24, 0x9A	; 154
    357e:	98 4e       	sbci	r25, 0xE8	; 232
    3580:	9b 83       	std	Y+3, r25	; 0x03
    3582:	8a 83       	std	Y+2, r24	; 0x02
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	fc 01       	movw	r30, r24
    358a:	81 81       	ldd	r24, Z+1	; 0x01
    358c:	92 81       	ldd	r25, Z+2	; 0x02
    358e:	fc 01       	movw	r30, r24
    3590:	24 81       	ldd	r18, Z+4	; 0x04
    3592:	35 81       	ldd	r19, Z+5	; 0x05
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	fc 01       	movw	r30, r24
    359a:	32 83       	std	Z+2, r19	; 0x02
    359c:	21 83       	std	Z+1, r18	; 0x01
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	9b 81       	ldd	r25, Y+3	; 0x03
    35a2:	fc 01       	movw	r30, r24
    35a4:	21 81       	ldd	r18, Z+1	; 0x01
    35a6:	32 81       	ldd	r19, Z+2	; 0x02
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	9b 81       	ldd	r25, Y+3	; 0x03
    35ac:	03 96       	adiw	r24, 0x03	; 3
    35ae:	28 17       	cp	r18, r24
    35b0:	39 07       	cpc	r19, r25
    35b2:	69 f4       	brne	.+26     	; 0x35ce <vTaskSwitchContext+0xfe>
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
    35b8:	fc 01       	movw	r30, r24
    35ba:	81 81       	ldd	r24, Z+1	; 0x01
    35bc:	92 81       	ldd	r25, Z+2	; 0x02
    35be:	fc 01       	movw	r30, r24
    35c0:	24 81       	ldd	r18, Z+4	; 0x04
    35c2:	35 81       	ldd	r19, Z+5	; 0x05
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	9b 81       	ldd	r25, Y+3	; 0x03
    35c8:	fc 01       	movw	r30, r24
    35ca:	32 83       	std	Z+2, r19	; 0x02
    35cc:	21 83       	std	Z+1, r18	; 0x01
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	9b 81       	ldd	r25, Y+3	; 0x03
    35d2:	fc 01       	movw	r30, r24
    35d4:	81 81       	ldd	r24, Z+1	; 0x01
    35d6:	92 81       	ldd	r25, Z+2	; 0x02
    35d8:	fc 01       	movw	r30, r24
    35da:	80 85       	ldd	r24, Z+8	; 0x08
    35dc:	91 85       	ldd	r25, Z+9	; 0x09
    35de:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <pxCurrentTCB+0x1>
    35e2:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <pxCurrentTCB>
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    35ec:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    35f0:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    35f4:	fc 01       	movw	r30, r24
    35f6:	81 a5       	ldd	r24, Z+41	; 0x29
    35f8:	92 a5       	ldd	r25, Z+42	; 0x2a
    35fa:	0e 94 81 03 	call	0x702	; 0x702 <task_switch_in>
    35fe:	00 00       	nop
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	08 95       	ret

0000360c <vTaskPlaceOnEventList>:
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	00 d0       	rcall	.+0      	; 0x3612 <vTaskPlaceOnEventList+0x6>
    3612:	00 d0       	rcall	.+0      	; 0x3614 <vTaskPlaceOnEventList+0x8>
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	9a 83       	std	Y+2, r25	; 0x02
    361a:	89 83       	std	Y+1, r24	; 0x01
    361c:	4b 83       	std	Y+3, r20	; 0x03
    361e:	5c 83       	std	Y+4, r21	; 0x04
    3620:	6d 83       	std	Y+5, r22	; 0x05
    3622:	7e 83       	std	Y+6, r23	; 0x06
    3624:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3628:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    362c:	9c 01       	movw	r18, r24
    362e:	22 5f       	subi	r18, 0xF2	; 242
    3630:	3f 4f       	sbci	r19, 0xFF	; 255
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	9a 81       	ldd	r25, Y+2	; 0x02
    3636:	b9 01       	movw	r22, r18
    3638:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	ad 81       	ldd	r26, Y+5	; 0x05
    3642:	be 81       	ldd	r27, Y+6	; 0x06
    3644:	41 e0       	ldi	r20, 0x01	; 1
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	e5 d5       	rcall	.+3018   	; 0x4216 <prvAddCurrentTaskToDelayedList>
    364c:	00 00       	nop
    364e:	26 96       	adiw	r28, 0x06	; 6
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <vTaskPlaceOnEventListRestricted>:
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	27 97       	sbiw	r28, 0x07	; 7
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	4b 83       	std	Y+3, r20	; 0x03
    367a:	5c 83       	std	Y+4, r21	; 0x04
    367c:	6d 83       	std	Y+5, r22	; 0x05
    367e:	7e 83       	std	Y+6, r23	; 0x06
    3680:	2f 83       	std	Y+7, r18	; 0x07
    3682:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3686:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    368a:	9c 01       	movw	r18, r24
    368c:	22 5f       	subi	r18, 0xF2	; 242
    368e:	3f 4f       	sbci	r19, 0xFF	; 255
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	b9 01       	movw	r22, r18
    3696:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    369a:	8f 81       	ldd	r24, Y+7	; 0x07
    369c:	88 23       	and	r24, r24
    369e:	39 f0       	breq	.+14     	; 0x36ae <vTaskPlaceOnEventListRestricted+0x4e>
    36a0:	8f ef       	ldi	r24, 0xFF	; 255
    36a2:	9f ef       	ldi	r25, 0xFF	; 255
    36a4:	dc 01       	movw	r26, r24
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	9c 83       	std	Y+4, r25	; 0x04
    36aa:	ad 83       	std	Y+5, r26	; 0x05
    36ac:	be 83       	std	Y+6, r27	; 0x06
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	ad 81       	ldd	r26, Y+5	; 0x05
    36b4:	be 81       	ldd	r27, Y+6	; 0x06
    36b6:	4f 81       	ldd	r20, Y+7	; 0x07
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	ac d5       	rcall	.+2904   	; 0x4216 <prvAddCurrentTaskToDelayedList>
    36be:	00 00       	nop
    36c0:	27 96       	adiw	r28, 0x07	; 7
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	08 95       	ret

000036d2 <xTaskRemoveFromEventList>:
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <xTaskRemoveFromEventList+0x6>
    36d8:	1f 92       	push	r1
    36da:	1f 92       	push	r1
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	9d 83       	std	Y+5, r25	; 0x05
    36e2:	8c 83       	std	Y+4, r24	; 0x04
    36e4:	8c 81       	ldd	r24, Y+4	; 0x04
    36e6:	9d 81       	ldd	r25, Y+5	; 0x05
    36e8:	fc 01       	movw	r30, r24
    36ea:	87 81       	ldd	r24, Z+7	; 0x07
    36ec:	90 85       	ldd	r25, Z+8	; 0x08
    36ee:	fc 01       	movw	r30, r24
    36f0:	80 85       	ldd	r24, Z+8	; 0x08
    36f2:	91 85       	ldd	r25, Z+9	; 0x09
    36f4:	9b 83       	std	Y+3, r25	; 0x03
    36f6:	8a 83       	std	Y+2, r24	; 0x02
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	9b 81       	ldd	r25, Y+3	; 0x03
    36fc:	0e 96       	adiw	r24, 0x0e	; 14
    36fe:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3702:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    3706:	88 23       	and	r24, r24
    3708:	51 f5       	brne	.+84     	; 0x375e <xTaskRemoveFromEventList+0x8c>
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	9b 81       	ldd	r25, Y+3	; 0x03
    370e:	02 96       	adiw	r24, 0x02	; 2
    3710:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	9b 81       	ldd	r25, Y+3	; 0x03
    3718:	fc 01       	movw	r30, r24
    371a:	92 8d       	ldd	r25, Z+26	; 0x1a
    371c:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    3720:	89 17       	cp	r24, r25
    3722:	30 f4       	brcc	.+12     	; 0x3730 <xTaskRemoveFromEventList+0x5e>
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	9b 81       	ldd	r25, Y+3	; 0x03
    3728:	fc 01       	movw	r30, r24
    372a:	82 8d       	ldd	r24, Z+26	; 0x1a
    372c:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	ac 01       	movw	r20, r24
    3736:	4e 5f       	subi	r20, 0xFE	; 254
    3738:	5f 4f       	sbci	r21, 0xFF	; 255
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	fc 01       	movw	r30, r24
    3740:	82 8d       	ldd	r24, Z+26	; 0x1a
    3742:	28 2f       	mov	r18, r24
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	6b e0       	ldi	r22, 0x0B	; 11
    3748:	62 9f       	mul	r22, r18
    374a:	c0 01       	movw	r24, r0
    374c:	63 9f       	mul	r22, r19
    374e:	90 0d       	add	r25, r0
    3750:	11 24       	eor	r1, r1
    3752:	8a 59       	subi	r24, 0x9A	; 154
    3754:	98 4e       	sbci	r25, 0xE8	; 232
    3756:	ba 01       	movw	r22, r20
    3758:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    375c:	08 c0       	rjmp	.+16     	; 0x376e <xTaskRemoveFromEventList+0x9c>
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	9b 81       	ldd	r25, Y+3	; 0x03
    3762:	0e 96       	adiw	r24, 0x0e	; 14
    3764:	bc 01       	movw	r22, r24
    3766:	8c ea       	ldi	r24, 0xAC	; 172
    3768:	97 e1       	ldi	r25, 0x17	; 23
    376a:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	fc 01       	movw	r30, r24
    3774:	22 8d       	ldd	r18, Z+26	; 0x1a
    3776:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    377a:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    377e:	fc 01       	movw	r30, r24
    3780:	82 8d       	ldd	r24, Z+26	; 0x1a
    3782:	82 17       	cp	r24, r18
    3784:	30 f4       	brcc	.+12     	; 0x3792 <xTaskRemoveFromEventList+0xc0>
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	89 83       	std	Y+1, r24	; 0x01
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <xTaskRemoveFromEventList+0xc2>
    3792:	19 82       	std	Y+1, r1	; 0x01
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	08 95       	ret

000037a6 <vTaskSetTimeOutState>:
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	1f 92       	push	r1
    37ac:	1f 92       	push	r1
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	0f 92       	push	r0
    37bc:	20 91 d7 17 	lds	r18, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	fc 01       	movw	r30, r24
    37c6:	20 83       	st	Z, r18
    37c8:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    37cc:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    37d0:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    37d4:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    37d8:	29 81       	ldd	r18, Y+1	; 0x01
    37da:	3a 81       	ldd	r19, Y+2	; 0x02
    37dc:	f9 01       	movw	r30, r18
    37de:	81 83       	std	Z+1, r24	; 0x01
    37e0:	92 83       	std	Z+2, r25	; 0x02
    37e2:	a3 83       	std	Z+3, r26	; 0x03
    37e4:	b4 83       	std	Z+4, r27	; 0x04
    37e6:	0f 90       	pop	r0
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	00 00       	nop
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	08 95       	ret

000037f6 <vTaskInternalSetTimeOutState>:
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	1f 92       	push	r1
    37fc:	1f 92       	push	r1
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	20 91 d7 17 	lds	r18, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	fc 01       	movw	r30, r24
    3810:	20 83       	st	Z, r18
    3812:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    3816:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    381a:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    381e:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    3822:	29 81       	ldd	r18, Y+1	; 0x01
    3824:	3a 81       	ldd	r19, Y+2	; 0x02
    3826:	f9 01       	movw	r30, r18
    3828:	81 83       	std	Z+1, r24	; 0x01
    382a:	92 83       	std	Z+2, r25	; 0x02
    382c:	a3 83       	std	Z+3, r26	; 0x03
    382e:	b4 83       	std	Z+4, r27	; 0x04
    3830:	00 00       	nop
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <xTaskCheckForTimeOut>:
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	2d 97       	sbiw	r28, 0x0d	; 13
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
    3858:	9b 87       	std	Y+11, r25	; 0x0b
    385a:	8a 87       	std	Y+10, r24	; 0x0a
    385c:	7d 87       	std	Y+13, r23	; 0x0d
    385e:	6c 87       	std	Y+12, r22	; 0x0c
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	0f 92       	push	r0
    3866:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    386a:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    386e:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    3872:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    3876:	8a 83       	std	Y+2, r24	; 0x02
    3878:	9b 83       	std	Y+3, r25	; 0x03
    387a:	ac 83       	std	Y+4, r26	; 0x04
    387c:	bd 83       	std	Y+5, r27	; 0x05
    387e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3880:	9b 85       	ldd	r25, Y+11	; 0x0b
    3882:	fc 01       	movw	r30, r24
    3884:	81 81       	ldd	r24, Z+1	; 0x01
    3886:	92 81       	ldd	r25, Z+2	; 0x02
    3888:	a3 81       	ldd	r26, Z+3	; 0x03
    388a:	b4 81       	ldd	r27, Z+4	; 0x04
    388c:	2a 81       	ldd	r18, Y+2	; 0x02
    388e:	3b 81       	ldd	r19, Y+3	; 0x03
    3890:	4c 81       	ldd	r20, Y+4	; 0x04
    3892:	5d 81       	ldd	r21, Y+5	; 0x05
    3894:	79 01       	movw	r14, r18
    3896:	8a 01       	movw	r16, r20
    3898:	e8 1a       	sub	r14, r24
    389a:	f9 0a       	sbc	r15, r25
    389c:	0a 0b       	sbc	r16, r26
    389e:	1b 0b       	sbc	r17, r27
    38a0:	d8 01       	movw	r26, r16
    38a2:	c7 01       	movw	r24, r14
    38a4:	8e 83       	std	Y+6, r24	; 0x06
    38a6:	9f 83       	std	Y+7, r25	; 0x07
    38a8:	a8 87       	std	Y+8, r26	; 0x08
    38aa:	b9 87       	std	Y+9, r27	; 0x09
    38ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    38b0:	fc 01       	movw	r30, r24
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	a2 81       	ldd	r26, Z+2	; 0x02
    38b8:	b3 81       	ldd	r27, Z+3	; 0x03
    38ba:	8f 3f       	cpi	r24, 0xFF	; 255
    38bc:	9f 4f       	sbci	r25, 0xFF	; 255
    38be:	af 4f       	sbci	r26, 0xFF	; 255
    38c0:	bf 4f       	sbci	r27, 0xFF	; 255
    38c2:	11 f4       	brne	.+4      	; 0x38c8 <xTaskCheckForTimeOut+0x8c>
    38c4:	19 82       	std	Y+1, r1	; 0x01
    38c6:	53 c0       	rjmp	.+166    	; 0x396e <xTaskCheckForTimeOut+0x132>
    38c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    38cc:	fc 01       	movw	r30, r24
    38ce:	90 81       	ld	r25, Z
    38d0:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    38d4:	98 17       	cp	r25, r24
    38d6:	99 f0       	breq	.+38     	; 0x38fe <xTaskCheckForTimeOut+0xc2>
    38d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38da:	9b 85       	ldd	r25, Y+11	; 0x0b
    38dc:	fc 01       	movw	r30, r24
    38de:	21 81       	ldd	r18, Z+1	; 0x01
    38e0:	32 81       	ldd	r19, Z+2	; 0x02
    38e2:	43 81       	ldd	r20, Z+3	; 0x03
    38e4:	54 81       	ldd	r21, Z+4	; 0x04
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
    38e8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ea:	ac 81       	ldd	r26, Y+4	; 0x04
    38ec:	bd 81       	ldd	r27, Y+5	; 0x05
    38ee:	82 17       	cp	r24, r18
    38f0:	93 07       	cpc	r25, r19
    38f2:	a4 07       	cpc	r26, r20
    38f4:	b5 07       	cpc	r27, r21
    38f6:	18 f0       	brcs	.+6      	; 0x38fe <xTaskCheckForTimeOut+0xc2>
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	38 c0       	rjmp	.+112    	; 0x396e <xTaskCheckForTimeOut+0x132>
    38fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3900:	9d 85       	ldd	r25, Y+13	; 0x0d
    3902:	fc 01       	movw	r30, r24
    3904:	20 81       	ld	r18, Z
    3906:	31 81       	ldd	r19, Z+1	; 0x01
    3908:	42 81       	ldd	r20, Z+2	; 0x02
    390a:	53 81       	ldd	r21, Z+3	; 0x03
    390c:	8e 81       	ldd	r24, Y+6	; 0x06
    390e:	9f 81       	ldd	r25, Y+7	; 0x07
    3910:	a8 85       	ldd	r26, Y+8	; 0x08
    3912:	b9 85       	ldd	r27, Y+9	; 0x09
    3914:	82 17       	cp	r24, r18
    3916:	93 07       	cpc	r25, r19
    3918:	a4 07       	cpc	r26, r20
    391a:	b5 07       	cpc	r27, r21
    391c:	f8 f4       	brcc	.+62     	; 0x395c <xTaskCheckForTimeOut+0x120>
    391e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3920:	9d 85       	ldd	r25, Y+13	; 0x0d
    3922:	fc 01       	movw	r30, r24
    3924:	20 81       	ld	r18, Z
    3926:	31 81       	ldd	r19, Z+1	; 0x01
    3928:	42 81       	ldd	r20, Z+2	; 0x02
    392a:	53 81       	ldd	r21, Z+3	; 0x03
    392c:	8e 81       	ldd	r24, Y+6	; 0x06
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	a8 85       	ldd	r26, Y+8	; 0x08
    3932:	b9 85       	ldd	r27, Y+9	; 0x09
    3934:	79 01       	movw	r14, r18
    3936:	8a 01       	movw	r16, r20
    3938:	e8 1a       	sub	r14, r24
    393a:	f9 0a       	sbc	r15, r25
    393c:	0a 0b       	sbc	r16, r26
    393e:	1b 0b       	sbc	r17, r27
    3940:	d8 01       	movw	r26, r16
    3942:	c7 01       	movw	r24, r14
    3944:	2c 85       	ldd	r18, Y+12	; 0x0c
    3946:	3d 85       	ldd	r19, Y+13	; 0x0d
    3948:	f9 01       	movw	r30, r18
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
    3952:	8a 85       	ldd	r24, Y+10	; 0x0a
    3954:	9b 85       	ldd	r25, Y+11	; 0x0b
    3956:	4f df       	rcall	.-354    	; 0x37f6 <vTaskInternalSetTimeOutState>
    3958:	19 82       	std	Y+1, r1	; 0x01
    395a:	09 c0       	rjmp	.+18     	; 0x396e <xTaskCheckForTimeOut+0x132>
    395c:	8c 85       	ldd	r24, Y+12	; 0x0c
    395e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3960:	fc 01       	movw	r30, r24
    3962:	10 82       	st	Z, r1
    3964:	11 82       	std	Z+1, r1	; 0x01
    3966:	12 82       	std	Z+2, r1	; 0x02
    3968:	13 82       	std	Z+3, r1	; 0x03
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	0f 90       	pop	r0
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	2d 96       	adiw	r28, 0x0d	; 13
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	ff 90       	pop	r15
    398a:	ef 90       	pop	r14
    398c:	08 95       	ret

0000398e <vTaskMissedYield>:
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    399c:	00 00       	nop
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	08 95       	ret

000039a4 <prvInitialiseTaskLists>:
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	1f 92       	push	r1
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	19 82       	std	Y+1, r1	; 0x01
    39b0:	10 c0       	rjmp	.+32     	; 0x39d2 <prvInitialiseTaskLists+0x2e>
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	28 2f       	mov	r18, r24
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	4b e0       	ldi	r20, 0x0B	; 11
    39ba:	42 9f       	mul	r20, r18
    39bc:	c0 01       	movw	r24, r0
    39be:	43 9f       	mul	r20, r19
    39c0:	90 0d       	add	r25, r0
    39c2:	11 24       	eor	r1, r1
    39c4:	8a 59       	subi	r24, 0x9A	; 154
    39c6:	98 4e       	sbci	r25, 0xE8	; 232
    39c8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	8f 5f       	subi	r24, 0xFF	; 255
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	84 30       	cpi	r24, 0x04	; 4
    39d6:	68 f3       	brcs	.-38     	; 0x39b2 <prvInitialiseTaskLists+0xe>
    39d8:	82 e9       	ldi	r24, 0x92	; 146
    39da:	97 e1       	ldi	r25, 0x17	; 23
    39dc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    39e0:	8d e9       	ldi	r24, 0x9D	; 157
    39e2:	97 e1       	ldi	r25, 0x17	; 23
    39e4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    39e8:	8c ea       	ldi	r24, 0xAC	; 172
    39ea:	97 e1       	ldi	r25, 0x17	; 23
    39ec:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    39f0:	87 eb       	ldi	r24, 0xB7	; 183
    39f2:	97 e1       	ldi	r25, 0x17	; 23
    39f4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    39f8:	83 ec       	ldi	r24, 0xC3	; 195
    39fa:	97 e1       	ldi	r25, 0x17	; 23
    39fc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    3a00:	82 e9       	ldi	r24, 0x92	; 146
    3a02:	97 e1       	ldi	r25, 0x17	; 23
    3a04:	90 93 a9 17 	sts	0x17A9, r25	; 0x8017a9 <pxDelayedTaskList+0x1>
    3a08:	80 93 a8 17 	sts	0x17A8, r24	; 0x8017a8 <pxDelayedTaskList>
    3a0c:	8d e9       	ldi	r24, 0x9D	; 157
    3a0e:	97 e1       	ldi	r25, 0x17	; 23
    3a10:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <pxOverflowDelayedTaskList+0x1>
    3a14:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <pxOverflowDelayedTaskList>
    3a18:	00 00       	nop
    3a1a:	0f 90       	pop	r0
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <prvCheckTasksWaitingTermination>:
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	1f 92       	push	r1
    3a28:	1f 92       	push	r1
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	20 c0       	rjmp	.+64     	; 0x3a70 <prvCheckTasksWaitingTermination+0x4e>
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	0f 92       	push	r0
    3a36:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <xTasksWaitingTermination+0x7>
    3a3a:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <xTasksWaitingTermination+0x8>
    3a3e:	fc 01       	movw	r30, r24
    3a40:	80 85       	ldd	r24, Z+8	; 0x08
    3a42:	91 85       	ldd	r25, Z+9	; 0x09
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	02 96       	adiw	r24, 0x02	; 2
    3a4e:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3a52:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxCurrentNumberOfTasks>
    3a56:	81 50       	subi	r24, 0x01	; 1
    3a58:	80 93 ce 17 	sts	0x17CE, r24	; 0x8017ce <uxCurrentNumberOfTasks>
    3a5c:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <uxDeletedTasksWaitingCleanUp>
    3a60:	81 50       	subi	r24, 0x01	; 1
    3a62:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <uxDeletedTasksWaitingCleanUp>
    3a66:	0f 90       	pop	r0
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	0a d0       	rcall	.+20     	; 0x3a84 <prvDeleteTCB>
    3a70:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <uxDeletedTasksWaitingCleanUp>
    3a74:	88 23       	and	r24, r24
    3a76:	e1 f6       	brne	.-72     	; 0x3a30 <prvCheckTasksWaitingTermination+0xe>
    3a78:	00 00       	nop
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	08 95       	ret

00003a84 <prvDeleteTCB>:
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	1f 92       	push	r1
    3a8a:	1f 92       	push	r1
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	fc 01       	movw	r30, r24
    3a9a:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a9c:	94 8d       	ldd	r25, Z+28	; 0x1c
    3a9e:	0e 94 b4 04 	call	0x968	; 0x968 <vPortFree>
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	0e 94 b4 04 	call	0x968	; 0x968 <vPortFree>
    3aaa:	00 00       	nop
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	08 95       	ret

00003ab6 <prvResetNextTaskUnblockTime>:
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	1f 92       	push	r1
    3abc:	1f 92       	push	r1
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    3ac6:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    3aca:	fc 01       	movw	r30, r24
    3acc:	80 81       	ld	r24, Z
    3ace:	88 23       	and	r24, r24
    3ad0:	61 f4       	brne	.+24     	; 0x3aea <prvResetNextTaskUnblockTime+0x34>
    3ad2:	8f ef       	ldi	r24, 0xFF	; 255
    3ad4:	9f ef       	ldi	r25, 0xFF	; 255
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    3adc:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    3ae0:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    3ae4:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>
    3ae8:	1b c0       	rjmp	.+54     	; 0x3b20 <prvResetNextTaskUnblockTime+0x6a>
    3aea:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    3aee:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    3af2:	fc 01       	movw	r30, r24
    3af4:	87 81       	ldd	r24, Z+7	; 0x07
    3af6:	90 85       	ldd	r25, Z+8	; 0x08
    3af8:	fc 01       	movw	r30, r24
    3afa:	80 85       	ldd	r24, Z+8	; 0x08
    3afc:	91 85       	ldd	r25, Z+9	; 0x09
    3afe:	9a 83       	std	Y+2, r25	; 0x02
    3b00:	89 83       	std	Y+1, r24	; 0x01
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	9a 81       	ldd	r25, Y+2	; 0x02
    3b06:	fc 01       	movw	r30, r24
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	a4 81       	ldd	r26, Z+4	; 0x04
    3b0e:	b5 81       	ldd	r27, Z+5	; 0x05
    3b10:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    3b14:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    3b18:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    3b1c:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>
    3b20:	00 00       	nop
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret

00003b2c <xTaskGetCurrentTaskHandle>:
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	1f 92       	push	r1
    3b32:	1f 92       	push	r1
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3b3c:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	9a 81       	ldd	r25, Y+2	; 0x02
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	08 95       	ret

00003b52 <xTaskGetSchedulerState>:
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	1f 92       	push	r1
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xSchedulerRunning>
    3b60:	88 23       	and	r24, r24
    3b62:	19 f4       	brne	.+6      	; 0x3b6a <xTaskGetSchedulerState+0x18>
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	08 c0       	rjmp	.+16     	; 0x3b7a <xTaskGetSchedulerState+0x28>
    3b6a:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    3b6e:	88 23       	and	r24, r24
    3b70:	19 f4       	brne	.+6      	; 0x3b78 <xTaskGetSchedulerState+0x26>
    3b72:	82 e0       	ldi	r24, 0x02	; 2
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	01 c0       	rjmp	.+2      	; 0x3b7a <xTaskGetSchedulerState+0x28>
    3b78:	19 82       	std	Y+1, r1	; 0x01
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	0f 90       	pop	r0
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	08 95       	ret

00003b84 <xTaskPriorityDisinherit>:
    3b84:	ef 92       	push	r14
    3b86:	ff 92       	push	r15
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <xTaskPriorityDisinherit+0xe>
    3b92:	1f 92       	push	r1
    3b94:	1f 92       	push	r1
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9d 83       	std	Y+5, r25	; 0x05
    3b9c:	8c 83       	std	Y+4, r24	; 0x04
    3b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba2:	9b 83       	std	Y+3, r25	; 0x03
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
    3ba6:	19 82       	std	Y+1, r1	; 0x01
    3ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    3baa:	9d 81       	ldd	r25, Y+5	; 0x05
    3bac:	89 2b       	or	r24, r25
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <xTaskPriorityDisinherit+0x2e>
    3bb0:	6a c0       	rjmp	.+212    	; 0x3c86 <xTaskPriorityDisinherit+0x102>
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	80 a5       	ldd	r24, Z+40	; 0x28
    3bba:	2f ef       	ldi	r18, 0xFF	; 255
    3bbc:	28 0f       	add	r18, r24
    3bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	20 a7       	std	Z+40, r18	; 0x28
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bca:	fc 01       	movw	r30, r24
    3bcc:	22 8d       	ldd	r18, Z+26	; 0x1a
    3bce:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	87 a1       	ldd	r24, Z+39	; 0x27
    3bd6:	28 17       	cp	r18, r24
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <xTaskPriorityDisinherit+0x58>
    3bda:	55 c0       	rjmp	.+170    	; 0x3c86 <xTaskPriorityDisinherit+0x102>
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	9b 81       	ldd	r25, Y+3	; 0x03
    3be0:	fc 01       	movw	r30, r24
    3be2:	80 a5       	ldd	r24, Z+40	; 0x28
    3be4:	88 23       	and	r24, r24
    3be6:	09 f0       	breq	.+2      	; 0x3bea <xTaskPriorityDisinherit+0x66>
    3be8:	4e c0       	rjmp	.+156    	; 0x3c86 <xTaskPriorityDisinherit+0x102>
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	9b 81       	ldd	r25, Y+3	; 0x03
    3bee:	02 96       	adiw	r24, 0x02	; 2
    3bf0:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	27 a1       	ldd	r18, Z+39	; 0x27
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3c00:	fc 01       	movw	r30, r24
    3c02:	22 8f       	std	Z+26, r18	; 0x1a
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	fc 01       	movw	r30, r24
    3c0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	a0 e0       	ldi	r26, 0x00	; 0
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	24 e0       	ldi	r18, 0x04	; 4
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e0       	ldi	r20, 0x00	; 0
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	79 01       	movw	r14, r18
    3c1e:	8a 01       	movw	r16, r20
    3c20:	e8 1a       	sub	r14, r24
    3c22:	f9 0a       	sbc	r15, r25
    3c24:	0a 0b       	sbc	r16, r26
    3c26:	1b 0b       	sbc	r17, r27
    3c28:	d8 01       	movw	r26, r16
    3c2a:	c7 01       	movw	r24, r14
    3c2c:	2a 81       	ldd	r18, Y+2	; 0x02
    3c2e:	3b 81       	ldd	r19, Y+3	; 0x03
    3c30:	f9 01       	movw	r30, r18
    3c32:	86 87       	std	Z+14, r24	; 0x0e
    3c34:	97 87       	std	Z+15, r25	; 0x0f
    3c36:	a0 8b       	std	Z+16, r26	; 0x10
    3c38:	b1 8b       	std	Z+17, r27	; 0x11
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c3e:	fc 01       	movw	r30, r24
    3c40:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c42:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    3c46:	89 17       	cp	r24, r25
    3c48:	30 f4       	brcc	.+12     	; 0x3c56 <xTaskPriorityDisinherit+0xd2>
    3c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4e:	fc 01       	movw	r30, r24
    3c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c52:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	4e 5f       	subi	r20, 0xFE	; 254
    3c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	9b 81       	ldd	r25, Y+3	; 0x03
    3c64:	fc 01       	movw	r30, r24
    3c66:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c68:	28 2f       	mov	r18, r24
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	6b e0       	ldi	r22, 0x0B	; 11
    3c6e:	62 9f       	mul	r22, r18
    3c70:	c0 01       	movw	r24, r0
    3c72:	63 9f       	mul	r22, r19
    3c74:	90 0d       	add	r25, r0
    3c76:	11 24       	eor	r1, r1
    3c78:	8a 59       	subi	r24, 0x9A	; 154
    3c7a:	98 4e       	sbci	r25, 0xE8	; 232
    3c7c:	ba 01       	movw	r22, r20
    3c7e:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	89 83       	std	Y+1, r24	; 0x01
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	08 95       	ret

00003ca0 <xTaskNotifyWait>:
    3ca0:	cf 92       	push	r12
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	2f 97       	sbiw	r28, 0x0f	; 15
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	6a 83       	std	Y+2, r22	; 0x02
    3cc2:	7b 83       	std	Y+3, r23	; 0x03
    3cc4:	8c 83       	std	Y+4, r24	; 0x04
    3cc6:	9d 83       	std	Y+5, r25	; 0x05
    3cc8:	2e 83       	std	Y+6, r18	; 0x06
    3cca:	3f 83       	std	Y+7, r19	; 0x07
    3ccc:	48 87       	std	Y+8, r20	; 0x08
    3cce:	59 87       	std	Y+9, r21	; 0x09
    3cd0:	1b 87       	std	Y+11, r17	; 0x0b
    3cd2:	0a 87       	std	Y+10, r16	; 0x0a
    3cd4:	cc 86       	std	Y+12, r12	; 0x0c
    3cd6:	dd 86       	std	Y+13, r13	; 0x0d
    3cd8:	ee 86       	std	Y+14, r14	; 0x0e
    3cda:	ff 86       	std	Y+15, r15	; 0x0f
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	0f 92       	push	r0
    3ce2:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3ce6:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3cea:	fc 01       	movw	r30, r24
    3cec:	87 a5       	ldd	r24, Z+47	; 0x2f
    3cee:	82 30       	cpi	r24, 0x02	; 2
    3cf0:	99 f1       	breq	.+102    	; 0x3d58 <xTaskNotifyWait+0xb8>
    3cf2:	60 91 64 17 	lds	r22, 0x1764	; 0x801764 <pxCurrentTCB>
    3cf6:	70 91 65 17 	lds	r23, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	23 a5       	ldd	r18, Z+43	; 0x2b
    3cfe:	34 a5       	ldd	r19, Z+44	; 0x2c
    3d00:	45 a5       	ldd	r20, Z+45	; 0x2d
    3d02:	56 a5       	ldd	r21, Z+46	; 0x2e
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	ac 81       	ldd	r26, Y+4	; 0x04
    3d0a:	bd 81       	ldd	r27, Y+5	; 0x05
    3d0c:	80 95       	com	r24
    3d0e:	90 95       	com	r25
    3d10:	a0 95       	com	r26
    3d12:	b0 95       	com	r27
    3d14:	82 23       	and	r24, r18
    3d16:	93 23       	and	r25, r19
    3d18:	a4 23       	and	r26, r20
    3d1a:	b5 23       	and	r27, r21
    3d1c:	fb 01       	movw	r30, r22
    3d1e:	83 a7       	std	Z+43, r24	; 0x2b
    3d20:	94 a7       	std	Z+44, r25	; 0x2c
    3d22:	a5 a7       	std	Z+45, r26	; 0x2d
    3d24:	b6 a7       	std	Z+46, r27	; 0x2e
    3d26:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3d2a:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3d2e:	21 e0       	ldi	r18, 0x01	; 1
    3d30:	fc 01       	movw	r30, r24
    3d32:	27 a7       	std	Z+47, r18	; 0x2f
    3d34:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d36:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d38:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d3a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d3c:	89 2b       	or	r24, r25
    3d3e:	8a 2b       	or	r24, r26
    3d40:	8b 2b       	or	r24, r27
    3d42:	51 f0       	breq	.+20     	; 0x3d58 <xTaskNotifyWait+0xb8>
    3d44:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d46:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d48:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d4a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d4c:	41 e0       	ldi	r20, 0x01	; 1
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	61 d2       	rcall	.+1218   	; 0x4216 <prvAddCurrentTaskToDelayedList>
    3d54:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    3d58:	0f 90       	pop	r0
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	0f 92       	push	r0
    3d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d66:	89 2b       	or	r24, r25
    3d68:	81 f0       	breq	.+32     	; 0x3d8a <xTaskNotifyWait+0xea>
    3d6a:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3d6e:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3d72:	fc 01       	movw	r30, r24
    3d74:	83 a5       	ldd	r24, Z+43	; 0x2b
    3d76:	94 a5       	ldd	r25, Z+44	; 0x2c
    3d78:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3d7a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3d7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3d80:	f9 01       	movw	r30, r18
    3d82:	80 83       	st	Z, r24
    3d84:	91 83       	std	Z+1, r25	; 0x01
    3d86:	a2 83       	std	Z+2, r26	; 0x02
    3d88:	b3 83       	std	Z+3, r27	; 0x03
    3d8a:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3d8e:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3d92:	fc 01       	movw	r30, r24
    3d94:	87 a5       	ldd	r24, Z+47	; 0x2f
    3d96:	82 30       	cpi	r24, 0x02	; 2
    3d98:	11 f0       	breq	.+4      	; 0x3d9e <xTaskNotifyWait+0xfe>
    3d9a:	19 82       	std	Y+1, r1	; 0x01
    3d9c:	1c c0       	rjmp	.+56     	; 0x3dd6 <xTaskNotifyWait+0x136>
    3d9e:	60 91 64 17 	lds	r22, 0x1764	; 0x801764 <pxCurrentTCB>
    3da2:	70 91 65 17 	lds	r23, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3da6:	fb 01       	movw	r30, r22
    3da8:	23 a5       	ldd	r18, Z+43	; 0x2b
    3daa:	34 a5       	ldd	r19, Z+44	; 0x2c
    3dac:	45 a5       	ldd	r20, Z+45	; 0x2d
    3dae:	56 a5       	ldd	r21, Z+46	; 0x2e
    3db0:	8e 81       	ldd	r24, Y+6	; 0x06
    3db2:	9f 81       	ldd	r25, Y+7	; 0x07
    3db4:	a8 85       	ldd	r26, Y+8	; 0x08
    3db6:	b9 85       	ldd	r27, Y+9	; 0x09
    3db8:	80 95       	com	r24
    3dba:	90 95       	com	r25
    3dbc:	a0 95       	com	r26
    3dbe:	b0 95       	com	r27
    3dc0:	82 23       	and	r24, r18
    3dc2:	93 23       	and	r25, r19
    3dc4:	a4 23       	and	r26, r20
    3dc6:	b5 23       	and	r27, r21
    3dc8:	fb 01       	movw	r30, r22
    3dca:	83 a7       	std	Z+43, r24	; 0x2b
    3dcc:	94 a7       	std	Z+44, r25	; 0x2c
    3dce:	a5 a7       	std	Z+45, r26	; 0x2d
    3dd0:	b6 a7       	std	Z+46, r27	; 0x2e
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    3dd6:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3dda:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3dde:	fc 01       	movw	r30, r24
    3de0:	17 a6       	std	Z+47, r1	; 0x2f
    3de2:	0f 90       	pop	r0
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	2f 96       	adiw	r28, 0x0f	; 15
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	df 90       	pop	r13
    3e02:	cf 90       	pop	r12
    3e04:	08 95       	ret

00003e06 <xTaskGenericNotify>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	2d 97       	sbiw	r28, 0x0d	; 13
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	de bf       	out	0x3e, r29	; 62
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	cd bf       	out	0x3d, r28	; 61
    3e1e:	9e 83       	std	Y+6, r25	; 0x06
    3e20:	8d 83       	std	Y+5, r24	; 0x05
    3e22:	4f 83       	std	Y+7, r20	; 0x07
    3e24:	58 87       	std	Y+8, r21	; 0x08
    3e26:	69 87       	std	Y+9, r22	; 0x09
    3e28:	7a 87       	std	Y+10, r23	; 0x0a
    3e2a:	2b 87       	std	Y+11, r18	; 0x0b
    3e2c:	1d 87       	std	Y+13, r17	; 0x0d
    3e2e:	0c 87       	std	Y+12, r16	; 0x0c
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	89 83       	std	Y+1, r24	; 0x01
    3e34:	8d 81       	ldd	r24, Y+5	; 0x05
    3e36:	9e 81       	ldd	r25, Y+6	; 0x06
    3e38:	9b 83       	std	Y+3, r25	; 0x03
    3e3a:	8a 83       	std	Y+2, r24	; 0x02
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	0f 92       	push	r0
    3e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e46:	89 2b       	or	r24, r25
    3e48:	71 f0       	breq	.+28     	; 0x3e66 <xTaskGenericNotify+0x60>
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4e:	fc 01       	movw	r30, r24
    3e50:	83 a5       	ldd	r24, Z+43	; 0x2b
    3e52:	94 a5       	ldd	r25, Z+44	; 0x2c
    3e54:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3e56:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3e58:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e5a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e5c:	f9 01       	movw	r30, r18
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
    3e66:	8a 81       	ldd	r24, Y+2	; 0x02
    3e68:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	87 a5       	ldd	r24, Z+47	; 0x2f
    3e6e:	8c 83       	std	Y+4, r24	; 0x04
    3e70:	8a 81       	ldd	r24, Y+2	; 0x02
    3e72:	9b 81       	ldd	r25, Y+3	; 0x03
    3e74:	22 e0       	ldi	r18, 0x02	; 2
    3e76:	fc 01       	movw	r30, r24
    3e78:	27 a7       	std	Z+47, r18	; 0x2f
    3e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e7c:	88 2f       	mov	r24, r24
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	82 30       	cpi	r24, 0x02	; 2
    3e82:	91 05       	cpc	r25, r1
    3e84:	31 f1       	breq	.+76     	; 0x3ed2 <xTaskGenericNotify+0xcc>
    3e86:	83 30       	cpi	r24, 0x03	; 3
    3e88:	91 05       	cpc	r25, r1
    3e8a:	34 f4       	brge	.+12     	; 0x3e98 <xTaskGenericNotify+0x92>
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <xTaskGenericNotify+0x8c>
    3e90:	4f c0       	rjmp	.+158    	; 0x3f30 <xTaskGenericNotify+0x12a>
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	39 f0       	breq	.+14     	; 0x3ea4 <xTaskGenericNotify+0x9e>
    3e96:	4d c0       	rjmp	.+154    	; 0x3f32 <xTaskGenericNotify+0x12c>
    3e98:	83 30       	cpi	r24, 0x03	; 3
    3e9a:	91 05       	cpc	r25, r1
    3e9c:	61 f1       	breq	.+88     	; 0x3ef6 <xTaskGenericNotify+0xf0>
    3e9e:	04 97       	sbiw	r24, 0x04	; 4
    3ea0:	b1 f1       	breq	.+108    	; 0x3f0e <xTaskGenericNotify+0x108>
    3ea2:	47 c0       	rjmp	.+142    	; 0x3f32 <xTaskGenericNotify+0x12c>
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	23 a5       	ldd	r18, Z+43	; 0x2b
    3eac:	34 a5       	ldd	r19, Z+44	; 0x2c
    3eae:	45 a5       	ldd	r20, Z+45	; 0x2d
    3eb0:	56 a5       	ldd	r21, Z+46	; 0x2e
    3eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb4:	98 85       	ldd	r25, Y+8	; 0x08
    3eb6:	a9 85       	ldd	r26, Y+9	; 0x09
    3eb8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3eba:	82 2b       	or	r24, r18
    3ebc:	93 2b       	or	r25, r19
    3ebe:	a4 2b       	or	r26, r20
    3ec0:	b5 2b       	or	r27, r21
    3ec2:	2a 81       	ldd	r18, Y+2	; 0x02
    3ec4:	3b 81       	ldd	r19, Y+3	; 0x03
    3ec6:	f9 01       	movw	r30, r18
    3ec8:	83 a7       	std	Z+43, r24	; 0x2b
    3eca:	94 a7       	std	Z+44, r25	; 0x2c
    3ecc:	a5 a7       	std	Z+45, r26	; 0x2d
    3ece:	b6 a7       	std	Z+46, r27	; 0x2e
    3ed0:	30 c0       	rjmp	.+96     	; 0x3f32 <xTaskGenericNotify+0x12c>
    3ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	83 a5       	ldd	r24, Z+43	; 0x2b
    3eda:	94 a5       	ldd	r25, Z+44	; 0x2c
    3edc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3ede:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	a1 1d       	adc	r26, r1
    3ee4:	b1 1d       	adc	r27, r1
    3ee6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ee8:	3b 81       	ldd	r19, Y+3	; 0x03
    3eea:	f9 01       	movw	r30, r18
    3eec:	83 a7       	std	Z+43, r24	; 0x2b
    3eee:	94 a7       	std	Z+44, r25	; 0x2c
    3ef0:	a5 a7       	std	Z+45, r26	; 0x2d
    3ef2:	b6 a7       	std	Z+46, r27	; 0x2e
    3ef4:	1e c0       	rjmp	.+60     	; 0x3f32 <xTaskGenericNotify+0x12c>
    3ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    3efa:	8f 81       	ldd	r24, Y+7	; 0x07
    3efc:	98 85       	ldd	r25, Y+8	; 0x08
    3efe:	a9 85       	ldd	r26, Y+9	; 0x09
    3f00:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f02:	f9 01       	movw	r30, r18
    3f04:	83 a7       	std	Z+43, r24	; 0x2b
    3f06:	94 a7       	std	Z+44, r25	; 0x2c
    3f08:	a5 a7       	std	Z+45, r26	; 0x2d
    3f0a:	b6 a7       	std	Z+46, r27	; 0x2e
    3f0c:	12 c0       	rjmp	.+36     	; 0x3f32 <xTaskGenericNotify+0x12c>
    3f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f10:	82 30       	cpi	r24, 0x02	; 2
    3f12:	61 f0       	breq	.+24     	; 0x3f2c <xTaskGenericNotify+0x126>
    3f14:	2a 81       	ldd	r18, Y+2	; 0x02
    3f16:	3b 81       	ldd	r19, Y+3	; 0x03
    3f18:	8f 81       	ldd	r24, Y+7	; 0x07
    3f1a:	98 85       	ldd	r25, Y+8	; 0x08
    3f1c:	a9 85       	ldd	r26, Y+9	; 0x09
    3f1e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f20:	f9 01       	movw	r30, r18
    3f22:	83 a7       	std	Z+43, r24	; 0x2b
    3f24:	94 a7       	std	Z+44, r25	; 0x2c
    3f26:	a5 a7       	std	Z+45, r26	; 0x2d
    3f28:	b6 a7       	std	Z+46, r27	; 0x2e
    3f2a:	03 c0       	rjmp	.+6      	; 0x3f32 <xTaskGenericNotify+0x12c>
    3f2c:	19 82       	std	Y+1, r1	; 0x01
    3f2e:	01 c0       	rjmp	.+2      	; 0x3f32 <xTaskGenericNotify+0x12c>
    3f30:	00 00       	nop
    3f32:	8c 81       	ldd	r24, Y+4	; 0x04
    3f34:	81 30       	cpi	r24, 0x01	; 1
    3f36:	b9 f5       	brne	.+110    	; 0x3fa6 <xTaskGenericNotify+0x1a0>
    3f38:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3c:	02 96       	adiw	r24, 0x02	; 2
    3f3e:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	9b 81       	ldd	r25, Y+3	; 0x03
    3f46:	fc 01       	movw	r30, r24
    3f48:	92 8d       	ldd	r25, Z+26	; 0x1a
    3f4a:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    3f4e:	89 17       	cp	r24, r25
    3f50:	30 f4       	brcc	.+12     	; 0x3f5e <xTaskGenericNotify+0x158>
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
    3f54:	9b 81       	ldd	r25, Y+3	; 0x03
    3f56:	fc 01       	movw	r30, r24
    3f58:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f5a:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	9b 81       	ldd	r25, Y+3	; 0x03
    3f62:	ac 01       	movw	r20, r24
    3f64:	4e 5f       	subi	r20, 0xFE	; 254
    3f66:	5f 4f       	sbci	r21, 0xFF	; 255
    3f68:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f70:	28 2f       	mov	r18, r24
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	6b e0       	ldi	r22, 0x0B	; 11
    3f76:	62 9f       	mul	r22, r18
    3f78:	c0 01       	movw	r24, r0
    3f7a:	63 9f       	mul	r22, r19
    3f7c:	90 0d       	add	r25, r0
    3f7e:	11 24       	eor	r1, r1
    3f80:	8a 59       	subi	r24, 0x9A	; 154
    3f82:	98 4e       	sbci	r25, 0xE8	; 232
    3f84:	ba 01       	movw	r22, r20
    3f86:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    3f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f8e:	fc 01       	movw	r30, r24
    3f90:	22 8d       	ldd	r18, Z+26	; 0x1a
    3f92:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    3f96:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f9e:	82 17       	cp	r24, r18
    3fa0:	10 f4       	brcc	.+4      	; 0x3fa6 <xTaskGenericNotify+0x1a0>
    3fa2:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	2d 96       	adiw	r28, 0x0d	; 13
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	08 95       	ret

00003fc2 <xTaskGenericNotifyFromISR>:
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	60 97       	sbiw	r28, 0x10	; 16
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	9f 83       	std	Y+7, r25	; 0x07
    3fe0:	8e 83       	std	Y+6, r24	; 0x06
    3fe2:	48 87       	std	Y+8, r20	; 0x08
    3fe4:	59 87       	std	Y+9, r21	; 0x09
    3fe6:	6a 87       	std	Y+10, r22	; 0x0a
    3fe8:	7b 87       	std	Y+11, r23	; 0x0b
    3fea:	2c 87       	std	Y+12, r18	; 0x0c
    3fec:	1e 87       	std	Y+14, r17	; 0x0e
    3fee:	0d 87       	std	Y+13, r16	; 0x0d
    3ff0:	f8 8a       	std	Y+16, r15	; 0x10
    3ff2:	ef 86       	std	Y+15, r14	; 0x0f
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	89 83       	std	Y+1, r24	; 0x01
    3ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffa:	9f 81       	ldd	r25, Y+7	; 0x07
    3ffc:	9b 83       	std	Y+3, r25	; 0x03
    3ffe:	8a 83       	std	Y+2, r24	; 0x02
    4000:	1c 82       	std	Y+4, r1	; 0x04
    4002:	8d 85       	ldd	r24, Y+13	; 0x0d
    4004:	9e 85       	ldd	r25, Y+14	; 0x0e
    4006:	89 2b       	or	r24, r25
    4008:	71 f0       	breq	.+28     	; 0x4026 <xTaskGenericNotifyFromISR+0x64>
    400a:	8a 81       	ldd	r24, Y+2	; 0x02
    400c:	9b 81       	ldd	r25, Y+3	; 0x03
    400e:	fc 01       	movw	r30, r24
    4010:	83 a5       	ldd	r24, Z+43	; 0x2b
    4012:	94 a5       	ldd	r25, Z+44	; 0x2c
    4014:	a5 a5       	ldd	r26, Z+45	; 0x2d
    4016:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4018:	2d 85       	ldd	r18, Y+13	; 0x0d
    401a:	3e 85       	ldd	r19, Y+14	; 0x0e
    401c:	f9 01       	movw	r30, r18
    401e:	80 83       	st	Z, r24
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	a2 83       	std	Z+2, r26	; 0x02
    4024:	b3 83       	std	Z+3, r27	; 0x03
    4026:	8a 81       	ldd	r24, Y+2	; 0x02
    4028:	9b 81       	ldd	r25, Y+3	; 0x03
    402a:	fc 01       	movw	r30, r24
    402c:	87 a5       	ldd	r24, Z+47	; 0x2f
    402e:	8d 83       	std	Y+5, r24	; 0x05
    4030:	8a 81       	ldd	r24, Y+2	; 0x02
    4032:	9b 81       	ldd	r25, Y+3	; 0x03
    4034:	22 e0       	ldi	r18, 0x02	; 2
    4036:	fc 01       	movw	r30, r24
    4038:	27 a7       	std	Z+47, r18	; 0x2f
    403a:	8c 85       	ldd	r24, Y+12	; 0x0c
    403c:	88 2f       	mov	r24, r24
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	82 30       	cpi	r24, 0x02	; 2
    4042:	91 05       	cpc	r25, r1
    4044:	31 f1       	breq	.+76     	; 0x4092 <xTaskGenericNotifyFromISR+0xd0>
    4046:	83 30       	cpi	r24, 0x03	; 3
    4048:	91 05       	cpc	r25, r1
    404a:	34 f4       	brge	.+12     	; 0x4058 <xTaskGenericNotifyFromISR+0x96>
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	09 f4       	brne	.+2      	; 0x4052 <xTaskGenericNotifyFromISR+0x90>
    4050:	4f c0       	rjmp	.+158    	; 0x40f0 <xTaskGenericNotifyFromISR+0x12e>
    4052:	01 97       	sbiw	r24, 0x01	; 1
    4054:	39 f0       	breq	.+14     	; 0x4064 <xTaskGenericNotifyFromISR+0xa2>
    4056:	4d c0       	rjmp	.+154    	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    4058:	83 30       	cpi	r24, 0x03	; 3
    405a:	91 05       	cpc	r25, r1
    405c:	61 f1       	breq	.+88     	; 0x40b6 <xTaskGenericNotifyFromISR+0xf4>
    405e:	04 97       	sbiw	r24, 0x04	; 4
    4060:	b1 f1       	breq	.+108    	; 0x40ce <xTaskGenericNotifyFromISR+0x10c>
    4062:	47 c0       	rjmp	.+142    	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    4064:	8a 81       	ldd	r24, Y+2	; 0x02
    4066:	9b 81       	ldd	r25, Y+3	; 0x03
    4068:	fc 01       	movw	r30, r24
    406a:	23 a5       	ldd	r18, Z+43	; 0x2b
    406c:	34 a5       	ldd	r19, Z+44	; 0x2c
    406e:	45 a5       	ldd	r20, Z+45	; 0x2d
    4070:	56 a5       	ldd	r21, Z+46	; 0x2e
    4072:	88 85       	ldd	r24, Y+8	; 0x08
    4074:	99 85       	ldd	r25, Y+9	; 0x09
    4076:	aa 85       	ldd	r26, Y+10	; 0x0a
    4078:	bb 85       	ldd	r27, Y+11	; 0x0b
    407a:	82 2b       	or	r24, r18
    407c:	93 2b       	or	r25, r19
    407e:	a4 2b       	or	r26, r20
    4080:	b5 2b       	or	r27, r21
    4082:	2a 81       	ldd	r18, Y+2	; 0x02
    4084:	3b 81       	ldd	r19, Y+3	; 0x03
    4086:	f9 01       	movw	r30, r18
    4088:	83 a7       	std	Z+43, r24	; 0x2b
    408a:	94 a7       	std	Z+44, r25	; 0x2c
    408c:	a5 a7       	std	Z+45, r26	; 0x2d
    408e:	b6 a7       	std	Z+46, r27	; 0x2e
    4090:	30 c0       	rjmp	.+96     	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    4092:	8a 81       	ldd	r24, Y+2	; 0x02
    4094:	9b 81       	ldd	r25, Y+3	; 0x03
    4096:	fc 01       	movw	r30, r24
    4098:	83 a5       	ldd	r24, Z+43	; 0x2b
    409a:	94 a5       	ldd	r25, Z+44	; 0x2c
    409c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    409e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    40a0:	01 96       	adiw	r24, 0x01	; 1
    40a2:	a1 1d       	adc	r26, r1
    40a4:	b1 1d       	adc	r27, r1
    40a6:	2a 81       	ldd	r18, Y+2	; 0x02
    40a8:	3b 81       	ldd	r19, Y+3	; 0x03
    40aa:	f9 01       	movw	r30, r18
    40ac:	83 a7       	std	Z+43, r24	; 0x2b
    40ae:	94 a7       	std	Z+44, r25	; 0x2c
    40b0:	a5 a7       	std	Z+45, r26	; 0x2d
    40b2:	b6 a7       	std	Z+46, r27	; 0x2e
    40b4:	1e c0       	rjmp	.+60     	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    40b6:	2a 81       	ldd	r18, Y+2	; 0x02
    40b8:	3b 81       	ldd	r19, Y+3	; 0x03
    40ba:	88 85       	ldd	r24, Y+8	; 0x08
    40bc:	99 85       	ldd	r25, Y+9	; 0x09
    40be:	aa 85       	ldd	r26, Y+10	; 0x0a
    40c0:	bb 85       	ldd	r27, Y+11	; 0x0b
    40c2:	f9 01       	movw	r30, r18
    40c4:	83 a7       	std	Z+43, r24	; 0x2b
    40c6:	94 a7       	std	Z+44, r25	; 0x2c
    40c8:	a5 a7       	std	Z+45, r26	; 0x2d
    40ca:	b6 a7       	std	Z+46, r27	; 0x2e
    40cc:	12 c0       	rjmp	.+36     	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    40ce:	8d 81       	ldd	r24, Y+5	; 0x05
    40d0:	82 30       	cpi	r24, 0x02	; 2
    40d2:	61 f0       	breq	.+24     	; 0x40ec <xTaskGenericNotifyFromISR+0x12a>
    40d4:	2a 81       	ldd	r18, Y+2	; 0x02
    40d6:	3b 81       	ldd	r19, Y+3	; 0x03
    40d8:	88 85       	ldd	r24, Y+8	; 0x08
    40da:	99 85       	ldd	r25, Y+9	; 0x09
    40dc:	aa 85       	ldd	r26, Y+10	; 0x0a
    40de:	bb 85       	ldd	r27, Y+11	; 0x0b
    40e0:	f9 01       	movw	r30, r18
    40e2:	83 a7       	std	Z+43, r24	; 0x2b
    40e4:	94 a7       	std	Z+44, r25	; 0x2c
    40e6:	a5 a7       	std	Z+45, r26	; 0x2d
    40e8:	b6 a7       	std	Z+46, r27	; 0x2e
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    40ec:	19 82       	std	Y+1, r1	; 0x01
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <xTaskGenericNotifyFromISR+0x130>
    40f0:	00 00       	nop
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	81 30       	cpi	r24, 0x01	; 1
    40f6:	09 f0       	breq	.+2      	; 0x40fa <xTaskGenericNotifyFromISR+0x138>
    40f8:	4e c0       	rjmp	.+156    	; 0x4196 <xTaskGenericNotifyFromISR+0x1d4>
    40fa:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxSchedulerSuspended>
    40fe:	88 23       	and	r24, r24
    4100:	51 f5       	brne	.+84     	; 0x4156 <xTaskGenericNotifyFromISR+0x194>
    4102:	8a 81       	ldd	r24, Y+2	; 0x02
    4104:	9b 81       	ldd	r25, Y+3	; 0x03
    4106:	02 96       	adiw	r24, 0x02	; 2
    4108:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    410c:	8a 81       	ldd	r24, Y+2	; 0x02
    410e:	9b 81       	ldd	r25, Y+3	; 0x03
    4110:	fc 01       	movw	r30, r24
    4112:	92 8d       	ldd	r25, Z+26	; 0x1a
    4114:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <uxTopReadyPriority>
    4118:	89 17       	cp	r24, r25
    411a:	30 f4       	brcc	.+12     	; 0x4128 <xTaskGenericNotifyFromISR+0x166>
    411c:	8a 81       	ldd	r24, Y+2	; 0x02
    411e:	9b 81       	ldd	r25, Y+3	; 0x03
    4120:	fc 01       	movw	r30, r24
    4122:	82 8d       	ldd	r24, Z+26	; 0x1a
    4124:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <uxTopReadyPriority>
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	9b 81       	ldd	r25, Y+3	; 0x03
    412c:	ac 01       	movw	r20, r24
    412e:	4e 5f       	subi	r20, 0xFE	; 254
    4130:	5f 4f       	sbci	r21, 0xFF	; 255
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	9b 81       	ldd	r25, Y+3	; 0x03
    4136:	fc 01       	movw	r30, r24
    4138:	82 8d       	ldd	r24, Z+26	; 0x1a
    413a:	28 2f       	mov	r18, r24
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	6b e0       	ldi	r22, 0x0B	; 11
    4140:	62 9f       	mul	r22, r18
    4142:	c0 01       	movw	r24, r0
    4144:	63 9f       	mul	r22, r19
    4146:	90 0d       	add	r25, r0
    4148:	11 24       	eor	r1, r1
    414a:	8a 59       	subi	r24, 0x9A	; 154
    414c:	98 4e       	sbci	r25, 0xE8	; 232
    414e:	ba 01       	movw	r22, r20
    4150:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    4154:	08 c0       	rjmp	.+16     	; 0x4166 <xTaskGenericNotifyFromISR+0x1a4>
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	9b 81       	ldd	r25, Y+3	; 0x03
    415a:	0e 96       	adiw	r24, 0x0e	; 14
    415c:	bc 01       	movw	r22, r24
    415e:	8c ea       	ldi	r24, 0xAC	; 172
    4160:	97 e1       	ldi	r25, 0x17	; 23
    4162:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    4166:	8a 81       	ldd	r24, Y+2	; 0x02
    4168:	9b 81       	ldd	r25, Y+3	; 0x03
    416a:	fc 01       	movw	r30, r24
    416c:	22 8d       	ldd	r18, Z+26	; 0x1a
    416e:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    4172:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    4176:	fc 01       	movw	r30, r24
    4178:	82 8d       	ldd	r24, Z+26	; 0x1a
    417a:	82 17       	cp	r24, r18
    417c:	60 f4       	brcc	.+24     	; 0x4196 <xTaskGenericNotifyFromISR+0x1d4>
    417e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4180:	98 89       	ldd	r25, Y+16	; 0x10
    4182:	89 2b       	or	r24, r25
    4184:	29 f0       	breq	.+10     	; 0x4190 <xTaskGenericNotifyFromISR+0x1ce>
    4186:	8f 85       	ldd	r24, Y+15	; 0x0f
    4188:	98 89       	ldd	r25, Y+16	; 0x10
    418a:	21 e0       	ldi	r18, 0x01	; 1
    418c:	fc 01       	movw	r30, r24
    418e:	20 83       	st	Z, r18
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <xYieldPending>
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	60 96       	adiw	r28, 0x10	; 16
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	ff 90       	pop	r15
    41ae:	ef 90       	pop	r14
    41b0:	08 95       	ret

000041b2 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	00 d0       	rcall	.+0      	; 0x41b8 <xTaskNotifyStateClear+0x6>
    41b8:	1f 92       	push	r1
    41ba:	1f 92       	push	r1
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	9d 83       	std	Y+5, r25	; 0x05
    41c2:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    41c4:	8c 81       	ldd	r24, Y+4	; 0x04
    41c6:	9d 81       	ldd	r25, Y+5	; 0x05
    41c8:	89 2b       	or	r24, r25
    41ca:	29 f4       	brne	.+10     	; 0x41d6 <xTaskNotifyStateClear+0x24>
    41cc:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    41d0:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <xTaskNotifyStateClear+0x28>
    41d6:	8c 81       	ldd	r24, Y+4	; 0x04
    41d8:	9d 81       	ldd	r25, Y+5	; 0x05
    41da:	9b 83       	std	Y+3, r25	; 0x03
    41dc:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	9b 81       	ldd	r25, Y+3	; 0x03
    41e8:	fc 01       	movw	r30, r24
    41ea:	87 a5       	ldd	r24, Z+47	; 0x2f
    41ec:	82 30       	cpi	r24, 0x02	; 2
    41ee:	39 f4       	brne	.+14     	; 0x41fe <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	9b 81       	ldd	r25, Y+3	; 0x03
    41f4:	fc 01       	movw	r30, r24
    41f6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	89 83       	std	Y+1, r24	; 0x01
    41fc:	01 c0       	rjmp	.+2      	; 0x4200 <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    41fe:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    }
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	08 95       	ret

00004216 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	2d 97       	sbiw	r28, 0x0d	; 13
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	69 87       	std	Y+9, r22	; 0x09
    422c:	7a 87       	std	Y+10, r23	; 0x0a
    422e:	8b 87       	std	Y+11, r24	; 0x0b
    4230:	9c 87       	std	Y+12, r25	; 0x0c
    4232:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4234:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <xTickCount>
    4238:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <xTickCount+0x1>
    423c:	a0 91 d1 17 	lds	r26, 0x17D1	; 0x8017d1 <xTickCount+0x2>
    4240:	b0 91 d2 17 	lds	r27, 0x17D2	; 0x8017d2 <xTickCount+0x3>
    4244:	89 83       	std	Y+1, r24	; 0x01
    4246:	9a 83       	std	Y+2, r25	; 0x02
    4248:	ab 83       	std	Y+3, r26	; 0x03
    424a:	bc 83       	std	Y+4, r27	; 0x04
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    424c:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    4250:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    4254:	02 96       	adiw	r24, 0x02	; 2
    4256:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    425a:	89 85       	ldd	r24, Y+9	; 0x09
    425c:	9a 85       	ldd	r25, Y+10	; 0x0a
    425e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4260:	bc 85       	ldd	r27, Y+12	; 0x0c
    4262:	8f 3f       	cpi	r24, 0xFF	; 255
    4264:	9f 4f       	sbci	r25, 0xFF	; 255
    4266:	af 4f       	sbci	r26, 0xFF	; 255
    4268:	bf 4f       	sbci	r27, 0xFF	; 255
    426a:	71 f4       	brne	.+28     	; 0x4288 <prvAddCurrentTaskToDelayedList+0x72>
    426c:	8d 85       	ldd	r24, Y+13	; 0x0d
    426e:	88 23       	and	r24, r24
    4270:	59 f0       	breq	.+22     	; 0x4288 <prvAddCurrentTaskToDelayedList+0x72>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4272:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    4276:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    427a:	02 96       	adiw	r24, 0x02	; 2
    427c:	bc 01       	movw	r22, r24
    427e:	83 ec       	ldi	r24, 0xC3	; 195
    4280:	97 e1       	ldi	r25, 0x17	; 23
    4282:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    4286:	64 c0       	rjmp	.+200    	; 0x4350 <prvAddCurrentTaskToDelayedList+0x13a>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    4288:	29 81       	ldd	r18, Y+1	; 0x01
    428a:	3a 81       	ldd	r19, Y+2	; 0x02
    428c:	4b 81       	ldd	r20, Y+3	; 0x03
    428e:	5c 81       	ldd	r21, Y+4	; 0x04
    4290:	89 85       	ldd	r24, Y+9	; 0x09
    4292:	9a 85       	ldd	r25, Y+10	; 0x0a
    4294:	ab 85       	ldd	r26, Y+11	; 0x0b
    4296:	bc 85       	ldd	r27, Y+12	; 0x0c
    4298:	82 0f       	add	r24, r18
    429a:	93 1f       	adc	r25, r19
    429c:	a4 1f       	adc	r26, r20
    429e:	b5 1f       	adc	r27, r21
    42a0:	8d 83       	std	Y+5, r24	; 0x05
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	af 83       	std	Y+7, r26	; 0x07
    42a6:	b8 87       	std	Y+8, r27	; 0x08

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    42a8:	20 91 64 17 	lds	r18, 0x1764	; 0x801764 <pxCurrentTCB>
    42ac:	30 91 65 17 	lds	r19, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	9e 81       	ldd	r25, Y+6	; 0x06
    42b4:	af 81       	ldd	r26, Y+7	; 0x07
    42b6:	b8 85       	ldd	r27, Y+8	; 0x08
    42b8:	f9 01       	movw	r30, r18
    42ba:	82 83       	std	Z+2, r24	; 0x02
    42bc:	93 83       	std	Z+3, r25	; 0x03
    42be:	a4 83       	std	Z+4, r26	; 0x04
    42c0:	b5 83       	std	Z+5, r27	; 0x05

            if( xTimeToWake < xConstTickCount )
    42c2:	2d 81       	ldd	r18, Y+5	; 0x05
    42c4:	3e 81       	ldd	r19, Y+6	; 0x06
    42c6:	4f 81       	ldd	r20, Y+7	; 0x07
    42c8:	58 85       	ldd	r21, Y+8	; 0x08
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	ab 81       	ldd	r26, Y+3	; 0x03
    42d0:	bc 81       	ldd	r27, Y+4	; 0x04
    42d2:	28 17       	cp	r18, r24
    42d4:	39 07       	cpc	r19, r25
    42d6:	4a 07       	cpc	r20, r26
    42d8:	5b 07       	cpc	r21, r27
    42da:	78 f4       	brcc	.+30     	; 0x42fa <prvAddCurrentTaskToDelayedList+0xe4>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    42dc:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    42e0:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    42e4:	9c 01       	movw	r18, r24
    42e6:	2e 5f       	subi	r18, 0xFE	; 254
    42e8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ea:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <pxOverflowDelayedTaskList>
    42ee:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <pxOverflowDelayedTaskList+0x1>
    42f2:	b9 01       	movw	r22, r18
    42f4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    42f8:	2b c0       	rjmp	.+86     	; 0x4350 <prvAddCurrentTaskToDelayedList+0x13a>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    42fa:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <pxCurrentTCB>
    42fe:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <pxCurrentTCB+0x1>
    4302:	9c 01       	movw	r18, r24
    4304:	2e 5f       	subi	r18, 0xFE	; 254
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <pxDelayedTaskList>
    430c:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <pxDelayedTaskList+0x1>
    4310:	b9 01       	movw	r22, r18
    4312:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    4316:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <xNextTaskUnblockTime>
    431a:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <xNextTaskUnblockTime+0x1>
    431e:	a0 91 db 17 	lds	r26, 0x17DB	; 0x8017db <xNextTaskUnblockTime+0x2>
    4322:	b0 91 dc 17 	lds	r27, 0x17DC	; 0x8017dc <xNextTaskUnblockTime+0x3>
    4326:	2d 81       	ldd	r18, Y+5	; 0x05
    4328:	3e 81       	ldd	r19, Y+6	; 0x06
    432a:	4f 81       	ldd	r20, Y+7	; 0x07
    432c:	58 85       	ldd	r21, Y+8	; 0x08
    432e:	28 17       	cp	r18, r24
    4330:	39 07       	cpc	r19, r25
    4332:	4a 07       	cpc	r20, r26
    4334:	5b 07       	cpc	r21, r27
    4336:	60 f4       	brcc	.+24     	; 0x4350 <prvAddCurrentTaskToDelayedList+0x13a>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    4338:	8d 81       	ldd	r24, Y+5	; 0x05
    433a:	9e 81       	ldd	r25, Y+6	; 0x06
    433c:	af 81       	ldd	r26, Y+7	; 0x07
    433e:	b8 85       	ldd	r27, Y+8	; 0x08
    4340:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNextTaskUnblockTime>
    4344:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xNextTaskUnblockTime+0x1>
    4348:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xNextTaskUnblockTime+0x2>
    434c:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xNextTaskUnblockTime+0x3>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    4350:	00 00       	nop
    4352:	2d 96       	adiw	r28, 0x0d	; 13
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	08 95       	ret

00004364 <xTimerCreateTimerTask>:
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	1f 92       	push	r1
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	19 82       	std	Y+1, r1	; 0x01
    4376:	ae d4       	rcall	.+2396   	; 0x4cd4 <prvCheckForValidListAndQueue>
    4378:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    437c:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4380:	89 2b       	or	r24, r25
    4382:	91 f0       	breq	.+36     	; 0x43a8 <xTimerCreateTimerTask+0x44>
    4384:	0f 2e       	mov	r0, r31
    4386:	fc ef       	ldi	r31, 0xFC	; 252
    4388:	ef 2e       	mov	r14, r31
    438a:	f7 e1       	ldi	r31, 0x17	; 23
    438c:	ff 2e       	mov	r15, r31
    438e:	f0 2d       	mov	r31, r0
    4390:	03 e0       	ldi	r16, 0x03	; 3
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	45 e5       	ldi	r20, 0x55	; 85
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	65 ec       	ldi	r22, 0xC5	; 197
    439c:	73 e0       	ldi	r23, 0x03	; 3
    439e:	80 ee       	ldi	r24, 0xE0	; 224
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <xTaskCreate>
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	0f 90       	pop	r0
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	0f 91       	pop	r16
    43b2:	ff 90       	pop	r15
    43b4:	ef 90       	pop	r14
    43b6:	08 95       	ret

000043b8 <xTimerGenericCommand>:
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	65 97       	sbiw	r28, 0x15	; 21
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	9a 87       	std	Y+10, r25	; 0x0a
    43da:	89 87       	std	Y+9, r24	; 0x09
    43dc:	6b 87       	std	Y+11, r22	; 0x0b
    43de:	2c 87       	std	Y+12, r18	; 0x0c
    43e0:	3d 87       	std	Y+13, r19	; 0x0d
    43e2:	4e 87       	std	Y+14, r20	; 0x0e
    43e4:	5f 87       	std	Y+15, r21	; 0x0f
    43e6:	19 8b       	std	Y+17, r17	; 0x11
    43e8:	08 8b       	std	Y+16, r16	; 0x10
    43ea:	ca 8a       	std	Y+18, r12	; 0x12
    43ec:	db 8a       	std	Y+19, r13	; 0x13
    43ee:	ec 8a       	std	Y+20, r14	; 0x14
    43f0:	fd 8a       	std	Y+21, r15	; 0x15
    43f2:	19 82       	std	Y+1, r1	; 0x01
    43f4:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    43f8:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    43fc:	89 2b       	or	r24, r25
    43fe:	09 f4       	brne	.+2      	; 0x4402 <xTimerGenericCommand+0x4a>
    4400:	43 c0       	rjmp	.+134    	; 0x4488 <xTimerGenericCommand+0xd0>
    4402:	8b 85       	ldd	r24, Y+11	; 0x0b
    4404:	8a 83       	std	Y+2, r24	; 0x02
    4406:	8c 85       	ldd	r24, Y+12	; 0x0c
    4408:	9d 85       	ldd	r25, Y+13	; 0x0d
    440a:	ae 85       	ldd	r26, Y+14	; 0x0e
    440c:	bf 85       	ldd	r27, Y+15	; 0x0f
    440e:	8b 83       	std	Y+3, r24	; 0x03
    4410:	9c 83       	std	Y+4, r25	; 0x04
    4412:	ad 83       	std	Y+5, r26	; 0x05
    4414:	be 83       	std	Y+6, r27	; 0x06
    4416:	89 85       	ldd	r24, Y+9	; 0x09
    4418:	9a 85       	ldd	r25, Y+10	; 0x0a
    441a:	98 87       	std	Y+8, r25	; 0x08
    441c:	8f 83       	std	Y+7, r24	; 0x07
    441e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4420:	86 30       	cpi	r24, 0x06	; 6
    4422:	2c f5       	brge	.+74     	; 0x446e <xTimerGenericCommand+0xb6>
    4424:	96 db       	rcall	.-2260   	; 0x3b52 <xTaskGetSchedulerState>
    4426:	82 30       	cpi	r24, 0x02	; 2
    4428:	99 f4       	brne	.+38     	; 0x4450 <xTimerGenericCommand+0x98>
    442a:	e0 91 fa 17 	lds	r30, 0x17FA	; 0x8017fa <xTimerQueue>
    442e:	f0 91 fb 17 	lds	r31, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4432:	8a 89       	ldd	r24, Y+18	; 0x12
    4434:	9b 89       	ldd	r25, Y+19	; 0x13
    4436:	ac 89       	ldd	r26, Y+20	; 0x14
    4438:	bd 89       	ldd	r27, Y+21	; 0x15
    443a:	be 01       	movw	r22, r28
    443c:	6e 5f       	subi	r22, 0xFE	; 254
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	00 e0       	ldi	r16, 0x00	; 0
    4442:	9c 01       	movw	r18, r24
    4444:	ad 01       	movw	r20, r26
    4446:	cf 01       	movw	r24, r30
    4448:	0e 94 1c 0c 	call	0x1838	; 0x1838 <xQueueGenericSend>
    444c:	89 83       	std	Y+1, r24	; 0x01
    444e:	1c c0       	rjmp	.+56     	; 0x4488 <xTimerGenericCommand+0xd0>
    4450:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    4454:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4458:	be 01       	movw	r22, r28
    445a:	6e 5f       	subi	r22, 0xFE	; 254
    445c:	7f 4f       	sbci	r23, 0xFF	; 255
    445e:	00 e0       	ldi	r16, 0x00	; 0
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	a9 01       	movw	r20, r18
    4466:	0e 94 1c 0c 	call	0x1838	; 0x1838 <xQueueGenericSend>
    446a:	89 83       	std	Y+1, r24	; 0x01
    446c:	0d c0       	rjmp	.+26     	; 0x4488 <xTimerGenericCommand+0xd0>
    446e:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    4472:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4476:	48 89       	ldd	r20, Y+16	; 0x10
    4478:	59 89       	ldd	r21, Y+17	; 0x11
    447a:	be 01       	movw	r22, r28
    447c:	6e 5f       	subi	r22, 0xFE	; 254
    447e:	7f 4f       	sbci	r23, 0xFF	; 255
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <xQueueGenericSendFromISR>
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	65 96       	adiw	r28, 0x15	; 21
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	ff 90       	pop	r15
    44a0:	ef 90       	pop	r14
    44a2:	df 90       	pop	r13
    44a4:	cf 90       	pop	r12
    44a6:	08 95       	ret

000044a8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    44a8:	cf 92       	push	r12
    44aa:	df 92       	push	r13
    44ac:	ef 92       	push	r14
    44ae:	ff 92       	push	r15
    44b0:	0f 93       	push	r16
    44b2:	1f 93       	push	r17
    44b4:	cf 93       	push	r28
    44b6:	df 93       	push	r29
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	2b 97       	sbiw	r28, 0x0b	; 11
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	de bf       	out	0x3e, r29	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	6c 83       	std	Y+4, r22	; 0x04
    44ca:	7d 83       	std	Y+5, r23	; 0x05
    44cc:	8e 83       	std	Y+6, r24	; 0x06
    44ce:	9f 83       	std	Y+7, r25	; 0x07
    44d0:	28 87       	std	Y+8, r18	; 0x08
    44d2:	39 87       	std	Y+9, r19	; 0x09
    44d4:	4a 87       	std	Y+10, r20	; 0x0a
    44d6:	5b 87       	std	Y+11, r21	; 0x0b
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    44d8:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    44dc:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    44e0:	fc 01       	movw	r30, r24
    44e2:	87 81       	ldd	r24, Z+7	; 0x07
    44e4:	90 85       	ldd	r25, Z+8	; 0x08
    44e6:	fc 01       	movw	r30, r24
    44e8:	80 85       	ldd	r24, Z+8	; 0x08
    44ea:	91 85       	ldd	r25, Z+9	; 0x09
    44ec:	9a 83       	std	Y+2, r25	; 0x02
    44ee:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	9a 81       	ldd	r25, Y+2	; 0x02
    44f4:	02 96       	adiw	r24, 0x02	; 2
    44f6:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	9a 81       	ldd	r25, Y+2	; 0x02
    44fe:	fc 01       	movw	r30, r24
    4500:	87 89       	ldd	r24, Z+23	; 0x17
    4502:	88 2f       	mov	r24, r24
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	84 70       	andi	r24, 0x04	; 4
    4508:	99 27       	eor	r25, r25
    450a:	89 2b       	or	r24, r25
    450c:	a9 f1       	breq	.+106    	; 0x4578 <prvProcessExpiredTimer+0xd0>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	fc 01       	movw	r30, r24
    4514:	26 85       	ldd	r18, Z+14	; 0x0e
    4516:	37 85       	ldd	r19, Z+15	; 0x0f
    4518:	40 89       	ldd	r20, Z+16	; 0x10
    451a:	51 89       	ldd	r21, Z+17	; 0x11
    451c:	8c 81       	ldd	r24, Y+4	; 0x04
    451e:	9d 81       	ldd	r25, Y+5	; 0x05
    4520:	ae 81       	ldd	r26, Y+6	; 0x06
    4522:	bf 81       	ldd	r27, Y+7	; 0x07
    4524:	82 0f       	add	r24, r18
    4526:	93 1f       	adc	r25, r19
    4528:	a4 1f       	adc	r26, r20
    452a:	b5 1f       	adc	r27, r21
    452c:	ec 80       	ldd	r14, Y+4	; 0x04
    452e:	fd 80       	ldd	r15, Y+5	; 0x05
    4530:	0e 81       	ldd	r16, Y+6	; 0x06
    4532:	1f 81       	ldd	r17, Y+7	; 0x07
    4534:	28 85       	ldd	r18, Y+8	; 0x08
    4536:	39 85       	ldd	r19, Y+9	; 0x09
    4538:	4a 85       	ldd	r20, Y+10	; 0x0a
    453a:	5b 85       	ldd	r21, Y+11	; 0x0b
    453c:	e9 81       	ldd	r30, Y+1	; 0x01
    453e:	fa 81       	ldd	r31, Y+2	; 0x02
    4540:	67 01       	movw	r12, r14
    4542:	78 01       	movw	r14, r16
    4544:	89 01       	movw	r16, r18
    4546:	9a 01       	movw	r18, r20
    4548:	ac 01       	movw	r20, r24
    454a:	bd 01       	movw	r22, r26
    454c:	cf 01       	movw	r24, r30
    454e:	3e d1       	rcall	.+636    	; 0x47cc <prvInsertTimerInActiveList>
    4550:	88 23       	and	r24, r24
    4552:	e1 f0       	breq	.+56     	; 0x458c <prvProcessExpiredTimer+0xe4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4554:	8c 81       	ldd	r24, Y+4	; 0x04
    4556:	9d 81       	ldd	r25, Y+5	; 0x05
    4558:	ae 81       	ldd	r26, Y+6	; 0x06
    455a:	bf 81       	ldd	r27, Y+7	; 0x07
    455c:	e9 81       	ldd	r30, Y+1	; 0x01
    455e:	fa 81       	ldd	r31, Y+2	; 0x02
    4560:	c1 2c       	mov	r12, r1
    4562:	d1 2c       	mov	r13, r1
    4564:	76 01       	movw	r14, r12
    4566:	00 e0       	ldi	r16, 0x00	; 0
    4568:	10 e0       	ldi	r17, 0x00	; 0
    456a:	9c 01       	movw	r18, r24
    456c:	ad 01       	movw	r20, r26
    456e:	60 e0       	ldi	r22, 0x00	; 0
    4570:	cf 01       	movw	r24, r30
    4572:	22 df       	rcall	.-444    	; 0x43b8 <xTimerGenericCommand>
    4574:	8b 83       	std	Y+3, r24	; 0x03
    4576:	0a c0       	rjmp	.+20     	; 0x458c <prvProcessExpiredTimer+0xe4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	9a 81       	ldd	r25, Y+2	; 0x02
    457c:	fc 01       	movw	r30, r24
    457e:	87 89       	ldd	r24, Z+23	; 0x17
    4580:	28 2f       	mov	r18, r24
    4582:	2e 7f       	andi	r18, 0xFE	; 254
    4584:	89 81       	ldd	r24, Y+1	; 0x01
    4586:	9a 81       	ldd	r25, Y+2	; 0x02
    4588:	fc 01       	movw	r30, r24
    458a:	27 8b       	std	Z+23, r18	; 0x17
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	9a 81       	ldd	r25, Y+2	; 0x02
    4590:	fc 01       	movw	r30, r24
    4592:	24 89       	ldd	r18, Z+20	; 0x14
    4594:	35 89       	ldd	r19, Z+21	; 0x15
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	9a 81       	ldd	r25, Y+2	; 0x02
    459a:	f9 01       	movw	r30, r18
    459c:	19 95       	eicall
}
    459e:	00 00       	nop
    45a0:	2b 96       	adiw	r28, 0x0b	; 11
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	08 95       	ret

000045be <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    45be:	ef 92       	push	r14
    45c0:	ff 92       	push	r15
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	2a 97       	sbiw	r28, 0x0a	; 10
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	6e 83       	std	Y+6, r22	; 0x06
    45dc:	7f 83       	std	Y+7, r23	; 0x07
    45de:	88 87       	std	Y+8, r24	; 0x08
    45e0:	99 87       	std	Y+9, r25	; 0x09
    45e2:	4a 87       	std	Y+10, r20	; 0x0a
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    45e4:	0e 94 90 18 	call	0x3120	; 0x3120 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    45e8:	ce 01       	movw	r24, r28
    45ea:	05 96       	adiw	r24, 0x05	; 5
    45ec:	a8 d0       	rcall	.+336    	; 0x473e <prvSampleTimeNow>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	89 83       	std	Y+1, r24	; 0x01
    45f4:	9a 83       	std	Y+2, r25	; 0x02
    45f6:	ab 83       	std	Y+3, r26	; 0x03
    45f8:	bc 83       	std	Y+4, r27	; 0x04
        if( xTimerListsWereSwitched == pdFALSE )
    45fa:	8d 81       	ldd	r24, Y+5	; 0x05
    45fc:	88 23       	and	r24, r24
    45fe:	09 f0       	breq	.+2      	; 0x4602 <prvProcessTimerOrBlockTask+0x44>
    4600:	4d c0       	rjmp	.+154    	; 0x469c <prvProcessTimerOrBlockTask+0xde>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4602:	8a 85       	ldd	r24, Y+10	; 0x0a
    4604:	88 23       	and	r24, r24
    4606:	d9 f4       	brne	.+54     	; 0x463e <prvProcessTimerOrBlockTask+0x80>
    4608:	2e 81       	ldd	r18, Y+6	; 0x06
    460a:	3f 81       	ldd	r19, Y+7	; 0x07
    460c:	48 85       	ldd	r20, Y+8	; 0x08
    460e:	59 85       	ldd	r21, Y+9	; 0x09
    4610:	89 81       	ldd	r24, Y+1	; 0x01
    4612:	9a 81       	ldd	r25, Y+2	; 0x02
    4614:	ab 81       	ldd	r26, Y+3	; 0x03
    4616:	bc 81       	ldd	r27, Y+4	; 0x04
    4618:	82 17       	cp	r24, r18
    461a:	93 07       	cpc	r25, r19
    461c:	a4 07       	cpc	r26, r20
    461e:	b5 07       	cpc	r27, r21
    4620:	70 f0       	brcs	.+28     	; 0x463e <prvProcessTimerOrBlockTask+0x80>
            {
                ( void ) xTaskResumeAll();
    4622:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4626:	29 81       	ldd	r18, Y+1	; 0x01
    4628:	3a 81       	ldd	r19, Y+2	; 0x02
    462a:	4b 81       	ldd	r20, Y+3	; 0x03
    462c:	5c 81       	ldd	r21, Y+4	; 0x04
    462e:	8e 81       	ldd	r24, Y+6	; 0x06
    4630:	9f 81       	ldd	r25, Y+7	; 0x07
    4632:	a8 85       	ldd	r26, Y+8	; 0x08
    4634:	b9 85       	ldd	r27, Y+9	; 0x09
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	36 df       	rcall	.-404    	; 0x44a8 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    463c:	31 c0       	rjmp	.+98     	; 0x46a0 <prvProcessTimerOrBlockTask+0xe2>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    463e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4640:	88 23       	and	r24, r24
    4642:	59 f0       	breq	.+22     	; 0x465a <prvProcessTimerOrBlockTask+0x9c>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4644:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <pxOverflowTimerList>
    4648:	90 91 f9 17 	lds	r25, 0x17F9	; 0x8017f9 <pxOverflowTimerList+0x1>
    464c:	fc 01       	movw	r30, r24
    464e:	90 81       	ld	r25, Z
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	99 23       	and	r25, r25
    4654:	09 f0       	breq	.+2      	; 0x4658 <prvProcessTimerOrBlockTask+0x9a>
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	8a 87       	std	Y+10, r24	; 0x0a
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    465a:	2e 81       	ldd	r18, Y+6	; 0x06
    465c:	3f 81       	ldd	r19, Y+7	; 0x07
    465e:	48 85       	ldd	r20, Y+8	; 0x08
    4660:	59 85       	ldd	r21, Y+9	; 0x09
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	ab 81       	ldd	r26, Y+3	; 0x03
    4668:	bc 81       	ldd	r27, Y+4	; 0x04
    466a:	79 01       	movw	r14, r18
    466c:	8a 01       	movw	r16, r20
    466e:	e8 1a       	sub	r14, r24
    4670:	f9 0a       	sbc	r15, r25
    4672:	0a 0b       	sbc	r16, r26
    4674:	1b 0b       	sbc	r17, r27
    4676:	d8 01       	movw	r26, r16
    4678:	c7 01       	movw	r24, r14
    467a:	e0 91 fa 17 	lds	r30, 0x17FA	; 0x8017fa <xTimerQueue>
    467e:	f0 91 fb 17 	lds	r31, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4682:	2a 85       	ldd	r18, Y+10	; 0x0a
    4684:	ac 01       	movw	r20, r24
    4686:	bd 01       	movw	r22, r26
    4688:	cf 01       	movw	r24, r30
    468a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    468e:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
    4692:	88 23       	and	r24, r24
    4694:	29 f4       	brne	.+10     	; 0x46a0 <prvProcessTimerOrBlockTask+0xe2>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    4696:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <prvProcessTimerOrBlockTask+0xe2>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    469c:	0e 94 9d 18 	call	0x313a	; 0x313a <xTaskResumeAll>
        }
    }
}
    46a0:	00 00       	nop
    46a2:	2a 96       	adiw	r28, 0x0a	; 10
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	f8 94       	cli
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	cd bf       	out	0x3d, r28	; 61
    46ae:	df 91       	pop	r29
    46b0:	cf 91       	pop	r28
    46b2:	1f 91       	pop	r17
    46b4:	0f 91       	pop	r16
    46b6:	ff 90       	pop	r15
    46b8:	ef 90       	pop	r14
    46ba:	08 95       	ret

000046bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    46bc:	cf 93       	push	r28
    46be:	df 93       	push	r29
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <prvGetNextExpireTime+0x6>
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <prvGetNextExpireTime+0x8>
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    46cc:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    46d0:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    46d4:	fc 01       	movw	r30, r24
    46d6:	90 81       	ld	r25, Z
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	99 23       	and	r25, r25
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <prvGetNextExpireTime+0x24>
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	28 2f       	mov	r18, r24
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	9e 81       	ldd	r25, Y+6	; 0x06
    46e6:	fc 01       	movw	r30, r24
    46e8:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    46ea:	8d 81       	ldd	r24, Y+5	; 0x05
    46ec:	9e 81       	ldd	r25, Y+6	; 0x06
    46ee:	fc 01       	movw	r30, r24
    46f0:	80 81       	ld	r24, Z
    46f2:	88 23       	and	r24, r24
    46f4:	89 f4       	brne	.+34     	; 0x4718 <prvGetNextExpireTime+0x5c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    46f6:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    46fa:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    46fe:	fc 01       	movw	r30, r24
    4700:	87 81       	ldd	r24, Z+7	; 0x07
    4702:	90 85       	ldd	r25, Z+8	; 0x08
    4704:	fc 01       	movw	r30, r24
    4706:	80 81       	ld	r24, Z
    4708:	91 81       	ldd	r25, Z+1	; 0x01
    470a:	a2 81       	ldd	r26, Z+2	; 0x02
    470c:	b3 81       	ldd	r27, Z+3	; 0x03
    470e:	89 83       	std	Y+1, r24	; 0x01
    4710:	9a 83       	std	Y+2, r25	; 0x02
    4712:	ab 83       	std	Y+3, r26	; 0x03
    4714:	bc 83       	std	Y+4, r27	; 0x04
    4716:	04 c0       	rjmp	.+8      	; 0x4720 <prvGetNextExpireTime+0x64>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4718:	19 82       	std	Y+1, r1	; 0x01
    471a:	1a 82       	std	Y+2, r1	; 0x02
    471c:	1b 82       	std	Y+3, r1	; 0x03
    471e:	1c 82       	std	Y+4, r1	; 0x04
    }

    return xNextExpireTime;
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	9a 81       	ldd	r25, Y+2	; 0x02
    4724:	ab 81       	ldd	r26, Y+3	; 0x03
    4726:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4728:	bc 01       	movw	r22, r24
    472a:	cd 01       	movw	r24, r26
    472c:	26 96       	adiw	r28, 0x06	; 6
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	f8 94       	cli
    4732:	de bf       	out	0x3e, r29	; 62
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	cd bf       	out	0x3d, r28	; 61
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	08 95       	ret

0000473e <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
    4742:	00 d0       	rcall	.+0      	; 0x4744 <prvSampleTimeNow+0x6>
    4744:	00 d0       	rcall	.+0      	; 0x4746 <prvSampleTimeNow+0x8>
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	9e 83       	std	Y+6, r25	; 0x06
    474c:	8d 83       	std	Y+5, r24	; 0x05
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    474e:	0e 94 2f 19 	call	0x325e	; 0x325e <xTaskGetTickCount>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	89 83       	std	Y+1, r24	; 0x01
    4758:	9a 83       	std	Y+2, r25	; 0x02
    475a:	ab 83       	std	Y+3, r26	; 0x03
    475c:	bc 83       	std	Y+4, r27	; 0x04

    if( xTimeNow < xLastTime )
    475e:	80 91 fe 17 	lds	r24, 0x17FE	; 0x8017fe <xLastTime.2432>
    4762:	90 91 ff 17 	lds	r25, 0x17FF	; 0x8017ff <xLastTime.2432+0x1>
    4766:	a0 91 00 18 	lds	r26, 0x1800	; 0x801800 <xLastTime.2432+0x2>
    476a:	b0 91 01 18 	lds	r27, 0x1801	; 0x801801 <xLastTime.2432+0x3>
    476e:	29 81       	ldd	r18, Y+1	; 0x01
    4770:	3a 81       	ldd	r19, Y+2	; 0x02
    4772:	4b 81       	ldd	r20, Y+3	; 0x03
    4774:	5c 81       	ldd	r21, Y+4	; 0x04
    4776:	28 17       	cp	r18, r24
    4778:	39 07       	cpc	r19, r25
    477a:	4a 07       	cpc	r20, r26
    477c:	5b 07       	cpc	r21, r27
    477e:	38 f4       	brcc	.+14     	; 0x478e <prvSampleTimeNow+0x50>
    {
        prvSwitchTimerLists();
    4780:	e6 d1       	rcall	.+972    	; 0x4b4e <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	21 e0       	ldi	r18, 0x01	; 1
    4788:	fc 01       	movw	r30, r24
    478a:	20 83       	st	Z, r18
    478c:	04 c0       	rjmp	.+8      	; 0x4796 <prvSampleTimeNow+0x58>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    478e:	8d 81       	ldd	r24, Y+5	; 0x05
    4790:	9e 81       	ldd	r25, Y+6	; 0x06
    4792:	fc 01       	movw	r30, r24
    4794:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	ab 81       	ldd	r26, Y+3	; 0x03
    479c:	bc 81       	ldd	r27, Y+4	; 0x04
    479e:	80 93 fe 17 	sts	0x17FE, r24	; 0x8017fe <xLastTime.2432>
    47a2:	90 93 ff 17 	sts	0x17FF, r25	; 0x8017ff <xLastTime.2432+0x1>
    47a6:	a0 93 00 18 	sts	0x1800, r26	; 0x801800 <xLastTime.2432+0x2>
    47aa:	b0 93 01 18 	sts	0x1801, r27	; 0x801801 <xLastTime.2432+0x3>

    return xTimeNow;
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	9a 81       	ldd	r25, Y+2	; 0x02
    47b2:	ab 81       	ldd	r26, Y+3	; 0x03
    47b4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	26 96       	adiw	r28, 0x06	; 6
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    47cc:	cf 92       	push	r12
    47ce:	df 92       	push	r13
    47d0:	ef 92       	push	r14
    47d2:	ff 92       	push	r15
    47d4:	0f 93       	push	r16
    47d6:	1f 93       	push	r17
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	cd b7       	in	r28, 0x3d	; 61
    47de:	de b7       	in	r29, 0x3e	; 62
    47e0:	2f 97       	sbiw	r28, 0x0f	; 15
    47e2:	0f b6       	in	r0, 0x3f	; 63
    47e4:	f8 94       	cli
    47e6:	de bf       	out	0x3e, r29	; 62
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	cd bf       	out	0x3d, r28	; 61
    47ec:	9b 83       	std	Y+3, r25	; 0x03
    47ee:	8a 83       	std	Y+2, r24	; 0x02
    47f0:	4c 83       	std	Y+4, r20	; 0x04
    47f2:	5d 83       	std	Y+5, r21	; 0x05
    47f4:	6e 83       	std	Y+6, r22	; 0x06
    47f6:	7f 83       	std	Y+7, r23	; 0x07
    47f8:	08 87       	std	Y+8, r16	; 0x08
    47fa:	19 87       	std	Y+9, r17	; 0x09
    47fc:	2a 87       	std	Y+10, r18	; 0x0a
    47fe:	3b 87       	std	Y+11, r19	; 0x0b
    4800:	cc 86       	std	Y+12, r12	; 0x0c
    4802:	dd 86       	std	Y+13, r13	; 0x0d
    4804:	ee 86       	std	Y+14, r14	; 0x0e
    4806:	ff 86       	std	Y+15, r15	; 0x0f
BaseType_t xProcessTimerNow = pdFALSE;
    4808:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    480a:	2a 81       	ldd	r18, Y+2	; 0x02
    480c:	3b 81       	ldd	r19, Y+3	; 0x03
    480e:	8c 81       	ldd	r24, Y+4	; 0x04
    4810:	9d 81       	ldd	r25, Y+5	; 0x05
    4812:	ae 81       	ldd	r26, Y+6	; 0x06
    4814:	bf 81       	ldd	r27, Y+7	; 0x07
    4816:	f9 01       	movw	r30, r18
    4818:	82 83       	std	Z+2, r24	; 0x02
    481a:	93 83       	std	Z+3, r25	; 0x03
    481c:	a4 83       	std	Z+4, r26	; 0x04
    481e:	b5 83       	std	Z+5, r27	; 0x05
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4820:	8a 81       	ldd	r24, Y+2	; 0x02
    4822:	9b 81       	ldd	r25, Y+3	; 0x03
    4824:	2a 81       	ldd	r18, Y+2	; 0x02
    4826:	3b 81       	ldd	r19, Y+3	; 0x03
    4828:	fc 01       	movw	r30, r24
    482a:	33 87       	std	Z+11, r19	; 0x0b
    482c:	22 87       	std	Z+10, r18	; 0x0a

    if( xNextExpiryTime <= xTimeNow )
    482e:	2c 81       	ldd	r18, Y+4	; 0x04
    4830:	3d 81       	ldd	r19, Y+5	; 0x05
    4832:	4e 81       	ldd	r20, Y+6	; 0x06
    4834:	5f 81       	ldd	r21, Y+7	; 0x07
    4836:	88 85       	ldd	r24, Y+8	; 0x08
    4838:	99 85       	ldd	r25, Y+9	; 0x09
    483a:	aa 85       	ldd	r26, Y+10	; 0x0a
    483c:	bb 85       	ldd	r27, Y+11	; 0x0b
    483e:	82 17       	cp	r24, r18
    4840:	93 07       	cpc	r25, r19
    4842:	a4 07       	cpc	r26, r20
    4844:	b5 07       	cpc	r27, r21
    4846:	40 f1       	brcs	.+80     	; 0x4898 <prvInsertTimerInActiveList+0xcc>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4848:	28 85       	ldd	r18, Y+8	; 0x08
    484a:	39 85       	ldd	r19, Y+9	; 0x09
    484c:	4a 85       	ldd	r20, Y+10	; 0x0a
    484e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4850:	8c 85       	ldd	r24, Y+12	; 0x0c
    4852:	9d 85       	ldd	r25, Y+13	; 0x0d
    4854:	ae 85       	ldd	r26, Y+14	; 0x0e
    4856:	bf 85       	ldd	r27, Y+15	; 0x0f
    4858:	28 1b       	sub	r18, r24
    485a:	39 0b       	sbc	r19, r25
    485c:	4a 0b       	sbc	r20, r26
    485e:	5b 0b       	sbc	r21, r27
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	fc 01       	movw	r30, r24
    4866:	86 85       	ldd	r24, Z+14	; 0x0e
    4868:	97 85       	ldd	r25, Z+15	; 0x0f
    486a:	a0 89       	ldd	r26, Z+16	; 0x10
    486c:	b1 89       	ldd	r27, Z+17	; 0x11
    486e:	28 17       	cp	r18, r24
    4870:	39 07       	cpc	r19, r25
    4872:	4a 07       	cpc	r20, r26
    4874:	5b 07       	cpc	r21, r27
    4876:	18 f0       	brcs	.+6      	; 0x487e <prvInsertTimerInActiveList+0xb2>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	89 83       	std	Y+1, r24	; 0x01
    487c:	36 c0       	rjmp	.+108    	; 0x48ea <prvInsertTimerInActiveList+0x11e>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    487e:	8a 81       	ldd	r24, Y+2	; 0x02
    4880:	9b 81       	ldd	r25, Y+3	; 0x03
    4882:	9c 01       	movw	r18, r24
    4884:	2e 5f       	subi	r18, 0xFE	; 254
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <pxOverflowTimerList>
    488c:	90 91 f9 17 	lds	r25, 0x17F9	; 0x8017f9 <pxOverflowTimerList+0x1>
    4890:	b9 01       	movw	r22, r18
    4892:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>
    4896:	29 c0       	rjmp	.+82     	; 0x48ea <prvInsertTimerInActiveList+0x11e>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4898:	28 85       	ldd	r18, Y+8	; 0x08
    489a:	39 85       	ldd	r19, Y+9	; 0x09
    489c:	4a 85       	ldd	r20, Y+10	; 0x0a
    489e:	5b 85       	ldd	r21, Y+11	; 0x0b
    48a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    48a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    48a4:	ae 85       	ldd	r26, Y+14	; 0x0e
    48a6:	bf 85       	ldd	r27, Y+15	; 0x0f
    48a8:	28 17       	cp	r18, r24
    48aa:	39 07       	cpc	r19, r25
    48ac:	4a 07       	cpc	r20, r26
    48ae:	5b 07       	cpc	r21, r27
    48b0:	80 f4       	brcc	.+32     	; 0x48d2 <prvInsertTimerInActiveList+0x106>
    48b2:	2c 81       	ldd	r18, Y+4	; 0x04
    48b4:	3d 81       	ldd	r19, Y+5	; 0x05
    48b6:	4e 81       	ldd	r20, Y+6	; 0x06
    48b8:	5f 81       	ldd	r21, Y+7	; 0x07
    48ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    48bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    48be:	ae 85       	ldd	r26, Y+14	; 0x0e
    48c0:	bf 85       	ldd	r27, Y+15	; 0x0f
    48c2:	28 17       	cp	r18, r24
    48c4:	39 07       	cpc	r19, r25
    48c6:	4a 07       	cpc	r20, r26
    48c8:	5b 07       	cpc	r21, r27
    48ca:	18 f0       	brcs	.+6      	; 0x48d2 <prvInsertTimerInActiveList+0x106>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	89 83       	std	Y+1, r24	; 0x01
    48d0:	0c c0       	rjmp	.+24     	; 0x48ea <prvInsertTimerInActiveList+0x11e>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    48d2:	8a 81       	ldd	r24, Y+2	; 0x02
    48d4:	9b 81       	ldd	r25, Y+3	; 0x03
    48d6:	9c 01       	movw	r18, r24
    48d8:	2e 5f       	subi	r18, 0xFE	; 254
    48da:	3f 4f       	sbci	r19, 0xFF	; 255
    48dc:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    48e0:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    48e4:	b9 01       	movw	r22, r18
    48e6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>
        }
    }

    return xProcessTimerNow;
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ec:	2f 96       	adiw	r28, 0x0f	; 15
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	ef 90       	pop	r14
    4904:	df 90       	pop	r13
    4906:	cf 90       	pop	r12
    4908:	08 95       	ret

0000490a <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    490a:	cf 92       	push	r12
    490c:	df 92       	push	r13
    490e:	ef 92       	push	r14
    4910:	ff 92       	push	r15
    4912:	0f 93       	push	r16
    4914:	1f 93       	push	r17
    4916:	cf 93       	push	r28
    4918:	df 93       	push	r29
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
    491e:	2f 97       	sbiw	r28, 0x0f	; 15
    4920:	0f b6       	in	r0, 0x3f	; 63
    4922:	f8 94       	cli
    4924:	de bf       	out	0x3e, r29	; 62
    4926:	0f be       	out	0x3f, r0	; 63
    4928:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    492a:	f2 c0       	rjmp	.+484    	; 0x4b10 <prvProcessReceivedCommands+0x206>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    492c:	88 85       	ldd	r24, Y+8	; 0x08
    492e:	88 23       	and	r24, r24
    4930:	0c f4       	brge	.+2      	; 0x4934 <prvProcessReceivedCommands+0x2a>
    4932:	ee c0       	rjmp	.+476    	; 0x4b10 <prvProcessReceivedCommands+0x206>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4934:	8d 85       	ldd	r24, Y+13	; 0x0d
    4936:	9e 85       	ldd	r25, Y+14	; 0x0e
    4938:	9a 83       	std	Y+2, r25	; 0x02
    493a:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	fc 01       	movw	r30, r24
    4942:	84 85       	ldd	r24, Z+12	; 0x0c
    4944:	95 85       	ldd	r25, Z+13	; 0x0d
    4946:	89 2b       	or	r24, r25
    4948:	29 f0       	breq	.+10     	; 0x4954 <prvProcessReceivedCommands+0x4a>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    494a:	89 81       	ldd	r24, Y+1	; 0x01
    494c:	9a 81       	ldd	r25, Y+2	; 0x02
    494e:	02 96       	adiw	r24, 0x02	; 2
    4950:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4954:	ce 01       	movw	r24, r28
    4956:	0f 96       	adiw	r24, 0x0f	; 15
    4958:	f2 de       	rcall	.-540    	; 0x473e <prvSampleTimeNow>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	8b 83       	std	Y+3, r24	; 0x03
    4960:	9c 83       	std	Y+4, r25	; 0x04
    4962:	ad 83       	std	Y+5, r26	; 0x05
    4964:	be 83       	std	Y+6, r27	; 0x06

            switch( xMessage.xMessageID )
    4966:	88 85       	ldd	r24, Y+8	; 0x08
    4968:	08 2e       	mov	r0, r24
    496a:	00 0c       	add	r0, r0
    496c:	99 0b       	sbc	r25, r25
    496e:	09 2e       	mov	r0, r25
    4970:	00 0c       	add	r0, r0
    4972:	aa 0b       	sbc	r26, r26
    4974:	bb 0b       	sbc	r27, r27
    4976:	40 e0       	ldi	r20, 0x00	; 0
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	29 e0       	ldi	r18, 0x09	; 9
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	84 1b       	sub	r24, r20
    4980:	95 0b       	sbc	r25, r21
    4982:	28 17       	cp	r18, r24
    4984:	39 07       	cpc	r19, r25
    4986:	08 f4       	brcc	.+2      	; 0x498a <prvProcessReceivedCommands+0x80>
    4988:	c2 c0       	rjmp	.+388    	; 0x4b0e <prvProcessReceivedCommands+0x204>
    498a:	fc 01       	movw	r30, r24
    498c:	88 27       	eor	r24, r24
    498e:	ee 58       	subi	r30, 0x8E	; 142
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	8f 4f       	sbci	r24, 0xFF	; 255
    4994:	0c 94 78 37 	jmp	0x6ef0	; 0x6ef0 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	9a 81       	ldd	r25, Y+2	; 0x02
    499c:	fc 01       	movw	r30, r24
    499e:	87 89       	ldd	r24, Z+23	; 0x17
    49a0:	28 2f       	mov	r18, r24
    49a2:	21 60       	ori	r18, 0x01	; 1
    49a4:	89 81       	ldd	r24, Y+1	; 0x01
    49a6:	9a 81       	ldd	r25, Y+2	; 0x02
    49a8:	fc 01       	movw	r30, r24
    49aa:	27 8b       	std	Z+23, r18	; 0x17
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    49ac:	e9 84       	ldd	r14, Y+9	; 0x09
    49ae:	fa 84       	ldd	r15, Y+10	; 0x0a
    49b0:	0b 85       	ldd	r16, Y+11	; 0x0b
    49b2:	1c 85       	ldd	r17, Y+12	; 0x0c
    49b4:	29 85       	ldd	r18, Y+9	; 0x09
    49b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    49b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    49ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	fc 01       	movw	r30, r24
    49c2:	86 85       	ldd	r24, Z+14	; 0x0e
    49c4:	97 85       	ldd	r25, Z+15	; 0x0f
    49c6:	a0 89       	ldd	r26, Z+16	; 0x10
    49c8:	b1 89       	ldd	r27, Z+17	; 0x11
    49ca:	82 0f       	add	r24, r18
    49cc:	93 1f       	adc	r25, r19
    49ce:	a4 1f       	adc	r26, r20
    49d0:	b5 1f       	adc	r27, r21
    49d2:	2b 81       	ldd	r18, Y+3	; 0x03
    49d4:	3c 81       	ldd	r19, Y+4	; 0x04
    49d6:	4d 81       	ldd	r20, Y+5	; 0x05
    49d8:	5e 81       	ldd	r21, Y+6	; 0x06
    49da:	e9 81       	ldd	r30, Y+1	; 0x01
    49dc:	fa 81       	ldd	r31, Y+2	; 0x02
    49de:	67 01       	movw	r12, r14
    49e0:	78 01       	movw	r14, r16
    49e2:	89 01       	movw	r16, r18
    49e4:	9a 01       	movw	r18, r20
    49e6:	ac 01       	movw	r20, r24
    49e8:	bd 01       	movw	r22, r26
    49ea:	cf 01       	movw	r24, r30
    49ec:	ef de       	rcall	.-546    	; 0x47cc <prvInsertTimerInActiveList>
    49ee:	88 23       	and	r24, r24
    49f0:	09 f4       	brne	.+2      	; 0x49f4 <prvProcessReceivedCommands+0xea>
    49f2:	8e c0       	rjmp	.+284    	; 0x4b10 <prvProcessReceivedCommands+0x206>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    49f4:	89 81       	ldd	r24, Y+1	; 0x01
    49f6:	9a 81       	ldd	r25, Y+2	; 0x02
    49f8:	fc 01       	movw	r30, r24
    49fa:	24 89       	ldd	r18, Z+20	; 0x14
    49fc:	35 89       	ldd	r19, Z+21	; 0x15
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	9a 81       	ldd	r25, Y+2	; 0x02
    4a02:	f9 01       	movw	r30, r18
    4a04:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	9a 81       	ldd	r25, Y+2	; 0x02
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	87 89       	ldd	r24, Z+23	; 0x17
    4a0e:	88 2f       	mov	r24, r24
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	84 70       	andi	r24, 0x04	; 4
    4a14:	99 27       	eor	r25, r25
    4a16:	89 2b       	or	r24, r25
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <prvProcessReceivedCommands+0x112>
    4a1a:	7a c0       	rjmp	.+244    	; 0x4b10 <prvProcessReceivedCommands+0x206>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4a1c:	29 85       	ldd	r18, Y+9	; 0x09
    4a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a20:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a22:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	9a 81       	ldd	r25, Y+2	; 0x02
    4a28:	fc 01       	movw	r30, r24
    4a2a:	86 85       	ldd	r24, Z+14	; 0x0e
    4a2c:	97 85       	ldd	r25, Z+15	; 0x0f
    4a2e:	a0 89       	ldd	r26, Z+16	; 0x10
    4a30:	b1 89       	ldd	r27, Z+17	; 0x11
    4a32:	82 0f       	add	r24, r18
    4a34:	93 1f       	adc	r25, r19
    4a36:	a4 1f       	adc	r26, r20
    4a38:	b5 1f       	adc	r27, r21
    4a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4a3e:	c1 2c       	mov	r12, r1
    4a40:	d1 2c       	mov	r13, r1
    4a42:	76 01       	movw	r14, r12
    4a44:	00 e0       	ldi	r16, 0x00	; 0
    4a46:	10 e0       	ldi	r17, 0x00	; 0
    4a48:	9c 01       	movw	r18, r24
    4a4a:	ad 01       	movw	r20, r26
    4a4c:	60 e0       	ldi	r22, 0x00	; 0
    4a4e:	cf 01       	movw	r24, r30
    4a50:	b3 dc       	rcall	.-1690   	; 0x43b8 <xTimerGenericCommand>
    4a52:	8f 83       	std	Y+7, r24	; 0x07
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    4a54:	5d c0       	rjmp	.+186    	; 0x4b10 <prvProcessReceivedCommands+0x206>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	87 89       	ldd	r24, Z+23	; 0x17
    4a5e:	28 2f       	mov	r18, r24
    4a60:	2e 7f       	andi	r18, 0xFE	; 254
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	9a 81       	ldd	r25, Y+2	; 0x02
    4a66:	fc 01       	movw	r30, r24
    4a68:	27 8b       	std	Z+23, r18	; 0x17
                    break;
    4a6a:	52 c0       	rjmp	.+164    	; 0x4b10 <prvProcessReceivedCommands+0x206>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a70:	fc 01       	movw	r30, r24
    4a72:	87 89       	ldd	r24, Z+23	; 0x17
    4a74:	28 2f       	mov	r18, r24
    4a76:	21 60       	ori	r18, 0x01	; 1
    4a78:	89 81       	ldd	r24, Y+1	; 0x01
    4a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	27 8b       	std	Z+23, r18	; 0x17
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4a80:	89 85       	ldd	r24, Y+9	; 0x09
    4a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a84:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a86:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a88:	29 81       	ldd	r18, Y+1	; 0x01
    4a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    4a8c:	f9 01       	movw	r30, r18
    4a8e:	86 87       	std	Z+14, r24	; 0x0e
    4a90:	97 87       	std	Z+15, r25	; 0x0f
    4a92:	a0 8b       	std	Z+16, r26	; 0x10
    4a94:	b1 8b       	std	Z+17, r27	; 0x11
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4a96:	89 81       	ldd	r24, Y+1	; 0x01
    4a98:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	26 85       	ldd	r18, Z+14	; 0x0e
    4a9e:	37 85       	ldd	r19, Z+15	; 0x0f
    4aa0:	40 89       	ldd	r20, Z+16	; 0x10
    4aa2:	51 89       	ldd	r21, Z+17	; 0x11
    4aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa8:	ad 81       	ldd	r26, Y+5	; 0x05
    4aaa:	be 81       	ldd	r27, Y+6	; 0x06
    4aac:	82 0f       	add	r24, r18
    4aae:	93 1f       	adc	r25, r19
    4ab0:	a4 1f       	adc	r26, r20
    4ab2:	b5 1f       	adc	r27, r21
    4ab4:	eb 80       	ldd	r14, Y+3	; 0x03
    4ab6:	fc 80       	ldd	r15, Y+4	; 0x04
    4ab8:	0d 81       	ldd	r16, Y+5	; 0x05
    4aba:	1e 81       	ldd	r17, Y+6	; 0x06
    4abc:	2b 81       	ldd	r18, Y+3	; 0x03
    4abe:	3c 81       	ldd	r19, Y+4	; 0x04
    4ac0:	4d 81       	ldd	r20, Y+5	; 0x05
    4ac2:	5e 81       	ldd	r21, Y+6	; 0x06
    4ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ac8:	67 01       	movw	r12, r14
    4aca:	78 01       	movw	r14, r16
    4acc:	89 01       	movw	r16, r18
    4ace:	9a 01       	movw	r18, r20
    4ad0:	ac 01       	movw	r20, r24
    4ad2:	bd 01       	movw	r22, r26
    4ad4:	cf 01       	movw	r24, r30
    4ad6:	7a de       	rcall	.-780    	; 0x47cc <prvInsertTimerInActiveList>
                    break;
    4ad8:	1b c0       	rjmp	.+54     	; 0x4b10 <prvProcessReceivedCommands+0x206>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4ada:	89 81       	ldd	r24, Y+1	; 0x01
    4adc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ade:	fc 01       	movw	r30, r24
    4ae0:	87 89       	ldd	r24, Z+23	; 0x17
    4ae2:	88 2f       	mov	r24, r24
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	82 70       	andi	r24, 0x02	; 2
    4ae8:	99 27       	eor	r25, r25
    4aea:	89 2b       	or	r24, r25
    4aec:	29 f4       	brne	.+10     	; 0x4af8 <prvProcessReceivedCommands+0x1ee>
                        {
                            vPortFree( pxTimer );
    4aee:	89 81       	ldd	r24, Y+1	; 0x01
    4af0:	9a 81       	ldd	r25, Y+2	; 0x02
    4af2:	0e 94 b4 04 	call	0x968	; 0x968 <vPortFree>
    4af6:	0c c0       	rjmp	.+24     	; 0x4b10 <prvProcessReceivedCommands+0x206>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4af8:	89 81       	ldd	r24, Y+1	; 0x01
    4afa:	9a 81       	ldd	r25, Y+2	; 0x02
    4afc:	fc 01       	movw	r30, r24
    4afe:	87 89       	ldd	r24, Z+23	; 0x17
    4b00:	28 2f       	mov	r18, r24
    4b02:	2e 7f       	andi	r18, 0xFE	; 254
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	fc 01       	movw	r30, r24
    4b0a:	27 8b       	std	Z+23, r18	; 0x17
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <prvProcessReceivedCommands+0x206>

                default    :
                    /* Don't expect to get here. */
                    break;
    4b0e:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4b10:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    4b14:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4b18:	be 01       	movw	r22, r28
    4b1a:	68 5f       	subi	r22, 0xF8	; 248
    4b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	a9 01       	movw	r20, r18
    4b24:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueReceive>
    4b28:	88 23       	and	r24, r24
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <prvProcessReceivedCommands+0x224>
    4b2c:	ff ce       	rjmp	.-514    	; 0x492c <prvProcessReceivedCommands+0x22>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    4b2e:	00 00       	nop
    4b30:	2f 96       	adiw	r28, 0x0f	; 15
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	ff 90       	pop	r15
    4b46:	ef 90       	pop	r14
    4b48:	df 90       	pop	r13
    4b4a:	cf 90       	pop	r12
    4b4c:	08 95       	ret

00004b4e <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4b4e:	cf 92       	push	r12
    4b50:	df 92       	push	r13
    4b52:	ef 92       	push	r14
    4b54:	ff 92       	push	r15
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
    4b5e:	cd b7       	in	r28, 0x3d	; 61
    4b60:	de b7       	in	r29, 0x3e	; 62
    4b62:	2d 97       	sbiw	r28, 0x0d	; 13
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	f8 94       	cli
    4b68:	de bf       	out	0x3e, r29	; 62
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4b6e:	85 c0       	rjmp	.+266    	; 0x4c7a <prvSwitchTimerLists+0x12c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4b70:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    4b74:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    4b78:	fc 01       	movw	r30, r24
    4b7a:	87 81       	ldd	r24, Z+7	; 0x07
    4b7c:	90 85       	ldd	r25, Z+8	; 0x08
    4b7e:	fc 01       	movw	r30, r24
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	a2 81       	ldd	r26, Z+2	; 0x02
    4b86:	b3 81       	ldd	r27, Z+3	; 0x03
    4b88:	89 83       	std	Y+1, r24	; 0x01
    4b8a:	9a 83       	std	Y+2, r25	; 0x02
    4b8c:	ab 83       	std	Y+3, r26	; 0x03
    4b8e:	bc 83       	std	Y+4, r27	; 0x04

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4b90:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    4b94:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    4b98:	fc 01       	movw	r30, r24
    4b9a:	87 81       	ldd	r24, Z+7	; 0x07
    4b9c:	90 85       	ldd	r25, Z+8	; 0x08
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	80 85       	ldd	r24, Z+8	; 0x08
    4ba2:	91 85       	ldd	r25, Z+9	; 0x09
    4ba4:	9e 83       	std	Y+6, r25	; 0x06
    4ba6:	8d 83       	std	Y+5, r24	; 0x05
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    4baa:	9e 81       	ldd	r25, Y+6	; 0x06
    4bac:	02 96       	adiw	r24, 0x02	; 2
    4bae:	0e 94 70 07 	call	0xee0	; 0xee0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	24 89       	ldd	r18, Z+20	; 0x14
    4bba:	35 89       	ldd	r19, Z+21	; 0x15
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	f9 01       	movw	r30, r18
    4bc2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc8:	fc 01       	movw	r30, r24
    4bca:	87 89       	ldd	r24, Z+23	; 0x17
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	84 70       	andi	r24, 0x04	; 4
    4bd2:	99 27       	eor	r25, r25
    4bd4:	89 2b       	or	r24, r25
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <prvSwitchTimerLists+0x8c>
    4bd8:	50 c0       	rjmp	.+160    	; 0x4c7a <prvSwitchTimerLists+0x12c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4bda:	8d 81       	ldd	r24, Y+5	; 0x05
    4bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bde:	fc 01       	movw	r30, r24
    4be0:	26 85       	ldd	r18, Z+14	; 0x0e
    4be2:	37 85       	ldd	r19, Z+15	; 0x0f
    4be4:	40 89       	ldd	r20, Z+16	; 0x10
    4be6:	51 89       	ldd	r21, Z+17	; 0x11
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	ab 81       	ldd	r26, Y+3	; 0x03
    4bee:	bc 81       	ldd	r27, Y+4	; 0x04
    4bf0:	82 0f       	add	r24, r18
    4bf2:	93 1f       	adc	r25, r19
    4bf4:	a4 1f       	adc	r26, r20
    4bf6:	b5 1f       	adc	r27, r21
    4bf8:	8f 83       	std	Y+7, r24	; 0x07
    4bfa:	98 87       	std	Y+8, r25	; 0x08
    4bfc:	a9 87       	std	Y+9, r26	; 0x09
    4bfe:	ba 87       	std	Y+10, r27	; 0x0a
            if( xReloadTime > xNextExpireTime )
    4c00:	2f 81       	ldd	r18, Y+7	; 0x07
    4c02:	38 85       	ldd	r19, Y+8	; 0x08
    4c04:	49 85       	ldd	r20, Y+9	; 0x09
    4c06:	5a 85       	ldd	r21, Y+10	; 0x0a
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0c:	ab 81       	ldd	r26, Y+3	; 0x03
    4c0e:	bc 81       	ldd	r27, Y+4	; 0x04
    4c10:	82 17       	cp	r24, r18
    4c12:	93 07       	cpc	r25, r19
    4c14:	a4 07       	cpc	r26, r20
    4c16:	b5 07       	cpc	r27, r21
    4c18:	f8 f4       	brcc	.+62     	; 0x4c58 <prvSwitchTimerLists+0x10a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4c1a:	2d 81       	ldd	r18, Y+5	; 0x05
    4c1c:	3e 81       	ldd	r19, Y+6	; 0x06
    4c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c20:	98 85       	ldd	r25, Y+8	; 0x08
    4c22:	a9 85       	ldd	r26, Y+9	; 0x09
    4c24:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c26:	f9 01       	movw	r30, r18
    4c28:	82 83       	std	Z+2, r24	; 0x02
    4c2a:	93 83       	std	Z+3, r25	; 0x03
    4c2c:	a4 83       	std	Z+4, r26	; 0x04
    4c2e:	b5 83       	std	Z+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4c30:	8d 81       	ldd	r24, Y+5	; 0x05
    4c32:	9e 81       	ldd	r25, Y+6	; 0x06
    4c34:	2d 81       	ldd	r18, Y+5	; 0x05
    4c36:	3e 81       	ldd	r19, Y+6	; 0x06
    4c38:	fc 01       	movw	r30, r24
    4c3a:	33 87       	std	Z+11, r19	; 0x0b
    4c3c:	22 87       	std	Z+10, r18	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c40:	9e 81       	ldd	r25, Y+6	; 0x06
    4c42:	9c 01       	movw	r18, r24
    4c44:	2e 5f       	subi	r18, 0xFE	; 254
    4c46:	3f 4f       	sbci	r19, 0xFF	; 255
    4c48:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    4c4c:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    4c50:	b9 01       	movw	r22, r18
    4c52:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vListInsert>
    4c56:	11 c0       	rjmp	.+34     	; 0x4c7a <prvSwitchTimerLists+0x12c>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	ab 81       	ldd	r26, Y+3	; 0x03
    4c5e:	bc 81       	ldd	r27, Y+4	; 0x04
    4c60:	ed 81       	ldd	r30, Y+5	; 0x05
    4c62:	fe 81       	ldd	r31, Y+6	; 0x06
    4c64:	c1 2c       	mov	r12, r1
    4c66:	d1 2c       	mov	r13, r1
    4c68:	76 01       	movw	r14, r12
    4c6a:	00 e0       	ldi	r16, 0x00	; 0
    4c6c:	10 e0       	ldi	r17, 0x00	; 0
    4c6e:	9c 01       	movw	r18, r24
    4c70:	ad 01       	movw	r20, r26
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	cf 01       	movw	r24, r30
    4c76:	a0 db       	rcall	.-2240   	; 0x43b8 <xTimerGenericCommand>
    4c78:	8b 87       	std	Y+11, r24	; 0x0b

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4c7a:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    4c7e:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    4c82:	fc 01       	movw	r30, r24
    4c84:	80 81       	ld	r24, Z
    4c86:	88 23       	and	r24, r24
    4c88:	09 f0       	breq	.+2      	; 0x4c8c <prvSwitchTimerLists+0x13e>
    4c8a:	72 cf       	rjmp	.-284    	; 0x4b70 <prvSwitchTimerLists+0x22>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    4c8c:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <pxCurrentTimerList>
    4c90:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <pxCurrentTimerList+0x1>
    4c94:	9d 87       	std	Y+13, r25	; 0x0d
    4c96:	8c 87       	std	Y+12, r24	; 0x0c
    pxCurrentTimerList = pxOverflowTimerList;
    4c98:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <pxOverflowTimerList>
    4c9c:	90 91 f9 17 	lds	r25, 0x17F9	; 0x8017f9 <pxOverflowTimerList+0x1>
    4ca0:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <pxCurrentTimerList+0x1>
    4ca4:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    4ca8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4caa:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cac:	90 93 f9 17 	sts	0x17F9, r25	; 0x8017f9 <pxOverflowTimerList+0x1>
    4cb0:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <pxOverflowTimerList>
}
    4cb4:	00 00       	nop
    4cb6:	2d 96       	adiw	r28, 0x0d	; 13
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	08 95       	ret

00004cd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	cd b7       	in	r28, 0x3d	; 61
    4cda:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    4ce2:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <xTimerQueue>
    4ce6:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <xTimerQueue+0x1>
    4cea:	89 2b       	or	r24, r25
    4cec:	e9 f4       	brne	.+58     	; 0x4d28 <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    4cee:	80 ee       	ldi	r24, 0xE0	; 224
    4cf0:	97 e1       	ldi	r25, 0x17	; 23
    4cf2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    4cf6:	8b ee       	ldi	r24, 0xEB	; 235
    4cf8:	97 e1       	ldi	r25, 0x17	; 23
    4cfa:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    4cfe:	80 ee       	ldi	r24, 0xE0	; 224
    4d00:	97 e1       	ldi	r25, 0x17	; 23
    4d02:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <pxCurrentTimerList+0x1>
    4d06:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    4d0a:	8b ee       	ldi	r24, 0xEB	; 235
    4d0c:	97 e1       	ldi	r25, 0x17	; 23
    4d0e:	90 93 f9 17 	sts	0x17F9, r25	; 0x8017f9 <pxOverflowTimerList+0x1>
    4d12:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	67 e0       	ldi	r22, 0x07	; 7
    4d1a:	8a e0       	ldi	r24, 0x0A	; 10
    4d1c:	0e 94 41 0b 	call	0x1682	; 0x1682 <xQueueGenericCreate>
    4d20:	90 93 fb 17 	sts	0x17FB, r25	; 0x8017fb <xTimerQueue+0x1>
    4d24:	80 93 fa 17 	sts	0x17FA, r24	; 0x8017fa <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    4d28:	0f 90       	pop	r0
    4d2a:	0f be       	out	0x3f, r0	; 63
}
    4d2c:	00 00       	nop
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	08 95       	ret

00004d34 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    4d3c:	00 00       	nop
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	08 95       	ret

00004d44 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	2e 97       	sbiw	r28, 0x0e	; 14
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4d58:	84 e2       	ldi	r24, 0x24	; 36
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	24 e2       	ldi	r18, 0x24	; 36
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
    4d60:	f9 01       	movw	r30, r18
    4d62:	20 81       	ld	r18, Z
    4d64:	20 68       	ori	r18, 0x80	; 128
    4d66:	fc 01       	movw	r30, r24
    4d68:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4d6a:	85 e2       	ldi	r24, 0x25	; 37
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	25 e2       	ldi	r18, 0x25	; 37
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	f9 01       	movw	r30, r18
    4d74:	20 81       	ld	r18, Z
    4d76:	20 68       	ori	r18, 0x80	; 128
    4d78:	fc 01       	movw	r30, r24
    4d7a:	20 83       	st	Z, r18
    4d7c:	80 e0       	ldi	r24, 0x00	; 0
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	a8 e4       	ldi	r26, 0x48	; 72
    4d82:	b2 e4       	ldi	r27, 0x42	; 66
    4d84:	89 83       	std	Y+1, r24	; 0x01
    4d86:	9a 83       	std	Y+2, r25	; 0x02
    4d88:	ab 83       	std	Y+3, r26	; 0x03
    4d8a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	4a e7       	ldi	r20, 0x7A	; 122
    4d92:	55 e4       	ldi	r21, 0x45	; 69
    4d94:	69 81       	ldd	r22, Y+1	; 0x01
    4d96:	7a 81       	ldd	r23, Y+2	; 0x02
    4d98:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d9c:	69 d2       	rcall	.+1234   	; 0x5270 <__mulsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	8d 83       	std	Y+5, r24	; 0x05
    4da4:	9e 83       	std	Y+6, r25	; 0x06
    4da6:	af 83       	std	Y+7, r26	; 0x07
    4da8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e8       	ldi	r20, 0x80	; 128
    4db0:	5f e3       	ldi	r21, 0x3F	; 63
    4db2:	6d 81       	ldd	r22, Y+5	; 0x05
    4db4:	7e 81       	ldd	r23, Y+6	; 0x06
    4db6:	8f 81       	ldd	r24, Y+7	; 0x07
    4db8:	98 85       	ldd	r25, Y+8	; 0x08
    4dba:	97 d1       	rcall	.+814    	; 0x50ea <__cmpsf2>
    4dbc:	88 23       	and	r24, r24
    4dbe:	2c f4       	brge	.+10     	; 0x4dca <vApplicationMallocFailedHook+0x86>
		__ticks = 1;
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	9a 87       	std	Y+10, r25	; 0x0a
    4dc6:	89 87       	std	Y+9, r24	; 0x09
    4dc8:	3b c0       	rjmp	.+118    	; 0x4e40 <vApplicationMallocFailedHook+0xfc>
	else if (__tmp > 65535)
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	3f ef       	ldi	r19, 0xFF	; 255
    4dce:	4f e7       	ldi	r20, 0x7F	; 127
    4dd0:	57 e4       	ldi	r21, 0x47	; 71
    4dd2:	6d 81       	ldd	r22, Y+5	; 0x05
    4dd4:	7e 81       	ldd	r23, Y+6	; 0x06
    4dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    4dd8:	98 85       	ldd	r25, Y+8	; 0x08
    4dda:	46 d2       	rcall	.+1164   	; 0x5268 <__gesf2>
    4ddc:	18 16       	cp	r1, r24
    4dde:	3c f5       	brge	.+78     	; 0x4e2e <vApplicationMallocFailedHook+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	40 e2       	ldi	r20, 0x20	; 32
    4de6:	51 e4       	ldi	r21, 0x41	; 65
    4de8:	69 81       	ldd	r22, Y+1	; 0x01
    4dea:	7a 81       	ldd	r23, Y+2	; 0x02
    4dec:	8b 81       	ldd	r24, Y+3	; 0x03
    4dee:	9c 81       	ldd	r25, Y+4	; 0x04
    4df0:	3f d2       	rcall	.+1150   	; 0x5270 <__mulsf3>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	bc 01       	movw	r22, r24
    4df8:	cd 01       	movw	r24, r26
    4dfa:	80 d1       	rcall	.+768    	; 0x50fc <__fixunssfsi>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	9a 87       	std	Y+10, r25	; 0x0a
    4e02:	89 87       	std	Y+9, r24	; 0x09
    4e04:	0f c0       	rjmp	.+30     	; 0x4e24 <vApplicationMallocFailedHook+0xe0>
    4e06:	80 e9       	ldi	r24, 0x90	; 144
    4e08:	91 e0       	ldi	r25, 0x01	; 1
    4e0a:	9c 87       	std	Y+12, r25	; 0x0c
    4e0c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e10:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e12:	01 97       	sbiw	r24, 0x01	; 1
    4e14:	f1 f7       	brne	.-4      	; 0x4e12 <vApplicationMallocFailedHook+0xce>
    4e16:	9c 87       	std	Y+12, r25	; 0x0c
    4e18:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e1a:	89 85       	ldd	r24, Y+9	; 0x09
    4e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e1e:	01 97       	sbiw	r24, 0x01	; 1
    4e20:	9a 87       	std	Y+10, r25	; 0x0a
    4e22:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e24:	89 85       	ldd	r24, Y+9	; 0x09
    4e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e28:	89 2b       	or	r24, r25
    4e2a:	69 f7       	brne	.-38     	; 0x4e06 <vApplicationMallocFailedHook+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e2c:	13 c0       	rjmp	.+38     	; 0x4e54 <vApplicationMallocFailedHook+0x110>
    4e2e:	6d 81       	ldd	r22, Y+5	; 0x05
    4e30:	7e 81       	ldd	r23, Y+6	; 0x06
    4e32:	8f 81       	ldd	r24, Y+7	; 0x07
    4e34:	98 85       	ldd	r25, Y+8	; 0x08
    4e36:	62 d1       	rcall	.+708    	; 0x50fc <__fixunssfsi>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	9a 87       	std	Y+10, r25	; 0x0a
    4e3e:	89 87       	std	Y+9, r24	; 0x09
    4e40:	89 85       	ldd	r24, Y+9	; 0x09
    4e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e44:	9e 87       	std	Y+14, r25	; 0x0e
    4e46:	8d 87       	std	Y+13, r24	; 0x0d
    4e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4c:	01 97       	sbiw	r24, 0x01	; 1
    4e4e:	f1 f7       	brne	.-4      	; 0x4e4c <vApplicationMallocFailedHook+0x108>
    4e50:	9e 87       	std	Y+14, r25	; 0x0e
    4e52:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    4e54:	83 e2       	ldi	r24, 0x23	; 35
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	23 e2       	ldi	r18, 0x23	; 35
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	f9 01       	movw	r30, r18
    4e5e:	20 81       	ld	r18, Z
    4e60:	20 68       	ori	r18, 0x80	; 128
    4e62:	fc 01       	movw	r30, r24
    4e64:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    4e66:	8a cf       	rjmp	.-236    	; 0x4d7c <vApplicationMallocFailedHook+0x38>

00004e68 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    4e68:	cf 93       	push	r28
    4e6a:	df 93       	push	r29
    4e6c:	cd b7       	in	r28, 0x3d	; 61
    4e6e:	de b7       	in	r29, 0x3e	; 62
    4e70:	62 97       	sbiw	r28, 0x12	; 18
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	f8 94       	cli
    4e76:	de bf       	out	0x3e, r29	; 62
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	cd bf       	out	0x3d, r28	; 61
    4e7c:	98 8b       	std	Y+16, r25	; 0x10
    4e7e:	8f 87       	std	Y+15, r24	; 0x0f
    4e80:	7a 8b       	std	Y+18, r23	; 0x12
    4e82:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4e84:	84 e2       	ldi	r24, 0x24	; 36
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	24 e2       	ldi	r18, 0x24	; 36
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	f9 01       	movw	r30, r18
    4e8e:	20 81       	ld	r18, Z
    4e90:	20 68       	ori	r18, 0x80	; 128
    4e92:	fc 01       	movw	r30, r24
    4e94:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4e96:	85 e2       	ldi	r24, 0x25	; 37
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	25 e2       	ldi	r18, 0x25	; 37
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	f9 01       	movw	r30, r18
    4ea0:	20 81       	ld	r18, Z
    4ea2:	20 68       	ori	r18, 0x80	; 128
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	20 83       	st	Z, r18
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	aa ef       	ldi	r26, 0xFA	; 250
    4eae:	b4 e4       	ldi	r27, 0x44	; 68
    4eb0:	89 83       	std	Y+1, r24	; 0x01
    4eb2:	9a 83       	std	Y+2, r25	; 0x02
    4eb4:	ab 83       	std	Y+3, r26	; 0x03
    4eb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	4a e7       	ldi	r20, 0x7A	; 122
    4ebe:	55 e4       	ldi	r21, 0x45	; 69
    4ec0:	69 81       	ldd	r22, Y+1	; 0x01
    4ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    4ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec8:	d3 d1       	rcall	.+934    	; 0x5270 <__mulsf3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	8d 83       	std	Y+5, r24	; 0x05
    4ed0:	9e 83       	std	Y+6, r25	; 0x06
    4ed2:	af 83       	std	Y+7, r26	; 0x07
    4ed4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	40 e8       	ldi	r20, 0x80	; 128
    4edc:	5f e3       	ldi	r21, 0x3F	; 63
    4ede:	6d 81       	ldd	r22, Y+5	; 0x05
    4ee0:	7e 81       	ldd	r23, Y+6	; 0x06
    4ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee4:	98 85       	ldd	r25, Y+8	; 0x08
    4ee6:	01 d1       	rcall	.+514    	; 0x50ea <__cmpsf2>
    4ee8:	88 23       	and	r24, r24
    4eea:	2c f4       	brge	.+10     	; 0x4ef6 <vApplicationStackOverflowHook+0x8e>
		__ticks = 1;
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	9a 87       	std	Y+10, r25	; 0x0a
    4ef2:	89 87       	std	Y+9, r24	; 0x09
    4ef4:	3b c0       	rjmp	.+118    	; 0x4f6c <vApplicationStackOverflowHook+0x104>
	else if (__tmp > 65535)
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	3f ef       	ldi	r19, 0xFF	; 255
    4efa:	4f e7       	ldi	r20, 0x7F	; 127
    4efc:	57 e4       	ldi	r21, 0x47	; 71
    4efe:	6d 81       	ldd	r22, Y+5	; 0x05
    4f00:	7e 81       	ldd	r23, Y+6	; 0x06
    4f02:	8f 81       	ldd	r24, Y+7	; 0x07
    4f04:	98 85       	ldd	r25, Y+8	; 0x08
    4f06:	b0 d1       	rcall	.+864    	; 0x5268 <__gesf2>
    4f08:	18 16       	cp	r1, r24
    4f0a:	3c f5       	brge	.+78     	; 0x4f5a <vApplicationStackOverflowHook+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	30 e0       	ldi	r19, 0x00	; 0
    4f10:	40 e2       	ldi	r20, 0x20	; 32
    4f12:	51 e4       	ldi	r21, 0x41	; 65
    4f14:	69 81       	ldd	r22, Y+1	; 0x01
    4f16:	7a 81       	ldd	r23, Y+2	; 0x02
    4f18:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1c:	a9 d1       	rcall	.+850    	; 0x5270 <__mulsf3>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	ea d0       	rcall	.+468    	; 0x50fc <__fixunssfsi>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	9a 87       	std	Y+10, r25	; 0x0a
    4f2e:	89 87       	std	Y+9, r24	; 0x09
    4f30:	0f c0       	rjmp	.+30     	; 0x4f50 <vApplicationStackOverflowHook+0xe8>
    4f32:	80 e9       	ldi	r24, 0x90	; 144
    4f34:	91 e0       	ldi	r25, 0x01	; 1
    4f36:	9c 87       	std	Y+12, r25	; 0x0c
    4f38:	8b 87       	std	Y+11, r24	; 0x0b
    4f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f3e:	01 97       	sbiw	r24, 0x01	; 1
    4f40:	f1 f7       	brne	.-4      	; 0x4f3e <vApplicationStackOverflowHook+0xd6>
    4f42:	9c 87       	std	Y+12, r25	; 0x0c
    4f44:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f46:	89 85       	ldd	r24, Y+9	; 0x09
    4f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	9a 87       	std	Y+10, r25	; 0x0a
    4f4e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f50:	89 85       	ldd	r24, Y+9	; 0x09
    4f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f54:	89 2b       	or	r24, r25
    4f56:	69 f7       	brne	.-38     	; 0x4f32 <vApplicationStackOverflowHook+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f58:	13 c0       	rjmp	.+38     	; 0x4f80 <vApplicationStackOverflowHook+0x118>
    4f5a:	6d 81       	ldd	r22, Y+5	; 0x05
    4f5c:	7e 81       	ldd	r23, Y+6	; 0x06
    4f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    4f60:	98 85       	ldd	r25, Y+8	; 0x08
    4f62:	cc d0       	rcall	.+408    	; 0x50fc <__fixunssfsi>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	9a 87       	std	Y+10, r25	; 0x0a
    4f6a:	89 87       	std	Y+9, r24	; 0x09
    4f6c:	89 85       	ldd	r24, Y+9	; 0x09
    4f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f70:	9e 87       	std	Y+14, r25	; 0x0e
    4f72:	8d 87       	std	Y+13, r24	; 0x0d
    4f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f78:	01 97       	sbiw	r24, 0x01	; 1
    4f7a:	f1 f7       	brne	.-4      	; 0x4f78 <vApplicationStackOverflowHook+0x110>
    4f7c:	9e 87       	std	Y+14, r25	; 0x0e
    4f7e:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    4f80:	83 e2       	ldi	r24, 0x23	; 35
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	23 e2       	ldi	r18, 0x23	; 35
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	f9 01       	movw	r30, r18
    4f8a:	20 81       	ld	r18, Z
    4f8c:	20 68       	ori	r18, 0x80	; 128
    4f8e:	fc 01       	movw	r30, r24
    4f90:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    4f92:	8a cf       	rjmp	.-236    	; 0x4ea8 <vApplicationStackOverflowHook+0x40>

00004f94 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    4f94:	ef 92       	push	r14
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	cd b7       	in	r28, 0x3d	; 61
    4fa0:	de b7       	in	r29, 0x3e	; 62
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    4fa2:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <xTestSemaphore>
    4fa6:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <xTestSemaphore+0x1>
    4faa:	89 2b       	or	r24, r25
    4fac:	c9 f4       	brne	.+50     	; 0x4fe0 <create_tasks_and_semaphores+0x4c>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueCreateMutex>
    4fb4:	90 93 54 19 	sts	0x1954, r25	; 0x801954 <xTestSemaphore+0x1>
    4fb8:	80 93 53 19 	sts	0x1953, r24	; 0x801953 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    4fbc:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <xTestSemaphore>
    4fc0:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <xTestSemaphore+0x1>
    4fc4:	89 2b       	or	r24, r25
    4fc6:	61 f0       	breq	.+24     	; 0x4fe0 <create_tasks_and_semaphores+0x4c>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    4fc8:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <xTestSemaphore>
    4fcc:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <xTestSemaphore+0x1>
    4fd0:	00 e0       	ldi	r16, 0x00	; 0
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	a9 01       	movw	r20, r18
    4fd8:	60 e0       	ldi	r22, 0x00	; 0
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    4fe0:	e1 2c       	mov	r14, r1
    4fe2:	f1 2c       	mov	r15, r1
    4fe4:	01 e0       	ldi	r16, 0x01	; 1
    4fe6:	20 e0       	ldi	r18, 0x00	; 0
    4fe8:	30 e0       	ldi	r19, 0x00	; 0
    4fea:	40 ec       	ldi	r20, 0xC0	; 192
    4fec:	50 e0       	ldi	r21, 0x00	; 0
    4fee:	6d ec       	ldi	r22, 0xCD	; 205
    4ff0:	73 e0       	ldi	r23, 0x03	; 3
    4ff2:	84 e0       	ldi	r24, 0x04	; 4
    4ff4:	98 e2       	ldi	r25, 0x28	; 40
    4ff6:	0e 94 7e 15 	call	0x2afc	; 0x2afc <xTaskCreate>
	,  (const portCHAR *)"Get Temperature"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    4ffa:	00 00       	nop
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	0f 91       	pop	r16
    5002:	ff 90       	pop	r15
    5004:	ef 90       	pop	r14
    5006:	08 95       	ret

00005008 <getTemperature>:

/*-----------------------------------------------------------*/
void getTemperature( void *pvParameters )
{
    5008:	cf 93       	push	r28
    500a:	df 93       	push	r29
    500c:	cd b7       	in	r28, 0x3d	; 61
    500e:	de b7       	in	r29, 0x3e	; 62
    5010:	2a 97       	sbiw	r28, 0x0a	; 10
    5012:	0f b6       	in	r0, 0x3f	; 63
    5014:	f8 94       	cli
    5016:	de bf       	out	0x3e, r29	; 62
    5018:	0f be       	out	0x3f, r0	; 63
    501a:	cd bf       	out	0x3d, r28	; 61
    501c:	9a 87       	std	Y+10, r25	; 0x0a
    501e:	89 87       	std	Y+9, r24	; 0x09
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 500 ms
    5020:	88 e3       	ldi	r24, 0x38	; 56
    5022:	91 e0       	ldi	r25, 0x01	; 1
    5024:	a0 e0       	ldi	r26, 0x00	; 0
    5026:	b0 e0       	ldi	r27, 0x00	; 0
    5028:	89 83       	std	Y+1, r24	; 0x01
    502a:	9a 83       	std	Y+2, r25	; 0x02
    502c:	ab 83       	std	Y+3, r26	; 0x03
    502e:	bc 83       	std	Y+4, r27	; 0x04

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    5030:	0e 94 2f 19 	call	0x325e	; 0x325e <xTaskGetTickCount>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	8d 83       	std	Y+5, r24	; 0x05
    503a:	9e 83       	std	Y+6, r25	; 0x06
    503c:	af 83       	std	Y+7, r26	; 0x07
    503e:	b8 87       	std	Y+8, r27	; 0x08

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	9a 81       	ldd	r25, Y+2	; 0x02
    5044:	ab 81       	ldd	r26, Y+3	; 0x03
    5046:	bc 81       	ldd	r27, Y+4	; 0x04
    5048:	9e 01       	movw	r18, r28
    504a:	2b 5f       	subi	r18, 0xFB	; 251
    504c:	3f 4f       	sbci	r19, 0xFF	; 255
    504e:	ac 01       	movw	r20, r24
    5050:	bd 01       	movw	r22, r26
    5052:	c9 01       	movw	r24, r18
    5054:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <vTaskDelayUntil>
		puts("Calling getTemperature method.\n"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    5058:	8d ed       	ldi	r24, 0xDD	; 221
    505a:	93 e0       	ldi	r25, 0x03	; 3
    505c:	0e 94 31 39 	call	0x7262	; 0x7262 <puts>
		getTemperatureFromSensor();
    5060:	0e 94 05 03 	call	0x60a	; 0x60a <getTemperatureFromSensor>
	}
    5064:	ed cf       	rjmp	.-38     	; 0x5040 <getTemperature+0x38>

00005066 <initialiseSystem>:
}

/*-----------------------------------------------------------*/
void initialiseSystem()
{
    5066:	cf 93       	push	r28
    5068:	df 93       	push	r29
    506a:	cd b7       	in	r28, 0x3d	; 61
    506c:	de b7       	in	r29, 0x3e	; 62
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    506e:	81 e2       	ldi	r24, 0x21	; 33
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	21 e2       	ldi	r18, 0x21	; 33
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	f9 01       	movw	r30, r18
    5078:	20 81       	ld	r18, Z
    507a:	21 68       	ori	r18, 0x81	; 129
    507c:	fc 01       	movw	r30, r24
    507e:	20 83       	st	Z, r18
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    5080:	0e 94 70 03 	call	0x6e0	; 0x6e0 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_create(ser_USART0);
    5084:	80 e0       	ldi	r24, 0x00	; 0
    5086:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <stdio_create>
	// Let's create some tasks
	create_tasks_and_semaphores();
    508a:	84 df       	rcall	.-248    	; 0x4f94 <create_tasks_and_semaphores>
	
	if ( HIH8120_OK != hih8120_create())
    508c:	da d1       	rcall	.+948    	; 0x5442 <hih8120_create>
    508e:	88 23       	and	r24, r24
    5090:	99 f0       	breq	.+38     	; 0x50b8 <initialiseSystem+0x52>
	{
		printf("Temperature driver was failed to initialized. Result: %s\n",hih8120_create());
    5092:	d7 d1       	rcall	.+942    	; 0x5442 <hih8120_create>
    5094:	88 2f       	mov	r24, r24
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	29 2f       	mov	r18, r25
    509a:	2f 93       	push	r18
    509c:	8f 93       	push	r24
    509e:	8d ef       	ldi	r24, 0xFD	; 253
    50a0:	93 e0       	ldi	r25, 0x03	; 3
    50a2:	89 2f       	mov	r24, r25
    50a4:	8f 93       	push	r24
    50a6:	8d ef       	ldi	r24, 0xFD	; 253
    50a8:	93 e0       	ldi	r25, 0x03	; 3
    50aa:	8f 93       	push	r24
    50ac:	0e 94 1e 39 	call	0x723c	; 0x723c <printf>
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	0f 90       	pop	r0
	}

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    50b8:	85 e0       	ldi	r24, 0x05	; 5
    50ba:	65 d1       	rcall	.+714    	; 0x5386 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(1, NULL);
    50bc:	60 e0       	ldi	r22, 0x00	; 0
    50be:	70 e0       	ldi	r23, 0x00	; 0
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	3e d3       	rcall	.+1660   	; 0x5740 <lora_driver_create>
    50c4:	83 e0       	ldi	r24, 0x03	; 3
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    50c6:	0e 94 25 01 	call	0x24a	; 0x24a <lora_handler_create>
    50ca:	00 00       	nop
}
    50cc:	df 91       	pop	r29
    50ce:	cf 91       	pop	r28
    50d0:	08 95       	ret

000050d2 <main>:
    50d2:	cf 93       	push	r28

/*-----------------------------------------------------------*/
int main(void)
{
    50d4:	df 93       	push	r29
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
	initialiseSystem(); // Must be done as the very first thing!!
    50da:	c5 df       	rcall	.-118    	; 0x5066 <initialiseSystem>
	printf("Program Started!!\n");
    50dc:	87 e3       	ldi	r24, 0x37	; 55
    50de:	94 e0       	ldi	r25, 0x04	; 4
    50e0:	0e 94 31 39 	call	0x7262	; 0x7262 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    50e4:	0e 94 44 18 	call	0x3088	; 0x3088 <vTaskStartScheduler>

	/* Replace with your application code */
	while (1)
	{
	}
    50e8:	ff cf       	rjmp	.-2      	; 0x50e8 <main+0x16>

000050ea <__cmpsf2>:
    50ea:	71 d0       	rcall	.+226    	; 0x51ce <__fp_cmp>
    50ec:	08 f4       	brcc	.+2      	; 0x50f0 <__cmpsf2+0x6>
    50ee:	81 e0       	ldi	r24, 0x01	; 1
    50f0:	08 95       	ret

000050f2 <__fixsfsi>:
    50f2:	04 d0       	rcall	.+8      	; 0x50fc <__fixunssfsi>
    50f4:	68 94       	set
    50f6:	b1 11       	cpse	r27, r1
    50f8:	b1 c0       	rjmp	.+354    	; 0x525c <__fp_szero>
    50fa:	08 95       	ret

000050fc <__fixunssfsi>:
    50fc:	94 d0       	rcall	.+296    	; 0x5226 <__fp_splitA>
    50fe:	88 f0       	brcs	.+34     	; 0x5122 <__fixunssfsi+0x26>
    5100:	9f 57       	subi	r25, 0x7F	; 127
    5102:	90 f0       	brcs	.+36     	; 0x5128 <__fixunssfsi+0x2c>
    5104:	b9 2f       	mov	r27, r25
    5106:	99 27       	eor	r25, r25
    5108:	b7 51       	subi	r27, 0x17	; 23
    510a:	a0 f0       	brcs	.+40     	; 0x5134 <__fixunssfsi+0x38>
    510c:	d1 f0       	breq	.+52     	; 0x5142 <__fixunssfsi+0x46>
    510e:	66 0f       	add	r22, r22
    5110:	77 1f       	adc	r23, r23
    5112:	88 1f       	adc	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	1a f0       	brmi	.+6      	; 0x511e <__fixunssfsi+0x22>
    5118:	ba 95       	dec	r27
    511a:	c9 f7       	brne	.-14     	; 0x510e <__fixunssfsi+0x12>
    511c:	12 c0       	rjmp	.+36     	; 0x5142 <__fixunssfsi+0x46>
    511e:	b1 30       	cpi	r27, 0x01	; 1
    5120:	81 f0       	breq	.+32     	; 0x5142 <__fixunssfsi+0x46>
    5122:	9b d0       	rcall	.+310    	; 0x525a <__fp_zero>
    5124:	b1 e0       	ldi	r27, 0x01	; 1
    5126:	08 95       	ret
    5128:	98 c0       	rjmp	.+304    	; 0x525a <__fp_zero>
    512a:	67 2f       	mov	r22, r23
    512c:	78 2f       	mov	r23, r24
    512e:	88 27       	eor	r24, r24
    5130:	b8 5f       	subi	r27, 0xF8	; 248
    5132:	39 f0       	breq	.+14     	; 0x5142 <__fixunssfsi+0x46>
    5134:	b9 3f       	cpi	r27, 0xF9	; 249
    5136:	cc f3       	brlt	.-14     	; 0x512a <__fixunssfsi+0x2e>
    5138:	86 95       	lsr	r24
    513a:	77 95       	ror	r23
    513c:	67 95       	ror	r22
    513e:	b3 95       	inc	r27
    5140:	d9 f7       	brne	.-10     	; 0x5138 <__fixunssfsi+0x3c>
    5142:	3e f4       	brtc	.+14     	; 0x5152 <__fixunssfsi+0x56>
    5144:	90 95       	com	r25
    5146:	80 95       	com	r24
    5148:	70 95       	com	r23
    514a:	61 95       	neg	r22
    514c:	7f 4f       	sbci	r23, 0xFF	; 255
    514e:	8f 4f       	sbci	r24, 0xFF	; 255
    5150:	9f 4f       	sbci	r25, 0xFF	; 255
    5152:	08 95       	ret

00005154 <__floatunsisf>:
    5154:	e8 94       	clt
    5156:	09 c0       	rjmp	.+18     	; 0x516a <__floatsisf+0x12>

00005158 <__floatsisf>:
    5158:	97 fb       	bst	r25, 7
    515a:	3e f4       	brtc	.+14     	; 0x516a <__floatsisf+0x12>
    515c:	90 95       	com	r25
    515e:	80 95       	com	r24
    5160:	70 95       	com	r23
    5162:	61 95       	neg	r22
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	8f 4f       	sbci	r24, 0xFF	; 255
    5168:	9f 4f       	sbci	r25, 0xFF	; 255
    516a:	99 23       	and	r25, r25
    516c:	a9 f0       	breq	.+42     	; 0x5198 <__floatsisf+0x40>
    516e:	f9 2f       	mov	r31, r25
    5170:	96 e9       	ldi	r25, 0x96	; 150
    5172:	bb 27       	eor	r27, r27
    5174:	93 95       	inc	r25
    5176:	f6 95       	lsr	r31
    5178:	87 95       	ror	r24
    517a:	77 95       	ror	r23
    517c:	67 95       	ror	r22
    517e:	b7 95       	ror	r27
    5180:	f1 11       	cpse	r31, r1
    5182:	f8 cf       	rjmp	.-16     	; 0x5174 <__floatsisf+0x1c>
    5184:	fa f4       	brpl	.+62     	; 0x51c4 <__floatsisf+0x6c>
    5186:	bb 0f       	add	r27, r27
    5188:	11 f4       	brne	.+4      	; 0x518e <__floatsisf+0x36>
    518a:	60 ff       	sbrs	r22, 0
    518c:	1b c0       	rjmp	.+54     	; 0x51c4 <__floatsisf+0x6c>
    518e:	6f 5f       	subi	r22, 0xFF	; 255
    5190:	7f 4f       	sbci	r23, 0xFF	; 255
    5192:	8f 4f       	sbci	r24, 0xFF	; 255
    5194:	9f 4f       	sbci	r25, 0xFF	; 255
    5196:	16 c0       	rjmp	.+44     	; 0x51c4 <__floatsisf+0x6c>
    5198:	88 23       	and	r24, r24
    519a:	11 f0       	breq	.+4      	; 0x51a0 <__floatsisf+0x48>
    519c:	96 e9       	ldi	r25, 0x96	; 150
    519e:	11 c0       	rjmp	.+34     	; 0x51c2 <__floatsisf+0x6a>
    51a0:	77 23       	and	r23, r23
    51a2:	21 f0       	breq	.+8      	; 0x51ac <__floatsisf+0x54>
    51a4:	9e e8       	ldi	r25, 0x8E	; 142
    51a6:	87 2f       	mov	r24, r23
    51a8:	76 2f       	mov	r23, r22
    51aa:	05 c0       	rjmp	.+10     	; 0x51b6 <__floatsisf+0x5e>
    51ac:	66 23       	and	r22, r22
    51ae:	71 f0       	breq	.+28     	; 0x51cc <__floatsisf+0x74>
    51b0:	96 e8       	ldi	r25, 0x86	; 134
    51b2:	86 2f       	mov	r24, r22
    51b4:	70 e0       	ldi	r23, 0x00	; 0
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	2a f0       	brmi	.+10     	; 0x51c4 <__floatsisf+0x6c>
    51ba:	9a 95       	dec	r25
    51bc:	66 0f       	add	r22, r22
    51be:	77 1f       	adc	r23, r23
    51c0:	88 1f       	adc	r24, r24
    51c2:	da f7       	brpl	.-10     	; 0x51ba <__floatsisf+0x62>
    51c4:	88 0f       	add	r24, r24
    51c6:	96 95       	lsr	r25
    51c8:	87 95       	ror	r24
    51ca:	97 f9       	bld	r25, 7
    51cc:	08 95       	ret

000051ce <__fp_cmp>:
    51ce:	99 0f       	add	r25, r25
    51d0:	00 08       	sbc	r0, r0
    51d2:	55 0f       	add	r21, r21
    51d4:	aa 0b       	sbc	r26, r26
    51d6:	e0 e8       	ldi	r30, 0x80	; 128
    51d8:	fe ef       	ldi	r31, 0xFE	; 254
    51da:	16 16       	cp	r1, r22
    51dc:	17 06       	cpc	r1, r23
    51de:	e8 07       	cpc	r30, r24
    51e0:	f9 07       	cpc	r31, r25
    51e2:	c0 f0       	brcs	.+48     	; 0x5214 <__fp_cmp+0x46>
    51e4:	12 16       	cp	r1, r18
    51e6:	13 06       	cpc	r1, r19
    51e8:	e4 07       	cpc	r30, r20
    51ea:	f5 07       	cpc	r31, r21
    51ec:	98 f0       	brcs	.+38     	; 0x5214 <__fp_cmp+0x46>
    51ee:	62 1b       	sub	r22, r18
    51f0:	73 0b       	sbc	r23, r19
    51f2:	84 0b       	sbc	r24, r20
    51f4:	95 0b       	sbc	r25, r21
    51f6:	39 f4       	brne	.+14     	; 0x5206 <__fp_cmp+0x38>
    51f8:	0a 26       	eor	r0, r26
    51fa:	61 f0       	breq	.+24     	; 0x5214 <__fp_cmp+0x46>
    51fc:	23 2b       	or	r18, r19
    51fe:	24 2b       	or	r18, r20
    5200:	25 2b       	or	r18, r21
    5202:	21 f4       	brne	.+8      	; 0x520c <__fp_cmp+0x3e>
    5204:	08 95       	ret
    5206:	0a 26       	eor	r0, r26
    5208:	09 f4       	brne	.+2      	; 0x520c <__fp_cmp+0x3e>
    520a:	a1 40       	sbci	r26, 0x01	; 1
    520c:	a6 95       	lsr	r26
    520e:	8f ef       	ldi	r24, 0xFF	; 255
    5210:	81 1d       	adc	r24, r1
    5212:	81 1d       	adc	r24, r1
    5214:	08 95       	ret

00005216 <__fp_split3>:
    5216:	57 fd       	sbrc	r21, 7
    5218:	90 58       	subi	r25, 0x80	; 128
    521a:	44 0f       	add	r20, r20
    521c:	55 1f       	adc	r21, r21
    521e:	59 f0       	breq	.+22     	; 0x5236 <__fp_splitA+0x10>
    5220:	5f 3f       	cpi	r21, 0xFF	; 255
    5222:	71 f0       	breq	.+28     	; 0x5240 <__fp_splitA+0x1a>
    5224:	47 95       	ror	r20

00005226 <__fp_splitA>:
    5226:	88 0f       	add	r24, r24
    5228:	97 fb       	bst	r25, 7
    522a:	99 1f       	adc	r25, r25
    522c:	61 f0       	breq	.+24     	; 0x5246 <__fp_splitA+0x20>
    522e:	9f 3f       	cpi	r25, 0xFF	; 255
    5230:	79 f0       	breq	.+30     	; 0x5250 <__fp_splitA+0x2a>
    5232:	87 95       	ror	r24
    5234:	08 95       	ret
    5236:	12 16       	cp	r1, r18
    5238:	13 06       	cpc	r1, r19
    523a:	14 06       	cpc	r1, r20
    523c:	55 1f       	adc	r21, r21
    523e:	f2 cf       	rjmp	.-28     	; 0x5224 <__fp_split3+0xe>
    5240:	46 95       	lsr	r20
    5242:	f1 df       	rcall	.-30     	; 0x5226 <__fp_splitA>
    5244:	08 c0       	rjmp	.+16     	; 0x5256 <__fp_splitA+0x30>
    5246:	16 16       	cp	r1, r22
    5248:	17 06       	cpc	r1, r23
    524a:	18 06       	cpc	r1, r24
    524c:	99 1f       	adc	r25, r25
    524e:	f1 cf       	rjmp	.-30     	; 0x5232 <__fp_splitA+0xc>
    5250:	86 95       	lsr	r24
    5252:	71 05       	cpc	r23, r1
    5254:	61 05       	cpc	r22, r1
    5256:	08 94       	sec
    5258:	08 95       	ret

0000525a <__fp_zero>:
    525a:	e8 94       	clt

0000525c <__fp_szero>:
    525c:	bb 27       	eor	r27, r27
    525e:	66 27       	eor	r22, r22
    5260:	77 27       	eor	r23, r23
    5262:	cb 01       	movw	r24, r22
    5264:	97 f9       	bld	r25, 7
    5266:	08 95       	ret

00005268 <__gesf2>:
    5268:	b2 df       	rcall	.-156    	; 0x51ce <__fp_cmp>
    526a:	08 f4       	brcc	.+2      	; 0x526e <__gesf2+0x6>
    526c:	8f ef       	ldi	r24, 0xFF	; 255
    526e:	08 95       	ret

00005270 <__mulsf3>:
    5270:	0b d0       	rcall	.+22     	; 0x5288 <__mulsf3x>
    5272:	78 c0       	rjmp	.+240    	; 0x5364 <__fp_round>
    5274:	69 d0       	rcall	.+210    	; 0x5348 <__fp_pscA>
    5276:	28 f0       	brcs	.+10     	; 0x5282 <__mulsf3+0x12>
    5278:	6e d0       	rcall	.+220    	; 0x5356 <__fp_pscB>
    527a:	18 f0       	brcs	.+6      	; 0x5282 <__mulsf3+0x12>
    527c:	95 23       	and	r25, r21
    527e:	09 f0       	breq	.+2      	; 0x5282 <__mulsf3+0x12>
    5280:	5a c0       	rjmp	.+180    	; 0x5336 <__fp_inf>
    5282:	5f c0       	rjmp	.+190    	; 0x5342 <__fp_nan>
    5284:	11 24       	eor	r1, r1
    5286:	ea cf       	rjmp	.-44     	; 0x525c <__fp_szero>

00005288 <__mulsf3x>:
    5288:	c6 df       	rcall	.-116    	; 0x5216 <__fp_split3>
    528a:	a0 f3       	brcs	.-24     	; 0x5274 <__mulsf3+0x4>

0000528c <__mulsf3_pse>:
    528c:	95 9f       	mul	r25, r21
    528e:	d1 f3       	breq	.-12     	; 0x5284 <__mulsf3+0x14>
    5290:	95 0f       	add	r25, r21
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	55 1f       	adc	r21, r21
    5296:	62 9f       	mul	r22, r18
    5298:	f0 01       	movw	r30, r0
    529a:	72 9f       	mul	r23, r18
    529c:	bb 27       	eor	r27, r27
    529e:	f0 0d       	add	r31, r0
    52a0:	b1 1d       	adc	r27, r1
    52a2:	63 9f       	mul	r22, r19
    52a4:	aa 27       	eor	r26, r26
    52a6:	f0 0d       	add	r31, r0
    52a8:	b1 1d       	adc	r27, r1
    52aa:	aa 1f       	adc	r26, r26
    52ac:	64 9f       	mul	r22, r20
    52ae:	66 27       	eor	r22, r22
    52b0:	b0 0d       	add	r27, r0
    52b2:	a1 1d       	adc	r26, r1
    52b4:	66 1f       	adc	r22, r22
    52b6:	82 9f       	mul	r24, r18
    52b8:	22 27       	eor	r18, r18
    52ba:	b0 0d       	add	r27, r0
    52bc:	a1 1d       	adc	r26, r1
    52be:	62 1f       	adc	r22, r18
    52c0:	73 9f       	mul	r23, r19
    52c2:	b0 0d       	add	r27, r0
    52c4:	a1 1d       	adc	r26, r1
    52c6:	62 1f       	adc	r22, r18
    52c8:	83 9f       	mul	r24, r19
    52ca:	a0 0d       	add	r26, r0
    52cc:	61 1d       	adc	r22, r1
    52ce:	22 1f       	adc	r18, r18
    52d0:	74 9f       	mul	r23, r20
    52d2:	33 27       	eor	r19, r19
    52d4:	a0 0d       	add	r26, r0
    52d6:	61 1d       	adc	r22, r1
    52d8:	23 1f       	adc	r18, r19
    52da:	84 9f       	mul	r24, r20
    52dc:	60 0d       	add	r22, r0
    52de:	21 1d       	adc	r18, r1
    52e0:	82 2f       	mov	r24, r18
    52e2:	76 2f       	mov	r23, r22
    52e4:	6a 2f       	mov	r22, r26
    52e6:	11 24       	eor	r1, r1
    52e8:	9f 57       	subi	r25, 0x7F	; 127
    52ea:	50 40       	sbci	r21, 0x00	; 0
    52ec:	8a f0       	brmi	.+34     	; 0x5310 <__mulsf3_pse+0x84>
    52ee:	e1 f0       	breq	.+56     	; 0x5328 <__mulsf3_pse+0x9c>
    52f0:	88 23       	and	r24, r24
    52f2:	4a f0       	brmi	.+18     	; 0x5306 <__mulsf3_pse+0x7a>
    52f4:	ee 0f       	add	r30, r30
    52f6:	ff 1f       	adc	r31, r31
    52f8:	bb 1f       	adc	r27, r27
    52fa:	66 1f       	adc	r22, r22
    52fc:	77 1f       	adc	r23, r23
    52fe:	88 1f       	adc	r24, r24
    5300:	91 50       	subi	r25, 0x01	; 1
    5302:	50 40       	sbci	r21, 0x00	; 0
    5304:	a9 f7       	brne	.-22     	; 0x52f0 <__mulsf3_pse+0x64>
    5306:	9e 3f       	cpi	r25, 0xFE	; 254
    5308:	51 05       	cpc	r21, r1
    530a:	70 f0       	brcs	.+28     	; 0x5328 <__mulsf3_pse+0x9c>
    530c:	14 c0       	rjmp	.+40     	; 0x5336 <__fp_inf>
    530e:	a6 cf       	rjmp	.-180    	; 0x525c <__fp_szero>
    5310:	5f 3f       	cpi	r21, 0xFF	; 255
    5312:	ec f3       	brlt	.-6      	; 0x530e <__mulsf3_pse+0x82>
    5314:	98 3e       	cpi	r25, 0xE8	; 232
    5316:	dc f3       	brlt	.-10     	; 0x530e <__mulsf3_pse+0x82>
    5318:	86 95       	lsr	r24
    531a:	77 95       	ror	r23
    531c:	67 95       	ror	r22
    531e:	b7 95       	ror	r27
    5320:	f7 95       	ror	r31
    5322:	e7 95       	ror	r30
    5324:	9f 5f       	subi	r25, 0xFF	; 255
    5326:	c1 f7       	brne	.-16     	; 0x5318 <__mulsf3_pse+0x8c>
    5328:	fe 2b       	or	r31, r30
    532a:	88 0f       	add	r24, r24
    532c:	91 1d       	adc	r25, r1
    532e:	96 95       	lsr	r25
    5330:	87 95       	ror	r24
    5332:	97 f9       	bld	r25, 7
    5334:	08 95       	ret

00005336 <__fp_inf>:
    5336:	97 f9       	bld	r25, 7
    5338:	9f 67       	ori	r25, 0x7F	; 127
    533a:	80 e8       	ldi	r24, 0x80	; 128
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	08 95       	ret

00005342 <__fp_nan>:
    5342:	9f ef       	ldi	r25, 0xFF	; 255
    5344:	80 ec       	ldi	r24, 0xC0	; 192
    5346:	08 95       	ret

00005348 <__fp_pscA>:
    5348:	00 24       	eor	r0, r0
    534a:	0a 94       	dec	r0
    534c:	16 16       	cp	r1, r22
    534e:	17 06       	cpc	r1, r23
    5350:	18 06       	cpc	r1, r24
    5352:	09 06       	cpc	r0, r25
    5354:	08 95       	ret

00005356 <__fp_pscB>:
    5356:	00 24       	eor	r0, r0
    5358:	0a 94       	dec	r0
    535a:	12 16       	cp	r1, r18
    535c:	13 06       	cpc	r1, r19
    535e:	14 06       	cpc	r1, r20
    5360:	05 06       	cpc	r0, r21
    5362:	08 95       	ret

00005364 <__fp_round>:
    5364:	09 2e       	mov	r0, r25
    5366:	03 94       	inc	r0
    5368:	00 0c       	add	r0, r0
    536a:	11 f4       	brne	.+4      	; 0x5370 <__fp_round+0xc>
    536c:	88 23       	and	r24, r24
    536e:	52 f0       	brmi	.+20     	; 0x5384 <__fp_round+0x20>
    5370:	bb 0f       	add	r27, r27
    5372:	40 f4       	brcc	.+16     	; 0x5384 <__fp_round+0x20>
    5374:	bf 2b       	or	r27, r31
    5376:	11 f4       	brne	.+4      	; 0x537c <__fp_round+0x18>
    5378:	60 ff       	sbrs	r22, 0
    537a:	04 c0       	rjmp	.+8      	; 0x5384 <__fp_round+0x20>
    537c:	6f 5f       	subi	r22, 0xFF	; 255
    537e:	7f 4f       	sbci	r23, 0xFF	; 255
    5380:	8f 4f       	sbci	r24, 0xFF	; 255
    5382:	9f 4f       	sbci	r25, 0xFF	; 255
    5384:	08 95       	ret

00005386 <hal_create>:
    5386:	e5 e5       	ldi	r30, 0x55	; 85
    5388:	f9 e1       	ldi	r31, 0x19	; 25
    538a:	25 ef       	ldi	r18, 0xF5	; 245
    538c:	3e e2       	ldi	r19, 0x2E	; 46
    538e:	31 83       	std	Z+1, r19	; 0x01
    5390:	20 83       	st	Z, r18
    5392:	28 ef       	ldi	r18, 0xF8	; 248
    5394:	3e e2       	ldi	r19, 0x2E	; 46
    5396:	33 83       	std	Z+3, r19	; 0x03
    5398:	22 83       	std	Z+2, r18	; 0x02
    539a:	23 e0       	ldi	r18, 0x03	; 3
    539c:	3f e2       	ldi	r19, 0x2F	; 47
    539e:	35 83       	std	Z+5, r19	; 0x05
    53a0:	24 83       	std	Z+4, r18	; 0x04
    53a2:	27 e0       	ldi	r18, 0x07	; 7
    53a4:	3f e2       	ldi	r19, 0x2F	; 47
    53a6:	37 83       	std	Z+7, r19	; 0x07
    53a8:	26 83       	std	Z+6, r18	; 0x06
    53aa:	2d e0       	ldi	r18, 0x0D	; 13
    53ac:	3f e2       	ldi	r19, 0x2F	; 47
    53ae:	31 87       	std	Z+9, r19	; 0x09
    53b0:	20 87       	std	Z+8, r18	; 0x08
    53b2:	29 e1       	ldi	r18, 0x19	; 25
    53b4:	3f e2       	ldi	r19, 0x2F	; 47
    53b6:	33 87       	std	Z+11, r19	; 0x0b
    53b8:	22 87       	std	Z+10, r18	; 0x0a
    53ba:	2e e1       	ldi	r18, 0x1E	; 30
    53bc:	3f e2       	ldi	r19, 0x2F	; 47
    53be:	35 87       	std	Z+13, r19	; 0x0d
    53c0:	24 87       	std	Z+12, r18	; 0x0c
    53c2:	2a e2       	ldi	r18, 0x2A	; 42
    53c4:	3f e2       	ldi	r19, 0x2F	; 47
    53c6:	37 87       	std	Z+15, r19	; 0x0f
    53c8:	26 87       	std	Z+14, r18	; 0x0e
    53ca:	2a e0       	ldi	r18, 0x0A	; 10
    53cc:	3f e2       	ldi	r19, 0x2F	; 47
    53ce:	31 8b       	std	Z+17, r19	; 0x11
    53d0:	20 8b       	std	Z+16, r18	; 0x10
    53d2:	2f e2       	ldi	r18, 0x2F	; 47
    53d4:	3f e2       	ldi	r19, 0x2F	; 47
    53d6:	33 8b       	std	Z+19, r19	; 0x13
    53d8:	22 8b       	std	Z+18, r18	; 0x12
    53da:	2c e3       	ldi	r18, 0x3C	; 60
    53dc:	3f e2       	ldi	r19, 0x2F	; 47
    53de:	35 8b       	std	Z+21, r19	; 0x15
    53e0:	24 8b       	std	Z+20, r18	; 0x14
    53e2:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <status_leds_create>
    53e6:	08 95       	ret

000053e8 <_hihTwiCallback>:
    53e8:	65 30       	cpi	r22, 0x05	; 5
    53ea:	f1 f4       	brne	.+60     	; 0x5428 <_hihTwiCallback+0x40>
    53ec:	fa 01       	movw	r30, r20
    53ee:	80 81       	ld	r24, Z
    53f0:	8f 73       	andi	r24, 0x3F	; 63
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	98 2f       	mov	r25, r24
    53f6:	88 27       	eor	r24, r24
    53f8:	21 81       	ldd	r18, Z+1	; 0x01
    53fa:	82 2b       	or	r24, r18
    53fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    5400:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    5404:	82 81       	ldd	r24, Z+2	; 0x02
    5406:	f0 e4       	ldi	r31, 0x40	; 64
    5408:	8f 9f       	mul	r24, r31
    540a:	c0 01       	movw	r24, r0
    540c:	11 24       	eor	r1, r1
    540e:	fa 01       	movw	r30, r20
    5410:	23 81       	ldd	r18, Z+3	; 0x03
    5412:	26 95       	lsr	r18
    5414:	26 95       	lsr	r18
    5416:	82 2b       	or	r24, r18
    5418:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    541c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	80 93 02 18 	sts	0x1802, r24	; 0x801802 <_measuringIsReady>
    5426:	08 95       	ret
    5428:	64 30       	cpi	r22, 0x04	; 4
    542a:	51 f0       	breq	.+20     	; 0x5440 <_hihTwiCallback+0x58>
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	90 e4       	ldi	r25, 0x40	; 64
    5430:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    5434:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    5438:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    543c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    5440:	08 95       	ret

00005442 <hih8120_create>:
    5442:	0f 93       	push	r16
    5444:	1f 93       	push	r17
    5446:	04 ef       	ldi	r16, 0xF4	; 244
    5448:	19 e2       	ldi	r17, 0x29	; 41
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	34 e2       	ldi	r19, 0x24	; 36
    544e:	44 ef       	ldi	r20, 0xF4	; 244
    5450:	50 e0       	ldi	r21, 0x00	; 0
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	87 e2       	ldi	r24, 0x27	; 39
    5456:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <twiCreate>
    545a:	90 93 04 18 	sts	0x1804, r25	; 0x801804 <_hih8120Handler+0x1>
    545e:	80 93 03 18 	sts	0x1803, r24	; 0x801803 <_hih8120Handler>
    5462:	21 e0       	ldi	r18, 0x01	; 1
    5464:	89 2b       	or	r24, r25
    5466:	09 f0       	breq	.+2      	; 0x546a <hih8120_create+0x28>
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	82 2f       	mov	r24, r18
    546c:	1f 91       	pop	r17
    546e:	0f 91       	pop	r16
    5470:	08 95       	ret

00005472 <hih8120_wakeup>:
    5472:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <_hih8120Handler>
    5476:	90 91 04 18 	lds	r25, 0x1804	; 0x801804 <_hih8120Handler+0x1>
    547a:	00 97       	sbiw	r24, 0x00	; 0
    547c:	59 f0       	breq	.+22     	; 0x5494 <hih8120_wakeup+0x22>
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	60 e0       	ldi	r22, 0x00	; 0
    5482:	70 e0       	ldi	r23, 0x00	; 0
    5484:	0e 94 21 35 	call	0x6a42	; 0x6a42 <twiTransmit>
    5488:	84 30       	cpi	r24, 0x04	; 4
    548a:	31 f4       	brne	.+12     	; 0x5498 <hih8120_wakeup+0x26>
    548c:	10 92 02 18 	sts	0x1802, r1	; 0x801802 <_measuringIsReady>
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	08 95       	ret
    5494:	82 e0       	ldi	r24, 0x02	; 2
    5496:	08 95       	ret
    5498:	83 e0       	ldi	r24, 0x03	; 3
    549a:	08 95       	ret

0000549c <hih8120_measure>:
    549c:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <_hih8120Handler>
    54a0:	90 91 04 18 	lds	r25, 0x1804	; 0x801804 <_hih8120Handler+0x1>
    54a4:	00 97       	sbiw	r24, 0x00	; 0
    54a6:	39 f0       	breq	.+14     	; 0x54b6 <hih8120_measure+0x1a>
    54a8:	64 e0       	ldi	r22, 0x04	; 4
    54aa:	0e 94 6d 35 	call	0x6ada	; 0x6ada <twiReceive>
    54ae:	85 30       	cpi	r24, 0x05	; 5
    54b0:	21 f0       	breq	.+8      	; 0x54ba <hih8120_measure+0x1e>
    54b2:	83 e0       	ldi	r24, 0x03	; 3
    54b4:	08 95       	ret
    54b6:	82 e0       	ldi	r24, 0x02	; 2
    54b8:	08 95       	ret
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	08 95       	ret

000054be <hih8120_getTemperature>:
    54be:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    54c2:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	44 de       	rcall	.-888    	; 0x5154 <__floatunsisf>
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	45 e2       	ldi	r20, 0x25	; 37
    54d2:	53 e4       	ldi	r21, 0x43	; 67
    54d4:	cd de       	rcall	.-614    	; 0x5270 <__mulsf3>
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	38 ef       	ldi	r19, 0xF8	; 248
    54da:	4f e7       	ldi	r20, 0x7F	; 127
    54dc:	56 e4       	ldi	r21, 0x46	; 70
    54de:	0e 94 e5 36 	call	0x6dca	; 0x6dca <__divsf3>
    54e2:	20 e0       	ldi	r18, 0x00	; 0
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	40 e2       	ldi	r20, 0x20	; 32
    54e8:	52 e4       	ldi	r21, 0x42	; 66
    54ea:	0c 94 79 36 	jmp	0x6cf2	; 0x6cf2 <__subsf3>
    54ee:	08 95       	ret

000054f0 <hih8120_getTemperature_x10>:
    54f0:	e6 df       	rcall	.-52     	; 0x54be <hih8120_getTemperature>
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e2       	ldi	r20, 0x20	; 32
    54f8:	51 e4       	ldi	r21, 0x41	; 65
    54fa:	ba de       	rcall	.-652    	; 0x5270 <__mulsf3>
    54fc:	fa dd       	rcall	.-1036   	; 0x50f2 <__fixsfsi>
    54fe:	cb 01       	movw	r24, r22
    5500:	08 95       	ret

00005502 <_serialCallBack>:
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	1f 92       	push	r1
    550c:	1f 92       	push	r1
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
    5512:	8c 01       	movw	r16, r24
    5514:	19 82       	std	Y+1, r1	; 0x01
    5516:	2d c0       	rjmp	.+90     	; 0x5572 <_serialCallBack+0x70>
    5518:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <rec_buf_inp.2947>
    551c:	ec 32       	cpi	r30, 0x2C	; 44
    551e:	50 f4       	brcc	.+20     	; 0x5534 <_serialCallBack+0x32>
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	8e 0f       	add	r24, r30
    5524:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <rec_buf_inp.2947>
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	e5 56       	subi	r30, 0x65	; 101
    552c:	f7 4e       	sbci	r31, 0xE7	; 231
    552e:	8a 81       	ldd	r24, Y+2	; 0x02
    5530:	80 83       	st	Z, r24
    5532:	02 c0       	rjmp	.+4      	; 0x5538 <_serialCallBack+0x36>
    5534:	10 92 69 18 	sts	0x1869, r1	; 0x801869 <rec_buf_inp.2947>
    5538:	8a 81       	ldd	r24, Y+2	; 0x02
    553a:	8a 30       	cpi	r24, 0x0A	; 10
    553c:	d1 f4       	brne	.+52     	; 0x5572 <_serialCallBack+0x70>
    553e:	40 91 69 18 	lds	r20, 0x1869	; 0x801869 <rec_buf_inp.2947>
    5542:	50 e0       	ldi	r21, 0x00	; 0
    5544:	fa 01       	movw	r30, r20
    5546:	e7 56       	subi	r30, 0x67	; 103
    5548:	f7 4e       	sbci	r31, 0xE7	; 231
    554a:	10 82       	st	Z, r1
    554c:	41 50       	subi	r20, 0x01	; 1
    554e:	51 09       	sbc	r21, r1
    5550:	9e 01       	movw	r18, r28
    5552:	2f 5f       	subi	r18, 0xFF	; 255
    5554:	3f 4f       	sbci	r19, 0xFF	; 255
    5556:	6b e9       	ldi	r22, 0x9B	; 155
    5558:	78 e1       	ldi	r23, 0x18	; 24
    555a:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    555e:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    5562:	0e 94 b3 11 	call	0x2366	; 0x2366 <xStreamBufferSendFromISR>
    5566:	89 81       	ldd	r24, Y+1	; 0x01
    5568:	81 11       	cpse	r24, r1
    556a:	0e 94 c3 09 	call	0x1386	; 0x1386 <vPortYield>
    556e:	10 92 69 18 	sts	0x1869, r1	; 0x801869 <rec_buf_inp.2947>
    5572:	be 01       	movw	r22, r28
    5574:	6e 5f       	subi	r22, 0xFE	; 254
    5576:	7f 4f       	sbci	r23, 0xFF	; 255
    5578:	c8 01       	movw	r24, r16
    557a:	92 d5       	rcall	.+2852   	; 0x60a0 <serial_getByte>
    557c:	88 23       	and	r24, r24
    557e:	61 f2       	breq	.-104    	; 0x5518 <_serialCallBack+0x16>
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	1f 91       	pop	r17
    558a:	0f 91       	pop	r16
    558c:	08 95       	ret

0000558e <_uploadMessage>:
    558e:	0f 93       	push	r16
    5590:	1f 93       	push	r17
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	8c 01       	movw	r16, r24
    5598:	eb 01       	movw	r28, r22
    559a:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    559e:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    55a2:	0e 94 38 10 	call	0x2070	; 0x2070 <xStreamBufferReset>
    55a6:	b8 01       	movw	r22, r16
    55a8:	85 e0       	ldi	r24, 0x05	; 5
    55aa:	98 e1       	ldi	r25, 0x18	; 24
    55ac:	0e 94 ff 38 	call	0x71fe	; 0x71fe <strcpy>
    55b0:	20 97       	sbiw	r28, 0x00	; 0
    55b2:	79 f0       	breq	.+30     	; 0x55d2 <_uploadMessage+0x44>
    55b4:	e5 e0       	ldi	r30, 0x05	; 5
    55b6:	f8 e1       	ldi	r31, 0x18	; 24
    55b8:	01 90       	ld	r0, Z+
    55ba:	00 20       	and	r0, r0
    55bc:	e9 f7       	brne	.-6      	; 0x55b8 <_uploadMessage+0x2a>
    55be:	31 97       	sbiw	r30, 0x01	; 1
    55c0:	80 e2       	ldi	r24, 0x20	; 32
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	91 83       	std	Z+1, r25	; 0x01
    55c6:	80 83       	st	Z, r24
    55c8:	be 01       	movw	r22, r28
    55ca:	85 e0       	ldi	r24, 0x05	; 5
    55cc:	98 e1       	ldi	r25, 0x18	; 24
    55ce:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <strcat>
    55d2:	e5 e0       	ldi	r30, 0x05	; 5
    55d4:	f8 e1       	ldi	r31, 0x18	; 24
    55d6:	df 01       	movw	r26, r30
    55d8:	0d 90       	ld	r0, X+
    55da:	00 20       	and	r0, r0
    55dc:	e9 f7       	brne	.-6      	; 0x55d8 <_uploadMessage+0x4a>
    55de:	11 97       	sbiw	r26, 0x01	; 1
    55e0:	8d e0       	ldi	r24, 0x0D	; 13
    55e2:	9a e0       	ldi	r25, 0x0A	; 10
    55e4:	11 96       	adiw	r26, 0x01	; 1
    55e6:	9c 93       	st	X, r25
    55e8:	8e 93       	st	-X, r24
    55ea:	12 96       	adiw	r26, 0x02	; 2
    55ec:	1c 92       	st	X, r1
    55ee:	01 90       	ld	r0, Z+
    55f0:	00 20       	and	r0, r0
    55f2:	e9 f7       	brne	.-6      	; 0x55ee <_uploadMessage+0x60>
    55f4:	31 97       	sbiw	r30, 0x01	; 1
    55f6:	e5 50       	subi	r30, 0x05	; 5
    55f8:	f8 41       	sbci	r31, 0x18	; 24
    55fa:	ae 2f       	mov	r26, r30
    55fc:	85 e0       	ldi	r24, 0x05	; 5
    55fe:	98 e1       	ldi	r25, 0x18	; 24
    5600:	ac 01       	movw	r20, r24
    5602:	6a 2f       	mov	r22, r26
    5604:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <_rn2483_serial>
    5608:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <_rn2483_serial+0x1>
    560c:	f9 d4       	rcall	.+2546   	; 0x6000 <serial_sendBytes>
    560e:	81 11       	cpse	r24, r1
    5610:	11 c0       	rjmp	.+34     	; 0x5634 <_uploadMessage+0xa6>
    5612:	08 e2       	ldi	r16, 0x28	; 40
    5614:	15 e0       	ldi	r17, 0x05	; 5
    5616:	20 e0       	ldi	r18, 0x00	; 0
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	4d e2       	ldi	r20, 0x2D	; 45
    561c:	50 e0       	ldi	r21, 0x00	; 0
    561e:	65 ef       	ldi	r22, 0xF5	; 245
    5620:	78 e1       	ldi	r23, 0x18	; 24
    5622:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    5626:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    562a:	0e 94 9b 12 	call	0x2536	; 0x2536 <xStreamBufferReceive>
    562e:	85 ef       	ldi	r24, 0xF5	; 245
    5630:	98 e1       	ldi	r25, 0x18	; 24
    5632:	02 c0       	rjmp	.+4      	; 0x5638 <_uploadMessage+0xaa>
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	df 91       	pop	r29
    563a:	cf 91       	pop	r28
    563c:	1f 91       	pop	r17
    563e:	0f 91       	pop	r16
    5640:	08 95       	ret

00005642 <_reply2ReturnCode>:
    5642:	2f 92       	push	r2
    5644:	3f 92       	push	r3
    5646:	4f 92       	push	r4
    5648:	5f 92       	push	r5
    564a:	6f 92       	push	r6
    564c:	7f 92       	push	r7
    564e:	8f 92       	push	r8
    5650:	9f 92       	push	r9
    5652:	af 92       	push	r10
    5654:	bf 92       	push	r11
    5656:	cf 92       	push	r12
    5658:	df 92       	push	r13
    565a:	ef 92       	push	r14
    565c:	ff 92       	push	r15
    565e:	0f 93       	push	r16
    5660:	1f 93       	push	r17
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	5c 01       	movw	r10, r24
    5668:	fc 01       	movw	r30, r24
    566a:	01 90       	ld	r0, Z+
    566c:	00 20       	and	r0, r0
    566e:	e9 f7       	brne	.-6      	; 0x566a <_reply2ReturnCode+0x28>
    5670:	31 97       	sbiw	r30, 0x01	; 1
    5672:	6f 01       	movw	r12, r30
    5674:	c8 1a       	sub	r12, r24
    5676:	d9 0a       	sbc	r13, r25
    5678:	5c 2c       	mov	r5, r12
    567a:	0f 2e       	mov	r0, r31
    567c:	f2 e0       	ldi	r31, 0x02	; 2
    567e:	8f 2e       	mov	r8, r31
    5680:	f7 e0       	ldi	r31, 0x07	; 7
    5682:	9f 2e       	mov	r9, r31
    5684:	f0 2d       	mov	r31, r0
    5686:	e1 2c       	mov	r14, r1
    5688:	f1 2c       	mov	r15, r1
    568a:	4c 2c       	mov	r4, r12
    568c:	37 01       	movw	r6, r14
    568e:	f4 01       	movw	r30, r8
    5690:	01 81       	ldd	r16, Z+1	; 0x01
    5692:	12 81       	ldd	r17, Z+2	; 0x02
    5694:	e8 01       	movw	r28, r16
    5696:	09 90       	ld	r0, Y+
    5698:	00 20       	and	r0, r0
    569a:	e9 f7       	brne	.-6      	; 0x5696 <_reply2ReturnCode+0x54>
    569c:	21 97       	sbiw	r28, 0x01	; 1
    569e:	c0 1b       	sub	r28, r16
    56a0:	d1 0b       	sbc	r29, r17
    56a2:	3c 2e       	mov	r3, r28
    56a4:	f9 e0       	ldi	r31, 0x09	; 9
    56a6:	cf 16       	cp	r12, r31
    56a8:	d1 04       	cpc	r13, r1
    56aa:	58 f0       	brcs	.+22     	; 0x56c2 <_reply2ReturnCode+0x80>
    56ac:	f4 01       	movw	r30, r8
    56ae:	20 80       	ld	r2, Z
    56b0:	fe e0       	ldi	r31, 0x0E	; 14
    56b2:	2f 12       	cpse	r2, r31
    56b4:	06 c0       	rjmp	.+12     	; 0x56c2 <_reply2ReturnCode+0x80>
    56b6:	b8 01       	movw	r22, r16
    56b8:	c5 01       	movw	r24, r10
    56ba:	0e 94 cf 38 	call	0x719e	; 0x719e <strcasestr>
    56be:	89 2b       	or	r24, r25
    56c0:	09 f5       	brne	.+66     	; 0x5704 <_reply2ReturnCode+0xc2>
    56c2:	44 2d       	mov	r20, r4
    56c4:	35 14       	cp	r3, r5
    56c6:	08 f4       	brcc	.+2      	; 0x56ca <_reply2ReturnCode+0x88>
    56c8:	4c 2f       	mov	r20, r28
    56ca:	50 e0       	ldi	r21, 0x00	; 0
    56cc:	b8 01       	movw	r22, r16
    56ce:	c5 01       	movw	r24, r10
    56d0:	0e 94 06 39 	call	0x720c	; 0x720c <strncasecmp>
    56d4:	89 2b       	or	r24, r25
    56d6:	49 f4       	brne	.+18     	; 0x56ea <_reply2ReturnCode+0xa8>
    56d8:	f3 01       	movw	r30, r6
    56da:	ee 0f       	add	r30, r30
    56dc:	ff 1f       	adc	r31, r31
    56de:	e6 0d       	add	r30, r6
    56e0:	f7 1d       	adc	r31, r7
    56e2:	ee 5f       	subi	r30, 0xFE	; 254
    56e4:	f8 4f       	sbci	r31, 0xF8	; 248
    56e6:	20 80       	ld	r2, Z
    56e8:	0d c0       	rjmp	.+26     	; 0x5704 <_reply2ReturnCode+0xc2>
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	e8 1a       	sub	r14, r24
    56ee:	f8 0a       	sbc	r15, r24
    56f0:	e3 e0       	ldi	r30, 0x03	; 3
    56f2:	8e 0e       	add	r8, r30
    56f4:	91 1c       	adc	r9, r1
    56f6:	f1 e1       	ldi	r31, 0x11	; 17
    56f8:	ef 16       	cp	r14, r31
    56fa:	f1 04       	cpc	r15, r1
    56fc:	39 f6       	brne	.-114    	; 0x568c <_reply2ReturnCode+0x4a>
    56fe:	68 94       	set
    5700:	22 24       	eor	r2, r2
    5702:	24 f8       	bld	r2, 4
    5704:	82 2d       	mov	r24, r2
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	1f 91       	pop	r17
    570c:	0f 91       	pop	r16
    570e:	ff 90       	pop	r15
    5710:	ef 90       	pop	r14
    5712:	df 90       	pop	r13
    5714:	cf 90       	pop	r12
    5716:	bf 90       	pop	r11
    5718:	af 90       	pop	r10
    571a:	9f 90       	pop	r9
    571c:	8f 90       	pop	r8
    571e:	7f 90       	pop	r7
    5720:	6f 90       	pop	r6
    5722:	5f 90       	pop	r5
    5724:	4f 90       	pop	r4
    5726:	3f 90       	pop	r3
    5728:	2f 90       	pop	r2
    572a:	08 95       	ret

0000572c <_uploadMessageRc>:
    572c:	30 df       	rcall	.-416    	; 0x558e <_uploadMessage>
    572e:	89 cf       	rjmp	.-238    	; 0x5642 <_reply2ReturnCode>
    5730:	08 95       	ret

00005732 <lora_driver_flushBuffers>:
    5732:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    5736:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    573a:	0c 94 38 10 	jmp	0x2070	; 0x2070 <xStreamBufferReset>
    573e:	08 95       	ret

00005740 <lora_driver_create>:
    5740:	8f 92       	push	r8
    5742:	9f 92       	push	r9
    5744:	af 92       	push	r10
    5746:	cf 92       	push	r12
    5748:	ef 92       	push	r14
    574a:	0f 93       	push	r16
    574c:	1f 93       	push	r17
    574e:	cf 93       	push	r28
    5750:	c8 2f       	mov	r28, r24
    5752:	8b 01       	movw	r16, r22
    5754:	41 e0       	ldi	r20, 0x01	; 1
    5756:	60 e0       	ldi	r22, 0x00	; 0
    5758:	70 e0       	ldi	r23, 0x00	; 0
    575a:	88 ec       	ldi	r24, 0xC8	; 200
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <xStreamBufferGenericCreate>
    5762:	90 93 6d 18 	sts	0x186D, r25	; 0x80186d <_serialReplyBufferHandle+0x1>
    5766:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <_serialReplyBufferHandle>
    576a:	10 93 6b 18 	sts	0x186B, r17	; 0x80186b <_downlinkMessageBuffer+0x1>
    576e:	00 93 6a 18 	sts	0x186A, r16	; 0x80186a <_downlinkMessageBuffer>
    5772:	0f 2e       	mov	r0, r31
    5774:	f1 e8       	ldi	r31, 0x81	; 129
    5776:	8f 2e       	mov	r8, r31
    5778:	fa e2       	ldi	r31, 0x2A	; 42
    577a:	9f 2e       	mov	r9, r31
    577c:	f0 2d       	mov	r31, r0
    577e:	68 94       	set
    5780:	aa 24       	eor	r10, r10
    5782:	a6 f8       	bld	r10, 6
    5784:	68 94       	set
    5786:	cc 24       	eor	r12, r12
    5788:	c6 f8       	bld	r12, 6
    578a:	e1 2c       	mov	r14, r1
    578c:	00 e0       	ldi	r16, 0x00	; 0
    578e:	23 e0       	ldi	r18, 0x03	; 3
    5790:	40 e0       	ldi	r20, 0x00	; 0
    5792:	51 ee       	ldi	r21, 0xE1	; 225
    5794:	60 e0       	ldi	r22, 0x00	; 0
    5796:	70 e0       	ldi	r23, 0x00	; 0
    5798:	8c 2f       	mov	r24, r28
    579a:	74 d3       	rcall	.+1768   	; 0x5e84 <serial_create>
    579c:	90 93 6f 18 	sts	0x186F, r25	; 0x80186f <_rn2483_serial+0x1>
    57a0:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <_rn2483_serial>
    57a4:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <register_access+0x8>
    57a8:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <register_access+0x9>
    57ac:	64 e0       	ldi	r22, 0x04	; 4
    57ae:	87 e0       	ldi	r24, 0x07	; 7
    57b0:	91 e0       	ldi	r25, 0x01	; 1
    57b2:	19 95       	eicall
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ef 90       	pop	r14
    57bc:	cf 90       	pop	r12
    57be:	af 90       	pop	r10
    57c0:	9f 90       	pop	r9
    57c2:	8f 90       	pop	r8
    57c4:	08 95       	ret

000057c6 <lora_driver_resetRn2483>:
    57c6:	88 23       	and	r24, r24
    57c8:	49 f0       	breq	.+18     	; 0x57dc <lora_driver_resetRn2483+0x16>
    57ca:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <register_access+0x12>
    57ce:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <register_access+0x13>
    57d2:	64 e0       	ldi	r22, 0x04	; 4
    57d4:	88 e0       	ldi	r24, 0x08	; 8
    57d6:	91 e0       	ldi	r25, 0x01	; 1
    57d8:	19 95       	eicall
    57da:	08 95       	ret
    57dc:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <register_access+0x8>
    57e0:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <register_access+0x9>
    57e4:	64 e0       	ldi	r22, 0x04	; 4
    57e6:	88 e0       	ldi	r24, 0x08	; 8
    57e8:	91 e0       	ldi	r25, 0x01	; 1
    57ea:	19 95       	eicall
    57ec:	08 95       	ret

000057ee <lora_driver_rn2483FactoryReset>:
    57ee:	60 e0       	ldi	r22, 0x00	; 0
    57f0:	70 e0       	ldi	r23, 0x00	; 0
    57f2:	88 e8       	ldi	r24, 0x88	; 136
    57f4:	94 e0       	ldi	r25, 0x04	; 4
    57f6:	cb de       	rcall	.-618    	; 0x558e <_uploadMessage>
    57f8:	e5 ef       	ldi	r30, 0xF5	; 245
    57fa:	f8 e1       	ldi	r31, 0x18	; 24
    57fc:	01 90       	ld	r0, Z+
    57fe:	00 20       	and	r0, r0
    5800:	e9 f7       	brne	.-6      	; 0x57fc <lora_driver_rn2483FactoryReset+0xe>
    5802:	31 97       	sbiw	r30, 0x01	; 1
    5804:	e5 5f       	subi	r30, 0xF5	; 245
    5806:	f8 41       	sbci	r31, 0x18	; 24
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	75 97       	sbiw	r30, 0x15	; 21
    580c:	08 f0       	brcs	.+2      	; 0x5810 <lora_driver_rn2483FactoryReset+0x22>
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	08 95       	ret

00005812 <lora_driver_getRn2483Hweui>:
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	ec 01       	movw	r28, r24
    5818:	60 e0       	ldi	r22, 0x00	; 0
    581a:	70 e0       	ldi	r23, 0x00	; 0
    581c:	89 e9       	ldi	r24, 0x99	; 153
    581e:	94 e0       	ldi	r25, 0x04	; 4
    5820:	b6 de       	rcall	.-660    	; 0x558e <_uploadMessage>
    5822:	e5 ef       	ldi	r30, 0xF5	; 245
    5824:	f8 e1       	ldi	r31, 0x18	; 24
    5826:	01 90       	ld	r0, Z+
    5828:	00 20       	and	r0, r0
    582a:	e9 f7       	brne	.-6      	; 0x5826 <lora_driver_getRn2483Hweui+0x14>
    582c:	e6 50       	subi	r30, 0x06	; 6
    582e:	f9 41       	sbci	r31, 0x19	; 25
    5830:	39 f4       	brne	.+14     	; 0x5840 <lora_driver_getRn2483Hweui+0x2e>
    5832:	65 ef       	ldi	r22, 0xF5	; 245
    5834:	78 e1       	ldi	r23, 0x18	; 24
    5836:	ce 01       	movw	r24, r28
    5838:	0e 94 ff 38 	call	0x71fe	; 0x71fe <strcpy>
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	02 c0       	rjmp	.+4      	; 0x5844 <lora_driver_getRn2483Hweui+0x32>
    5840:	18 82       	st	Y, r1
    5842:	81 e0       	ldi	r24, 0x01	; 1
    5844:	df 91       	pop	r29
    5846:	cf 91       	pop	r28
    5848:	08 95       	ret

0000584a <lora_driver_setDeviceIdentifier>:
    584a:	fc 01       	movw	r30, r24
    584c:	01 90       	ld	r0, Z+
    584e:	00 20       	and	r0, r0
    5850:	e9 f7       	brne	.-6      	; 0x584c <lora_driver_setDeviceIdentifier+0x2>
    5852:	9f 01       	movw	r18, r30
    5854:	21 51       	subi	r18, 0x11	; 17
    5856:	31 09       	sbc	r19, r1
    5858:	28 17       	cp	r18, r24
    585a:	39 07       	cpc	r19, r25
    585c:	29 f4       	brne	.+10     	; 0x5868 <lora_driver_setDeviceIdentifier+0x1e>
    585e:	bc 01       	movw	r22, r24
    5860:	87 ec       	ldi	r24, 0xC7	; 199
    5862:	94 e0       	ldi	r25, 0x04	; 4
    5864:	63 cf       	rjmp	.-314    	; 0x572c <_uploadMessageRc>
    5866:	08 95       	ret
    5868:	89 e0       	ldi	r24, 0x09	; 9
    586a:	08 95       	ret

0000586c <lora_driver_setApplicationIdentifier>:
    586c:	fc 01       	movw	r30, r24
    586e:	01 90       	ld	r0, Z+
    5870:	00 20       	and	r0, r0
    5872:	e9 f7       	brne	.-6      	; 0x586e <lora_driver_setApplicationIdentifier+0x2>
    5874:	9f 01       	movw	r18, r30
    5876:	21 51       	subi	r18, 0x11	; 17
    5878:	31 09       	sbc	r19, r1
    587a:	28 17       	cp	r18, r24
    587c:	39 07       	cpc	r19, r25
    587e:	29 f4       	brne	.+10     	; 0x588a <lora_driver_setApplicationIdentifier+0x1e>
    5880:	bc 01       	movw	r22, r24
    5882:	86 ed       	ldi	r24, 0xD6	; 214
    5884:	94 e0       	ldi	r25, 0x04	; 4
    5886:	52 cf       	rjmp	.-348    	; 0x572c <_uploadMessageRc>
    5888:	08 95       	ret
    588a:	89 e0       	ldi	r24, 0x09	; 9
    588c:	08 95       	ret

0000588e <lora_driver_setApplicationKey>:
    588e:	fc 01       	movw	r30, r24
    5890:	01 90       	ld	r0, Z+
    5892:	00 20       	and	r0, r0
    5894:	e9 f7       	brne	.-6      	; 0x5890 <lora_driver_setApplicationKey+0x2>
    5896:	9f 01       	movw	r18, r30
    5898:	21 52       	subi	r18, 0x21	; 33
    589a:	31 09       	sbc	r19, r1
    589c:	28 17       	cp	r18, r24
    589e:	39 07       	cpc	r19, r25
    58a0:	29 f4       	brne	.+10     	; 0x58ac <lora_driver_setApplicationKey+0x1e>
    58a2:	bc 01       	movw	r22, r24
    58a4:	85 ee       	ldi	r24, 0xE5	; 229
    58a6:	94 e0       	ldi	r25, 0x04	; 4
    58a8:	41 cf       	rjmp	.-382    	; 0x572c <_uploadMessageRc>
    58aa:	08 95       	ret
    58ac:	89 e0       	ldi	r24, 0x09	; 9
    58ae:	08 95       	ret

000058b0 <lora_driver_saveMac>:
    58b0:	60 e0       	ldi	r22, 0x00	; 0
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	84 e2       	ldi	r24, 0x24	; 36
    58b6:	95 e0       	ldi	r25, 0x05	; 5
    58b8:	39 cf       	rjmp	.-398    	; 0x572c <_uploadMessageRc>
    58ba:	08 95       	ret

000058bc <lora_driver_join>:
    58bc:	0f 93       	push	r16
    58be:	1f 93       	push	r17
    58c0:	e8 2f       	mov	r30, r24
    58c2:	f0 e0       	ldi	r31, 0x00	; 0
    58c4:	ee 0f       	add	r30, r30
    58c6:	ff 1f       	adc	r31, r31
    58c8:	e2 50       	subi	r30, 0x02	; 2
    58ca:	f9 4f       	sbci	r31, 0xF9	; 249
    58cc:	60 81       	ld	r22, Z
    58ce:	71 81       	ldd	r23, Z+1	; 0x01
    58d0:	8d e2       	ldi	r24, 0x2D	; 45
    58d2:	95 e0       	ldi	r25, 0x05	; 5
    58d4:	2b df       	rcall	.-426    	; 0x572c <_uploadMessageRc>
    58d6:	81 11       	cpse	r24, r1
    58d8:	14 c0       	rjmp	.+40     	; 0x5902 <lora_driver_join+0x46>
    58da:	08 e2       	ldi	r16, 0x28	; 40
    58dc:	15 e0       	ldi	r17, 0x05	; 5
    58de:	20 e0       	ldi	r18, 0x00	; 0
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	4d e2       	ldi	r20, 0x2D	; 45
    58e4:	50 e0       	ldi	r21, 0x00	; 0
    58e6:	65 ef       	ldi	r22, 0xF5	; 245
    58e8:	78 e1       	ldi	r23, 0x18	; 24
    58ea:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    58ee:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    58f2:	0e 94 9b 12 	call	0x2536	; 0x2536 <xStreamBufferReceive>
    58f6:	88 23       	and	r24, r24
    58f8:	21 f0       	breq	.+8      	; 0x5902 <lora_driver_join+0x46>
    58fa:	85 ef       	ldi	r24, 0xF5	; 245
    58fc:	98 e1       	ldi	r25, 0x18	; 24
    58fe:	a1 de       	rcall	.-702    	; 0x5642 <_reply2ReturnCode>
    5900:	03 c0       	rjmp	.+6      	; 0x5908 <lora_driver_join+0x4c>
    5902:	85 ef       	ldi	r24, 0xF5	; 245
    5904:	98 e1       	ldi	r25, 0x18	; 24
    5906:	9d de       	rcall	.-710    	; 0x5642 <_reply2ReturnCode>
    5908:	1f 91       	pop	r17
    590a:	0f 91       	pop	r16
    590c:	08 95       	ret

0000590e <lora_driver_sendUploadMessage>:
    590e:	0f 93       	push	r16
    5910:	1f 93       	push	r17
    5912:	cf 93       	push	r28
    5914:	df 93       	push	r29
    5916:	1f 92       	push	r1
    5918:	cd b7       	in	r28, 0x3d	; 61
    591a:	de b7       	in	r29, 0x3e	; 62
    591c:	db 01       	movw	r26, r22
    591e:	11 96       	adiw	r26, 0x01	; 1
    5920:	9c 91       	ld	r25, X
    5922:	11 97       	sbiw	r26, 0x01	; 1
    5924:	95 31       	cpi	r25, 0x15	; 21
    5926:	08 f0       	brcs	.+2      	; 0x592a <lora_driver_sendUploadMessage+0x1c>
    5928:	b4 c0       	rjmp	.+360    	; 0x5a92 <lora_driver_sendUploadMessage+0x184>
    592a:	99 23       	and	r25, r25
    592c:	81 f1       	breq	.+96     	; 0x598e <lora_driver_sendUploadMessage+0x80>
    592e:	60 e0       	ldi	r22, 0x00	; 0
    5930:	70 e0       	ldi	r23, 0x00	; 0
    5932:	27 2f       	mov	r18, r23
    5934:	30 e0       	ldi	r19, 0x00	; 0
    5936:	46 2f       	mov	r20, r22
    5938:	50 e0       	ldi	r21, 0x00	; 0
    593a:	fd 01       	movw	r30, r26
    593c:	e4 0f       	add	r30, r20
    593e:	f5 1f       	adc	r31, r21
    5940:	92 81       	ldd	r25, Z+2	; 0x02
    5942:	92 95       	swap	r25
    5944:	9f 70       	andi	r25, 0x0F	; 15
    5946:	9a 30       	cpi	r25, 0x0A	; 10
    5948:	10 f0       	brcs	.+4      	; 0x594e <lora_driver_sendUploadMessage+0x40>
    594a:	99 5c       	subi	r25, 0xC9	; 201
    594c:	01 c0       	rjmp	.+2      	; 0x5950 <lora_driver_sendUploadMessage+0x42>
    594e:	90 5d       	subi	r25, 0xD0	; 208
    5950:	f9 01       	movw	r30, r18
    5952:	ea 57       	subi	r30, 0x7A	; 122
    5954:	f7 4e       	sbci	r31, 0xE7	; 231
    5956:	90 83       	st	Z, r25
    5958:	2f 5f       	subi	r18, 0xFF	; 255
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
    595c:	fd 01       	movw	r30, r26
    595e:	e4 0f       	add	r30, r20
    5960:	f5 1f       	adc	r31, r21
    5962:	92 81       	ldd	r25, Z+2	; 0x02
    5964:	9f 70       	andi	r25, 0x0F	; 15
    5966:	49 2f       	mov	r20, r25
    5968:	50 e0       	ldi	r21, 0x00	; 0
    596a:	4a 30       	cpi	r20, 0x0A	; 10
    596c:	51 05       	cpc	r21, r1
    596e:	14 f0       	brlt	.+4      	; 0x5974 <lora_driver_sendUploadMessage+0x66>
    5970:	99 5c       	subi	r25, 0xC9	; 201
    5972:	01 c0       	rjmp	.+2      	; 0x5976 <lora_driver_sendUploadMessage+0x68>
    5974:	90 5d       	subi	r25, 0xD0	; 208
    5976:	f9 01       	movw	r30, r18
    5978:	ea 57       	subi	r30, 0x7A	; 122
    597a:	f7 4e       	sbci	r31, 0xE7	; 231
    597c:	90 83       	st	Z, r25
    597e:	7e 5f       	subi	r23, 0xFE	; 254
    5980:	6f 5f       	subi	r22, 0xFF	; 255
    5982:	11 96       	adiw	r26, 0x01	; 1
    5984:	9c 91       	ld	r25, X
    5986:	11 97       	sbiw	r26, 0x01	; 1
    5988:	69 17       	cp	r22, r25
    598a:	98 f2       	brcs	.-90     	; 0x5932 <lora_driver_sendUploadMessage+0x24>
    598c:	01 c0       	rjmp	.+2      	; 0x5990 <lora_driver_sendUploadMessage+0x82>
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	e7 2f       	mov	r30, r23
    5992:	f0 e0       	ldi	r31, 0x00	; 0
    5994:	ea 57       	subi	r30, 0x7A	; 122
    5996:	f7 4e       	sbci	r31, 0xE7	; 231
    5998:	10 82       	st	Z, r1
    599a:	4c 91       	ld	r20, X
    599c:	81 11       	cpse	r24, r1
    599e:	03 c0       	rjmp	.+6      	; 0x59a6 <lora_driver_sendUploadMessage+0x98>
    59a0:	86 e3       	ldi	r24, 0x36	; 54
    59a2:	95 e0       	ldi	r25, 0x05	; 5
    59a4:	02 c0       	rjmp	.+4      	; 0x59aa <lora_driver_sendUploadMessage+0x9c>
    59a6:	88 e3       	ldi	r24, 0x38	; 56
    59a8:	95 e0       	ldi	r25, 0x05	; 5
    59aa:	26 e8       	ldi	r18, 0x86	; 134
    59ac:	38 e1       	ldi	r19, 0x18	; 24
    59ae:	3f 93       	push	r19
    59b0:	2f 93       	push	r18
    59b2:	1f 92       	push	r1
    59b4:	4f 93       	push	r20
    59b6:	9f 93       	push	r25
    59b8:	8f 93       	push	r24
    59ba:	8c e3       	ldi	r24, 0x3C	; 60
    59bc:	95 e0       	ldi	r25, 0x05	; 5
    59be:	9f 93       	push	r25
    59c0:	8f 93       	push	r24
    59c2:	88 ec       	ldi	r24, 0xC8	; 200
    59c4:	98 e1       	ldi	r25, 0x18	; 24
    59c6:	9f 93       	push	r25
    59c8:	8f 93       	push	r24
    59ca:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    59ce:	60 e0       	ldi	r22, 0x00	; 0
    59d0:	70 e0       	ldi	r23, 0x00	; 0
    59d2:	88 ec       	ldi	r24, 0xC8	; 200
    59d4:	98 e1       	ldi	r25, 0x18	; 24
    59d6:	aa de       	rcall	.-684    	; 0x572c <_uploadMessageRc>
    59d8:	0f b6       	in	r0, 0x3f	; 63
    59da:	f8 94       	cli
    59dc:	de bf       	out	0x3e, r29	; 62
    59de:	0f be       	out	0x3f, r0	; 63
    59e0:	cd bf       	out	0x3d, r28	; 61
    59e2:	81 11       	cpse	r24, r1
    59e4:	59 c0       	rjmp	.+178    	; 0x5a98 <lora_driver_sendUploadMessage+0x18a>
    59e6:	08 e2       	ldi	r16, 0x28	; 40
    59e8:	15 e0       	ldi	r17, 0x05	; 5
    59ea:	20 e0       	ldi	r18, 0x00	; 0
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	4d e2       	ldi	r20, 0x2D	; 45
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	65 ef       	ldi	r22, 0xF5	; 245
    59f4:	78 e1       	ldi	r23, 0x18	; 24
    59f6:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <_serialReplyBufferHandle>
    59fa:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <_serialReplyBufferHandle+0x1>
    59fe:	0e 94 9b 12 	call	0x2536	; 0x2536 <xStreamBufferReceive>
    5a02:	88 23       	and	r24, r24
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <lora_driver_sendUploadMessage+0xfa>
    5a06:	47 c0       	rjmp	.+142    	; 0x5a96 <lora_driver_sendUploadMessage+0x188>
    5a08:	85 ef       	ldi	r24, 0xF5	; 245
    5a0a:	98 e1       	ldi	r25, 0x18	; 24
    5a0c:	1a de       	rcall	.-972    	; 0x5642 <_reply2ReturnCode>
    5a0e:	8e 30       	cpi	r24, 0x0E	; 14
    5a10:	09 f0       	breq	.+2      	; 0x5a14 <lora_driver_sendUploadMessage+0x106>
    5a12:	42 c0       	rjmp	.+132    	; 0x5a98 <lora_driver_sendUploadMessage+0x18a>
    5a14:	87 e0       	ldi	r24, 0x07	; 7
    5a16:	89 83       	std	Y+1, r24	; 0x01
    5a18:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <_downlinkMessageBuffer>
    5a1c:	90 91 6b 18 	lds	r25, 0x186B	; 0x80186b <_downlinkMessageBuffer+0x1>
    5a20:	89 2b       	or	r24, r25
    5a22:	a9 f1       	breq	.+106    	; 0x5a8e <lora_driver_sendUploadMessage+0x180>
    5a24:	be 01       	movw	r22, r28
    5a26:	6f 5f       	subi	r22, 0xFF	; 255
    5a28:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2a:	85 ef       	ldi	r24, 0xF5	; 245
    5a2c:	98 e1       	ldi	r25, 0x18	; 24
    5a2e:	68 d1       	rcall	.+720    	; 0x5d00 <decode_port_no>
    5a30:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <_downlinkPayload>
    5a34:	e9 81       	ldd	r30, Y+1	; 0x01
    5a36:	f0 e0       	ldi	r31, 0x00	; 0
    5a38:	eb 50       	subi	r30, 0x0B	; 11
    5a3a:	f7 4e       	sbci	r31, 0xE7	; 231
    5a3c:	df 01       	movw	r26, r30
    5a3e:	0d 90       	ld	r0, X+
    5a40:	00 20       	and	r0, r0
    5a42:	e9 f7       	brne	.-6      	; 0x5a3e <lora_driver_sendUploadMessage+0x130>
    5a44:	11 97       	sbiw	r26, 0x01	; 1
    5a46:	ae 1b       	sub	r26, r30
    5a48:	bf 0b       	sbc	r27, r31
    5a4a:	aa 23       	and	r26, r26
    5a4c:	91 f0       	breq	.+36     	; 0x5a72 <lora_driver_sendUploadMessage+0x164>
    5a4e:	bb 27       	eor	r27, r27
    5a50:	cd 01       	movw	r24, r26
    5a52:	01 97       	sbiw	r24, 0x01	; 1
    5a54:	9c 01       	movw	r18, r24
    5a56:	12 f4       	brpl	.+4      	; 0x5a5c <lora_driver_sendUploadMessage+0x14e>
    5a58:	2f 5f       	subi	r18, 0xFF	; 255
    5a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a5c:	35 95       	asr	r19
    5a5e:	27 95       	ror	r18
    5a60:	20 93 71 18 	sts	0x1871, r18	; 0x801871 <_downlinkPayload+0x1>
    5a64:	af 01       	movw	r20, r30
    5a66:	4f 5f       	subi	r20, 0xFF	; 255
    5a68:	5f 4f       	sbci	r21, 0xFF	; 255
    5a6a:	64 e1       	ldi	r22, 0x14	; 20
    5a6c:	82 e7       	ldi	r24, 0x72	; 114
    5a6e:	98 e1       	ldi	r25, 0x18	; 24
    5a70:	73 d1       	rcall	.+742    	; 0x5d58 <decode_hexadecimal_string_bytes>
    5a72:	01 e0       	ldi	r16, 0x01	; 1
    5a74:	10 e0       	ldi	r17, 0x00	; 0
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	46 e1       	ldi	r20, 0x16	; 22
    5a7c:	50 e0       	ldi	r21, 0x00	; 0
    5a7e:	60 e7       	ldi	r22, 0x70	; 112
    5a80:	78 e1       	ldi	r23, 0x18	; 24
    5a82:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <_downlinkMessageBuffer>
    5a86:	90 91 6b 18 	lds	r25, 0x186B	; 0x80186b <_downlinkMessageBuffer+0x1>
    5a8a:	0e 94 df 10 	call	0x21be	; 0x21be <xStreamBufferSend>
    5a8e:	8e e0       	ldi	r24, 0x0E	; 14
    5a90:	03 c0       	rjmp	.+6      	; 0x5a98 <lora_driver_sendUploadMessage+0x18a>
    5a92:	84 e1       	ldi	r24, 0x14	; 20
    5a94:	01 c0       	rjmp	.+2      	; 0x5a98 <lora_driver_sendUploadMessage+0x18a>
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	0f 90       	pop	r0
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	0f 91       	pop	r16
    5aa2:	08 95       	ret

00005aa4 <lora_driver_setAdaptiveDataRate>:
    5aa4:	81 30       	cpi	r24, 0x01	; 1
    5aa6:	19 f0       	breq	.+6      	; 0x5aae <lora_driver_setAdaptiveDataRate+0xa>
    5aa8:	6c e4       	ldi	r22, 0x4C	; 76
    5aaa:	75 e0       	ldi	r23, 0x05	; 5
    5aac:	02 c0       	rjmp	.+4      	; 0x5ab2 <lora_driver_setAdaptiveDataRate+0xe>
    5aae:	65 e2       	ldi	r22, 0x25	; 37
    5ab0:	76 e0       	ldi	r23, 0x06	; 6
    5ab2:	80 e5       	ldi	r24, 0x50	; 80
    5ab4:	95 e0       	ldi	r25, 0x05	; 5
    5ab6:	3a ce       	rjmp	.-908    	; 0x572c <_uploadMessageRc>
    5ab8:	08 95       	ret

00005aba <lora_driver_setReceiveDelay>:
    5aba:	9f 93       	push	r25
    5abc:	8f 93       	push	r24
    5abe:	81 e8       	ldi	r24, 0x81	; 129
    5ac0:	95 e0       	ldi	r25, 0x05	; 5
    5ac2:	9f 93       	push	r25
    5ac4:	8f 93       	push	r24
    5ac6:	88 ec       	ldi	r24, 0xC8	; 200
    5ac8:	98 e1       	ldi	r25, 0x18	; 24
    5aca:	9f 93       	push	r25
    5acc:	8f 93       	push	r24
    5ace:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    5ad2:	60 e0       	ldi	r22, 0x00	; 0
    5ad4:	70 e0       	ldi	r23, 0x00	; 0
    5ad6:	88 ec       	ldi	r24, 0xC8	; 200
    5ad8:	98 e1       	ldi	r25, 0x18	; 24
    5ada:	28 de       	rcall	.-944    	; 0x572c <_uploadMessageRc>
    5adc:	0f 90       	pop	r0
    5ade:	0f 90       	pop	r0
    5ae0:	0f 90       	pop	r0
    5ae2:	0f 90       	pop	r0
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	08 95       	ret

00005aea <lora_driver_configureToEu868>:
    5aea:	2f 92       	push	r2
    5aec:	3f 92       	push	r3
    5aee:	4f 92       	push	r4
    5af0:	5f 92       	push	r5
    5af2:	6f 92       	push	r6
    5af4:	7f 92       	push	r7
    5af6:	8f 92       	push	r8
    5af8:	9f 92       	push	r9
    5afa:	af 92       	push	r10
    5afc:	bf 92       	push	r11
    5afe:	cf 92       	push	r12
    5b00:	df 92       	push	r13
    5b02:	ef 92       	push	r14
    5b04:	ff 92       	push	r15
    5b06:	0f 93       	push	r16
    5b08:	1f 93       	push	r17
    5b0a:	cf 93       	push	r28
    5b0c:	df 93       	push	r29
    5b0e:	cd b7       	in	r28, 0x3d	; 61
    5b10:	de b7       	in	r29, 0x3e	; 62
    5b12:	a0 97       	sbiw	r28, 0x20	; 32
    5b14:	0f b6       	in	r0, 0x3f	; 63
    5b16:	f8 94       	cli
    5b18:	de bf       	out	0x3e, r29	; 62
    5b1a:	0f be       	out	0x3f, r0	; 63
    5b1c:	cd bf       	out	0x3d, r28	; 61
    5b1e:	6e ea       	ldi	r22, 0xAE	; 174
    5b20:	75 e0       	ldi	r23, 0x05	; 5
    5b22:	8a eb       	ldi	r24, 0xBA	; 186
    5b24:	95 e0       	ldi	r25, 0x05	; 5
    5b26:	33 dd       	rcall	.-1434   	; 0x558e <_uploadMessage>
    5b28:	8c dd       	rcall	.-1256   	; 0x5642 <_reply2ReturnCode>
    5b2a:	81 11       	cpse	r24, r1
    5b2c:	a3 c0       	rjmp	.+326    	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5b2e:	80 e2       	ldi	r24, 0x20	; 32
    5b30:	e9 e4       	ldi	r30, 0x49	; 73
    5b32:	f4 e0       	ldi	r31, 0x04	; 4
    5b34:	de 01       	movw	r26, r28
    5b36:	11 96       	adiw	r26, 0x01	; 1
    5b38:	01 90       	ld	r0, Z+
    5b3a:	0d 92       	st	X+, r0
    5b3c:	8a 95       	dec	r24
    5b3e:	e1 f7       	brne	.-8      	; 0x5b38 <lora_driver_configureToEu868+0x4e>
    5b40:	9e 01       	movw	r18, r28
    5b42:	2f 5f       	subi	r18, 0xFF	; 255
    5b44:	3f 4f       	sbci	r19, 0xFF	; 255
    5b46:	69 01       	movw	r12, r18
    5b48:	e1 2c       	mov	r14, r1
    5b4a:	f1 2c       	mov	r15, r1
    5b4c:	0f 2e       	mov	r0, r31
    5b4e:	f6 ec       	ldi	r31, 0xC6	; 198
    5b50:	af 2e       	mov	r10, r31
    5b52:	f5 e0       	ldi	r31, 0x05	; 5
    5b54:	bf 2e       	mov	r11, r31
    5b56:	f0 2d       	mov	r31, r0
    5b58:	08 ec       	ldi	r16, 0xC8	; 200
    5b5a:	18 e1       	ldi	r17, 0x18	; 24
    5b5c:	0f 2e       	mov	r0, r31
    5b5e:	ff ed       	ldi	r31, 0xDF	; 223
    5b60:	4f 2e       	mov	r4, r31
    5b62:	f5 e0       	ldi	r31, 0x05	; 5
    5b64:	5f 2e       	mov	r5, r31
    5b66:	f0 2d       	mov	r31, r0
    5b68:	0f 2e       	mov	r0, r31
    5b6a:	f6 ef       	ldi	r31, 0xF6	; 246
    5b6c:	8f 2e       	mov	r8, r31
    5b6e:	f5 e0       	ldi	r31, 0x05	; 5
    5b70:	9f 2e       	mov	r9, r31
    5b72:	f0 2d       	mov	r31, r0
    5b74:	0f 2e       	mov	r0, r31
    5b76:	f0 e1       	ldi	r31, 0x10	; 16
    5b78:	6f 2e       	mov	r6, r31
    5b7a:	f6 e0       	ldi	r31, 0x06	; 6
    5b7c:	7f 2e       	mov	r7, r31
    5b7e:	f0 2d       	mov	r31, r0
    5b80:	3e 2c       	mov	r3, r14
    5b82:	2f 2c       	mov	r2, r15
    5b84:	ff 92       	push	r15
    5b86:	ef 92       	push	r14
    5b88:	bf 92       	push	r11
    5b8a:	af 92       	push	r10
    5b8c:	1f 93       	push	r17
    5b8e:	0f 93       	push	r16
    5b90:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	70 e0       	ldi	r23, 0x00	; 0
    5b98:	c8 01       	movw	r24, r16
    5b9a:	f9 dc       	rcall	.-1550   	; 0x558e <_uploadMessage>
    5b9c:	52 dd       	rcall	.-1372   	; 0x5642 <_reply2ReturnCode>
    5b9e:	0f 90       	pop	r0
    5ba0:	0f 90       	pop	r0
    5ba2:	0f 90       	pop	r0
    5ba4:	0f 90       	pop	r0
    5ba6:	0f 90       	pop	r0
    5ba8:	0f 90       	pop	r0
    5baa:	81 11       	cpse	r24, r1
    5bac:	63 c0       	rjmp	.+198    	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5bae:	32 e0       	ldi	r19, 0x02	; 2
    5bb0:	3e 15       	cp	r19, r14
    5bb2:	e8 f4       	brcc	.+58     	; 0x5bee <lora_driver_configureToEu868+0x104>
    5bb4:	f6 01       	movw	r30, r12
    5bb6:	83 81       	ldd	r24, Z+3	; 0x03
    5bb8:	8f 93       	push	r24
    5bba:	82 81       	ldd	r24, Z+2	; 0x02
    5bbc:	8f 93       	push	r24
    5bbe:	81 81       	ldd	r24, Z+1	; 0x01
    5bc0:	8f 93       	push	r24
    5bc2:	80 81       	ld	r24, Z
    5bc4:	8f 93       	push	r24
    5bc6:	ff 92       	push	r15
    5bc8:	ef 92       	push	r14
    5bca:	5f 92       	push	r5
    5bcc:	4f 92       	push	r4
    5bce:	1f 93       	push	r17
    5bd0:	0f 93       	push	r16
    5bd2:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	70 e0       	ldi	r23, 0x00	; 0
    5bda:	c8 01       	movw	r24, r16
    5bdc:	d8 dc       	rcall	.-1616   	; 0x558e <_uploadMessage>
    5bde:	31 dd       	rcall	.-1438   	; 0x5642 <_reply2ReturnCode>
    5be0:	0f b6       	in	r0, 0x3f	; 63
    5be2:	f8 94       	cli
    5be4:	de bf       	out	0x3e, r29	; 62
    5be6:	0f be       	out	0x3f, r0	; 63
    5be8:	cd bf       	out	0x3d, r28	; 61
    5bea:	81 11       	cpse	r24, r1
    5bec:	43 c0       	rjmp	.+134    	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5bee:	2f 92       	push	r2
    5bf0:	3f 92       	push	r3
    5bf2:	9f 92       	push	r9
    5bf4:	8f 92       	push	r8
    5bf6:	1f 93       	push	r17
    5bf8:	0f 93       	push	r16
    5bfa:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    5bfe:	60 e0       	ldi	r22, 0x00	; 0
    5c00:	70 e0       	ldi	r23, 0x00	; 0
    5c02:	c8 01       	movw	r24, r16
    5c04:	c4 dc       	rcall	.-1656   	; 0x558e <_uploadMessage>
    5c06:	1d dd       	rcall	.-1478   	; 0x5642 <_reply2ReturnCode>
    5c08:	0f 90       	pop	r0
    5c0a:	0f 90       	pop	r0
    5c0c:	0f 90       	pop	r0
    5c0e:	0f 90       	pop	r0
    5c10:	0f 90       	pop	r0
    5c12:	0f 90       	pop	r0
    5c14:	81 11       	cpse	r24, r1
    5c16:	2e c0       	rjmp	.+92     	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5c18:	2f 92       	push	r2
    5c1a:	3f 92       	push	r3
    5c1c:	7f 92       	push	r7
    5c1e:	6f 92       	push	r6
    5c20:	1f 93       	push	r17
    5c22:	0f 93       	push	r16
    5c24:	0e 94 61 39 	call	0x72c2	; 0x72c2 <sprintf>
    5c28:	60 e0       	ldi	r22, 0x00	; 0
    5c2a:	70 e0       	ldi	r23, 0x00	; 0
    5c2c:	c8 01       	movw	r24, r16
    5c2e:	af dc       	rcall	.-1698   	; 0x558e <_uploadMessage>
    5c30:	08 dd       	rcall	.-1520   	; 0x5642 <_reply2ReturnCode>
    5c32:	0f 90       	pop	r0
    5c34:	0f 90       	pop	r0
    5c36:	0f 90       	pop	r0
    5c38:	0f 90       	pop	r0
    5c3a:	0f 90       	pop	r0
    5c3c:	0f 90       	pop	r0
    5c3e:	81 11       	cpse	r24, r1
    5c40:	19 c0       	rjmp	.+50     	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5c42:	3f ef       	ldi	r19, 0xFF	; 255
    5c44:	e3 1a       	sub	r14, r19
    5c46:	f3 0a       	sbc	r15, r19
    5c48:	84 e0       	ldi	r24, 0x04	; 4
    5c4a:	c8 0e       	add	r12, r24
    5c4c:	d1 1c       	adc	r13, r1
    5c4e:	98 e0       	ldi	r25, 0x08	; 8
    5c50:	e9 16       	cp	r14, r25
    5c52:	f1 04       	cpc	r15, r1
    5c54:	09 f0       	breq	.+2      	; 0x5c58 <lora_driver_configureToEu868+0x16e>
    5c56:	94 cf       	rjmp	.-216    	; 0x5b80 <lora_driver_configureToEu868+0x96>
    5c58:	60 e0       	ldi	r22, 0x00	; 0
    5c5a:	70 e0       	ldi	r23, 0x00	; 0
    5c5c:	88 e2       	ldi	r24, 0x28	; 40
    5c5e:	96 e0       	ldi	r25, 0x06	; 6
    5c60:	96 dc       	rcall	.-1748   	; 0x558e <_uploadMessage>
    5c62:	ef dc       	rcall	.-1570   	; 0x5642 <_reply2ReturnCode>
    5c64:	81 11       	cpse	r24, r1
    5c66:	06 c0       	rjmp	.+12     	; 0x5c74 <lora_driver_configureToEu868+0x18a>
    5c68:	60 e0       	ldi	r22, 0x00	; 0
    5c6a:	70 e0       	ldi	r23, 0x00	; 0
    5c6c:	89 e3       	ldi	r24, 0x39	; 57
    5c6e:	96 e0       	ldi	r25, 0x06	; 6
    5c70:	8e dc       	rcall	.-1764   	; 0x558e <_uploadMessage>
    5c72:	e7 dc       	rcall	.-1586   	; 0x5642 <_reply2ReturnCode>
    5c74:	a0 96       	adiw	r28, 0x20	; 32
    5c76:	0f b6       	in	r0, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	0f be       	out	0x3f, r0	; 63
    5c7e:	cd bf       	out	0x3d, r28	; 61
    5c80:	df 91       	pop	r29
    5c82:	cf 91       	pop	r28
    5c84:	1f 91       	pop	r17
    5c86:	0f 91       	pop	r16
    5c88:	ff 90       	pop	r15
    5c8a:	ef 90       	pop	r14
    5c8c:	df 90       	pop	r13
    5c8e:	cf 90       	pop	r12
    5c90:	bf 90       	pop	r11
    5c92:	af 90       	pop	r10
    5c94:	9f 90       	pop	r9
    5c96:	8f 90       	pop	r8
    5c98:	7f 90       	pop	r7
    5c9a:	6f 90       	pop	r6
    5c9c:	5f 90       	pop	r5
    5c9e:	4f 90       	pop	r4
    5ca0:	3f 90       	pop	r3
    5ca2:	2f 90       	pop	r2
    5ca4:	08 95       	ret

00005ca6 <lora_driver_setOtaaIdentity>:
    5ca6:	ef 92       	push	r14
    5ca8:	ff 92       	push	r15
    5caa:	0f 93       	push	r16
    5cac:	1f 93       	push	r17
    5cae:	cf 93       	push	r28
    5cb0:	df 93       	push	r29
    5cb2:	ec 01       	movw	r28, r24
    5cb4:	8b 01       	movw	r16, r22
    5cb6:	7a 01       	movw	r14, r20
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	f4 de       	rcall	.-536    	; 0x5aa4 <lora_driver_setAdaptiveDataRate>
    5cbc:	81 11       	cpse	r24, r1
    5cbe:	0d c0       	rjmp	.+26     	; 0x5cda <lora_driver_setOtaaIdentity+0x34>
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	d4 dd       	rcall	.-1112   	; 0x586c <lora_driver_setApplicationIdentifier>
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	09 c0       	rjmp	.+18     	; 0x5cda <lora_driver_setOtaaIdentity+0x34>
    5cc8:	c8 01       	movw	r24, r16
    5cca:	e1 dd       	rcall	.-1086   	; 0x588e <lora_driver_setApplicationKey>
    5ccc:	81 11       	cpse	r24, r1
    5cce:	05 c0       	rjmp	.+10     	; 0x5cda <lora_driver_setOtaaIdentity+0x34>
    5cd0:	c7 01       	movw	r24, r14
    5cd2:	bb dd       	rcall	.-1162   	; 0x584a <lora_driver_setDeviceIdentifier>
    5cd4:	81 11       	cpse	r24, r1
    5cd6:	01 c0       	rjmp	.+2      	; 0x5cda <lora_driver_setOtaaIdentity+0x34>
    5cd8:	eb dd       	rcall	.-1066   	; 0x58b0 <lora_driver_saveMac>
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	1f 91       	pop	r17
    5ce0:	0f 91       	pop	r16
    5ce2:	ff 90       	pop	r15
    5ce4:	ef 90       	pop	r14
    5ce6:	08 95       	ret

00005ce8 <lora_driver_mapReturnCodeToText>:
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	fc 01       	movw	r30, r24
    5cec:	ee 0f       	add	r30, r30
    5cee:	ff 1f       	adc	r31, r31
    5cf0:	8e 0f       	add	r24, r30
    5cf2:	9f 1f       	adc	r25, r31
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	ee 5f       	subi	r30, 0xFE	; 254
    5cf8:	f8 4f       	sbci	r31, 0xF8	; 248
    5cfa:	81 81       	ldd	r24, Z+1	; 0x01
    5cfc:	92 81       	ldd	r25, Z+2	; 0x02
    5cfe:	08 95       	ret

00005d00 <decode_port_no>:
    5d00:	dc 01       	movw	r26, r24
    5d02:	00 97       	sbiw	r24, 0x00	; 0
    5d04:	29 f1       	breq	.+74     	; 0x5d50 <decode_port_no+0x50>
    5d06:	fb 01       	movw	r30, r22
    5d08:	20 81       	ld	r18, Z
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	01 90       	ld	r0, Z+
    5d0e:	00 20       	and	r0, r0
    5d10:	e9 f7       	brne	.-6      	; 0x5d0c <decode_port_no+0xc>
    5d12:	31 97       	sbiw	r30, 0x01	; 1
    5d14:	e8 1b       	sub	r30, r24
    5d16:	f9 0b       	sbc	r31, r25
    5d18:	82 2f       	mov	r24, r18
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	e8 17       	cp	r30, r24
    5d1e:	f9 07       	cpc	r31, r25
    5d20:	c8 f0       	brcs	.+50     	; 0x5d54 <decode_port_no+0x54>
    5d22:	80 e0       	ldi	r24, 0x00	; 0
    5d24:	08 c0       	rjmp	.+16     	; 0x5d36 <decode_port_no+0x36>
    5d26:	88 0f       	add	r24, r24
    5d28:	38 2f       	mov	r19, r24
    5d2a:	33 0f       	add	r19, r19
    5d2c:	33 0f       	add	r19, r19
    5d2e:	83 0f       	add	r24, r19
    5d30:	80 53       	subi	r24, 0x30	; 48
    5d32:	89 0f       	add	r24, r25
    5d34:	2f 5f       	subi	r18, 0xFF	; 255
    5d36:	fd 01       	movw	r30, r26
    5d38:	e2 0f       	add	r30, r18
    5d3a:	f1 1d       	adc	r31, r1
    5d3c:	90 81       	ld	r25, Z
    5d3e:	30 ed       	ldi	r19, 0xD0	; 208
    5d40:	39 0f       	add	r19, r25
    5d42:	3a 30       	cpi	r19, 0x0A	; 10
    5d44:	10 f4       	brcc	.+4      	; 0x5d4a <decode_port_no+0x4a>
    5d46:	91 11       	cpse	r25, r1
    5d48:	ee cf       	rjmp	.-36     	; 0x5d26 <decode_port_no+0x26>
    5d4a:	fb 01       	movw	r30, r22
    5d4c:	20 83       	st	Z, r18
    5d4e:	08 95       	ret
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	08 95       	ret
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	08 95       	ret

00005d58 <decode_hexadecimal_string_bytes>:
    5d58:	0f 93       	push	r16
    5d5a:	1f 93       	push	r17
    5d5c:	cf 93       	push	r28
    5d5e:	df 93       	push	r29
    5d60:	dc 01       	movw	r26, r24
    5d62:	ea 01       	movw	r28, r20
    5d64:	20 97       	sbiw	r28, 0x00	; 0
    5d66:	e1 f1       	breq	.+120    	; 0x5de0 <decode_hexadecimal_string_bytes+0x88>
    5d68:	fa 01       	movw	r30, r20
    5d6a:	01 90       	ld	r0, Z+
    5d6c:	00 20       	and	r0, r0
    5d6e:	e9 f7       	brne	.-6      	; 0x5d6a <decode_hexadecimal_string_bytes+0x12>
    5d70:	31 97       	sbiw	r30, 0x01	; 1
    5d72:	e4 1b       	sub	r30, r20
    5d74:	f5 0b       	sbc	r31, r21
    5d76:	32 97       	sbiw	r30, 0x02	; 2
    5d78:	10 f5       	brcc	.+68     	; 0x5dbe <decode_hexadecimal_string_bytes+0x66>
    5d7a:	32 c0       	rjmp	.+100    	; 0x5de0 <decode_hexadecimal_string_bytes+0x88>
    5d7c:	8d 01       	movw	r16, r26
    5d7e:	04 0f       	add	r16, r20
    5d80:	15 1f       	adc	r17, r21
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	ae 01       	movw	r20, r28
    5d86:	42 0f       	add	r20, r18
    5d88:	53 1f       	adc	r21, r19
    5d8a:	fa 01       	movw	r30, r20
    5d8c:	90 81       	ld	r25, Z
    5d8e:	91 34       	cpi	r25, 0x41	; 65
    5d90:	28 f0       	brcs	.+10     	; 0x5d9c <decode_hexadecimal_string_bytes+0x44>
    5d92:	97 53       	subi	r25, 0x37	; 55
    5d94:	59 2f       	mov	r21, r25
    5d96:	52 95       	swap	r21
    5d98:	50 7f       	andi	r21, 0xF0	; 240
    5d9a:	03 c0       	rjmp	.+6      	; 0x5da2 <decode_hexadecimal_string_bytes+0x4a>
    5d9c:	59 2f       	mov	r21, r25
    5d9e:	52 95       	swap	r21
    5da0:	50 7f       	andi	r21, 0xF0	; 240
    5da2:	2c 0f       	add	r18, r28
    5da4:	3d 1f       	adc	r19, r29
    5da6:	f9 01       	movw	r30, r18
    5da8:	91 81       	ldd	r25, Z+1	; 0x01
    5daa:	91 34       	cpi	r25, 0x41	; 65
    5dac:	10 f0       	brcs	.+4      	; 0x5db2 <decode_hexadecimal_string_bytes+0x5a>
    5dae:	97 53       	subi	r25, 0x37	; 55
    5db0:	01 c0       	rjmp	.+2      	; 0x5db4 <decode_hexadecimal_string_bytes+0x5c>
    5db2:	90 53       	subi	r25, 0x30	; 48
    5db4:	95 0f       	add	r25, r21
    5db6:	f8 01       	movw	r30, r16
    5db8:	90 83       	st	Z, r25
    5dba:	8f 5f       	subi	r24, 0xFF	; 255
    5dbc:	01 c0       	rjmp	.+2      	; 0x5dc0 <decode_hexadecimal_string_bytes+0x68>
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	28 2f       	mov	r18, r24
    5dc2:	22 0f       	add	r18, r18
    5dc4:	48 2f       	mov	r20, r24
    5dc6:	50 e0       	ldi	r21, 0x00	; 0
    5dc8:	fe 01       	movw	r30, r28
    5dca:	01 90       	ld	r0, Z+
    5dcc:	00 20       	and	r0, r0
    5dce:	e9 f7       	brne	.-6      	; 0x5dca <decode_hexadecimal_string_bytes+0x72>
    5dd0:	31 97       	sbiw	r30, 0x01	; 1
    5dd2:	ec 1b       	sub	r30, r28
    5dd4:	fd 0b       	sbc	r31, r29
    5dd6:	4e 17       	cp	r20, r30
    5dd8:	5f 07       	cpc	r21, r31
    5dda:	10 f4       	brcc	.+4      	; 0x5de0 <decode_hexadecimal_string_bytes+0x88>
    5ddc:	86 13       	cpse	r24, r22
    5dde:	ce cf       	rjmp	.-100    	; 0x5d7c <decode_hexadecimal_string_bytes+0x24>
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	08 95       	ret

00005dea <register_access_readRegister>:
    5dea:	fc 01       	movw	r30, r24
    5dec:	80 81       	ld	r24, Z
    5dee:	08 95       	ret

00005df0 <register_access_readBit>:
    5df0:	fc 01       	movw	r30, r24
    5df2:	20 81       	ld	r18, Z
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	02 c0       	rjmp	.+4      	; 0x5dfe <register_access_readBit+0xe>
    5dfa:	88 0f       	add	r24, r24
    5dfc:	99 1f       	adc	r25, r25
    5dfe:	6a 95       	dec	r22
    5e00:	e2 f7       	brpl	.-8      	; 0x5dfa <register_access_readBit+0xa>
    5e02:	82 23       	and	r24, r18
    5e04:	08 95       	ret

00005e06 <register_access_readBits>:
    5e06:	fc 01       	movw	r30, r24
    5e08:	80 81       	ld	r24, Z
    5e0a:	86 23       	and	r24, r22
    5e0c:	08 95       	ret

00005e0e <register_access_setRegister>:
    5e0e:	fc 01       	movw	r30, r24
    5e10:	60 83       	st	Z, r22
    5e12:	08 95       	ret

00005e14 <register_access_clearRegister>:
    5e14:	fc 01       	movw	r30, r24
    5e16:	10 82       	st	Z, r1
    5e18:	08 95       	ret

00005e1a <register_access_setBit>:
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	40 81       	ld	r20, Z
    5e1e:	21 e0       	ldi	r18, 0x01	; 1
    5e20:	30 e0       	ldi	r19, 0x00	; 0
    5e22:	02 c0       	rjmp	.+4      	; 0x5e28 <register_access_setBit+0xe>
    5e24:	22 0f       	add	r18, r18
    5e26:	33 1f       	adc	r19, r19
    5e28:	6a 95       	dec	r22
    5e2a:	e2 f7       	brpl	.-8      	; 0x5e24 <register_access_setBit+0xa>
    5e2c:	24 2b       	or	r18, r20
    5e2e:	20 83       	st	Z, r18
    5e30:	08 95       	ret

00005e32 <register_access_setBits>:
    5e32:	fc 01       	movw	r30, r24
    5e34:	20 81       	ld	r18, Z
    5e36:	62 2b       	or	r22, r18
    5e38:	60 83       	st	Z, r22
    5e3a:	08 95       	ret

00005e3c <register_access_toggleBit>:
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	40 81       	ld	r20, Z
    5e40:	21 e0       	ldi	r18, 0x01	; 1
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	02 c0       	rjmp	.+4      	; 0x5e4a <register_access_toggleBit+0xe>
    5e46:	22 0f       	add	r18, r18
    5e48:	33 1f       	adc	r19, r19
    5e4a:	6a 95       	dec	r22
    5e4c:	e2 f7       	brpl	.-8      	; 0x5e46 <register_access_toggleBit+0xa>
    5e4e:	24 27       	eor	r18, r20
    5e50:	20 83       	st	Z, r18
    5e52:	08 95       	ret

00005e54 <register_access_toggleBits>:
    5e54:	fc 01       	movw	r30, r24
    5e56:	20 81       	ld	r18, Z
    5e58:	62 27       	eor	r22, r18
    5e5a:	60 83       	st	Z, r22
    5e5c:	08 95       	ret

00005e5e <register_access_clearBit>:
    5e5e:	fc 01       	movw	r30, r24
    5e60:	90 81       	ld	r25, Z
    5e62:	21 e0       	ldi	r18, 0x01	; 1
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	02 c0       	rjmp	.+4      	; 0x5e6c <register_access_clearBit+0xe>
    5e68:	22 0f       	add	r18, r18
    5e6a:	33 1f       	adc	r19, r19
    5e6c:	6a 95       	dec	r22
    5e6e:	e2 f7       	brpl	.-8      	; 0x5e68 <register_access_clearBit+0xa>
    5e70:	20 95       	com	r18
    5e72:	29 23       	and	r18, r25
    5e74:	20 83       	st	Z, r18
    5e76:	08 95       	ret

00005e78 <register_access_clearBits>:
    5e78:	fc 01       	movw	r30, r24
    5e7a:	90 81       	ld	r25, Z
    5e7c:	60 95       	com	r22
    5e7e:	69 23       	and	r22, r25
    5e80:	60 83       	st	Z, r22
    5e82:	08 95       	ret

00005e84 <serial_create>:
    5e84:	2f 92       	push	r2
    5e86:	3f 92       	push	r3
    5e88:	4f 92       	push	r4
    5e8a:	5f 92       	push	r5
    5e8c:	6f 92       	push	r6
    5e8e:	7f 92       	push	r7
    5e90:	8f 92       	push	r8
    5e92:	9f 92       	push	r9
    5e94:	af 92       	push	r10
    5e96:	cf 92       	push	r12
    5e98:	ef 92       	push	r14
    5e9a:	ff 92       	push	r15
    5e9c:	0f 93       	push	r16
    5e9e:	1f 93       	push	r17
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
    5ea4:	cd b7       	in	r28, 0x3d	; 61
    5ea6:	de b7       	in	r29, 0x3e	; 62
    5ea8:	f8 2e       	mov	r15, r24
    5eaa:	2a 01       	movw	r4, r20
    5eac:	3b 01       	movw	r6, r22
    5eae:	88 e0       	ldi	r24, 0x08	; 8
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <malloc>
    5eb6:	8c 01       	movw	r16, r24
    5eb8:	8f 2d       	mov	r24, r15
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	88 0f       	add	r24, r24
    5ebe:	99 1f       	adc	r25, r25
    5ec0:	fc 01       	movw	r30, r24
    5ec2:	ee 5d       	subi	r30, 0xDE	; 222
    5ec4:	f6 4e       	sbci	r31, 0xE6	; 230
    5ec6:	11 83       	std	Z+1, r17	; 0x01
    5ec8:	00 83       	st	Z, r16
    5eca:	fc 01       	movw	r30, r24
    5ecc:	e6 5f       	subi	r30, 0xF6	; 246
    5ece:	fd 4f       	sbci	r31, 0xFD	; 253
    5ed0:	80 81       	ld	r24, Z
    5ed2:	91 81       	ldd	r25, Z+1	; 0x01
    5ed4:	d8 01       	movw	r26, r16
    5ed6:	8d 93       	st	X+, r24
    5ed8:	9c 93       	st	X, r25
    5eda:	6c 2d       	mov	r22, r12
    5edc:	70 e0       	ldi	r23, 0x00	; 0
    5ede:	84 e0       	ldi	r24, 0x04	; 4
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	0e 94 80 37 	call	0x6f00	; 0x6f00 <calloc>
    5ee6:	1c 01       	movw	r2, r24
    5ee8:	61 e0       	ldi	r22, 0x01	; 1
    5eea:	70 e0       	ldi	r23, 0x00	; 0
    5eec:	86 e0       	ldi	r24, 0x06	; 6
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	0e 94 80 37 	call	0x6f00	; 0x6f00 <calloc>
    5ef4:	7c 01       	movw	r14, r24
    5ef6:	4c 2d       	mov	r20, r12
    5ef8:	b1 01       	movw	r22, r2
    5efa:	df d6       	rcall	.+3518   	; 0x6cba <fifo_init>
    5efc:	f8 01       	movw	r30, r16
    5efe:	f5 82       	std	Z+5, r15	; 0x05
    5f00:	e4 82       	std	Z+4, r14	; 0x04
    5f02:	6a 2d       	mov	r22, r10
    5f04:	70 e0       	ldi	r23, 0x00	; 0
    5f06:	84 e0       	ldi	r24, 0x04	; 4
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	fa d7       	rcall	.+4084   	; 0x6f00 <calloc>
    5f0c:	1c 01       	movw	r2, r24
    5f0e:	61 e0       	ldi	r22, 0x01	; 1
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	86 e0       	ldi	r24, 0x06	; 6
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	f4 d7       	rcall	.+4072   	; 0x6f00 <calloc>
    5f18:	7c 01       	movw	r14, r24
    5f1a:	4a 2d       	mov	r20, r10
    5f1c:	b1 01       	movw	r22, r2
    5f1e:	cd d6       	rcall	.+3482   	; 0x6cba <fifo_init>
    5f20:	d8 01       	movw	r26, r16
    5f22:	13 96       	adiw	r26, 0x03	; 3
    5f24:	fc 92       	st	X, r15
    5f26:	ee 92       	st	-X, r14
    5f28:	12 97       	sbiw	r26, 0x02	; 2
    5f2a:	17 96       	adiw	r26, 0x07	; 7
    5f2c:	9c 92       	st	X, r9
    5f2e:	8e 92       	st	-X, r8
    5f30:	16 97       	sbiw	r26, 0x06	; 6
    5f32:	ff b6       	in	r15, 0x3f	; 63
    5f34:	f8 94       	cli
    5f36:	ed 91       	ld	r30, X+
    5f38:	fc 91       	ld	r31, X
    5f3a:	11 97       	sbiw	r26, 0x01	; 1
    5f3c:	36 97       	sbiw	r30, 0x06	; 6
    5f3e:	80 81       	ld	r24, Z
    5f40:	82 60       	ori	r24, 0x02	; 2
    5f42:	80 83       	st	Z, r24
    5f44:	8d 90       	ld	r8, X+
    5f46:	9c 90       	ld	r9, X
    5f48:	c3 01       	movw	r24, r6
    5f4a:	b2 01       	movw	r22, r4
    5f4c:	03 d9       	rcall	.-3578   	; 0x5154 <__floatunsisf>
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	51 e4       	ldi	r21, 0x41	; 65
    5f56:	8c d9       	rcall	.-3304   	; 0x5270 <__mulsf3>
    5f58:	9b 01       	movw	r18, r22
    5f5a:	ac 01       	movw	r20, r24
    5f5c:	60 e0       	ldi	r22, 0x00	; 0
    5f5e:	74 e2       	ldi	r23, 0x24	; 36
    5f60:	84 e7       	ldi	r24, 0x74	; 116
    5f62:	9b e4       	ldi	r25, 0x4B	; 75
    5f64:	32 d7       	rcall	.+3684   	; 0x6dca <__divsf3>
    5f66:	20 e0       	ldi	r18, 0x00	; 0
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	40 e8       	ldi	r20, 0x80	; 128
    5f6c:	5f e3       	ldi	r21, 0x3F	; 63
    5f6e:	c1 d6       	rcall	.+3458   	; 0x6cf2 <__subsf3>
    5f70:	c5 d8       	rcall	.-3702   	; 0x50fc <__fixunssfsi>
    5f72:	f4 01       	movw	r30, r8
    5f74:	32 97       	sbiw	r30, 0x02	; 2
    5f76:	60 83       	st	Z, r22
    5f78:	d8 01       	movw	r26, r16
    5f7a:	ed 91       	ld	r30, X+
    5f7c:	fc 91       	ld	r31, X
    5f7e:	11 97       	sbiw	r26, 0x01	; 1
    5f80:	35 97       	sbiw	r30, 0x05	; 5
    5f82:	88 e9       	ldi	r24, 0x98	; 152
    5f84:	80 83       	st	Z, r24
    5f86:	ed 91       	ld	r30, X+
    5f88:	fc 91       	ld	r31, X
    5f8a:	34 97       	sbiw	r30, 0x04	; 4
    5f8c:	86 e0       	ldi	r24, 0x06	; 6
    5f8e:	80 83       	st	Z, r24
    5f90:	ff be       	out	0x3f, r15	; 63
    5f92:	c8 01       	movw	r24, r16
    5f94:	df 91       	pop	r29
    5f96:	cf 91       	pop	r28
    5f98:	1f 91       	pop	r17
    5f9a:	0f 91       	pop	r16
    5f9c:	ff 90       	pop	r15
    5f9e:	ef 90       	pop	r14
    5fa0:	cf 90       	pop	r12
    5fa2:	af 90       	pop	r10
    5fa4:	9f 90       	pop	r9
    5fa6:	8f 90       	pop	r8
    5fa8:	7f 90       	pop	r7
    5faa:	6f 90       	pop	r6
    5fac:	5f 90       	pop	r5
    5fae:	4f 90       	pop	r4
    5fb0:	3f 90       	pop	r3
    5fb2:	2f 90       	pop	r2
    5fb4:	08 95       	ret

00005fb6 <serial_sendByte>:
    5fb6:	cf 93       	push	r28
    5fb8:	df 93       	push	r29
    5fba:	ec 01       	movw	r28, r24
    5fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    5fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    5fc0:	93 81       	ldd	r25, Z+3	; 0x03
    5fc2:	82 81       	ldd	r24, Z+2	; 0x02
    5fc4:	25 81       	ldd	r18, Z+5	; 0x05
    5fc6:	98 1b       	sub	r25, r24
    5fc8:	92 23       	and	r25, r18
    5fca:	84 81       	ldd	r24, Z+4	; 0x04
    5fcc:	98 17       	cp	r25, r24
    5fce:	a1 f0       	breq	.+40     	; 0x5ff8 <serial_sendByte+0x42>
    5fd0:	93 81       	ldd	r25, Z+3	; 0x03
    5fd2:	26 95       	lsr	r18
    5fd4:	29 23       	and	r18, r25
    5fd6:	a0 81       	ld	r26, Z
    5fd8:	b1 81       	ldd	r27, Z+1	; 0x01
    5fda:	a2 0f       	add	r26, r18
    5fdc:	b1 1d       	adc	r27, r1
    5fde:	6c 93       	st	X, r22
    5fe0:	9f 5f       	subi	r25, 0xFF	; 255
    5fe2:	25 81       	ldd	r18, Z+5	; 0x05
    5fe4:	92 23       	and	r25, r18
    5fe6:	93 83       	std	Z+3, r25	; 0x03
    5fe8:	e8 81       	ld	r30, Y
    5fea:	f9 81       	ldd	r31, Y+1	; 0x01
    5fec:	35 97       	sbiw	r30, 0x05	; 5
    5fee:	80 81       	ld	r24, Z
    5ff0:	80 62       	ori	r24, 0x20	; 32
    5ff2:	80 83       	st	Z, r24
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	01 c0       	rjmp	.+2      	; 0x5ffa <serial_sendByte+0x44>
    5ff8:	82 e0       	ldi	r24, 0x02	; 2
    5ffa:	df 91       	pop	r29
    5ffc:	cf 91       	pop	r28
    5ffe:	08 95       	ret

00006000 <serial_sendBytes>:
    6000:	ef 92       	push	r14
    6002:	ff 92       	push	r15
    6004:	0f 93       	push	r16
    6006:	1f 93       	push	r17
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
    600c:	7c 01       	movw	r14, r24
    600e:	dc 01       	movw	r26, r24
    6010:	12 96       	adiw	r26, 0x02	; 2
    6012:	ed 91       	ld	r30, X+
    6014:	fc 91       	ld	r31, X
    6016:	13 97       	sbiw	r26, 0x03	; 3
    6018:	93 81       	ldd	r25, Z+3	; 0x03
    601a:	82 81       	ldd	r24, Z+2	; 0x02
    601c:	98 1b       	sub	r25, r24
    601e:	85 81       	ldd	r24, Z+5	; 0x05
    6020:	98 23       	and	r25, r24
    6022:	84 81       	ldd	r24, Z+4	; 0x04
    6024:	89 1b       	sub	r24, r25
    6026:	86 17       	cp	r24, r22
    6028:	98 f1       	brcs	.+102    	; 0x6090 <serial_sendBytes+0x90>
    602a:	66 23       	and	r22, r22
    602c:	41 f1       	breq	.+80     	; 0x607e <serial_sendBytes+0x7e>
    602e:	84 2f       	mov	r24, r20
    6030:	95 2f       	mov	r25, r21
    6032:	dc 01       	movw	r26, r24
    6034:	61 50       	subi	r22, 0x01	; 1
    6036:	46 2f       	mov	r20, r22
    6038:	50 e0       	ldi	r21, 0x00	; 0
    603a:	4f 5f       	subi	r20, 0xFF	; 255
    603c:	5f 4f       	sbci	r21, 0xFF	; 255
    603e:	48 0f       	add	r20, r24
    6040:	59 1f       	adc	r21, r25
    6042:	e7 01       	movw	r28, r14
    6044:	ea 81       	ldd	r30, Y+2	; 0x02
    6046:	fb 81       	ldd	r31, Y+3	; 0x03
    6048:	93 81       	ldd	r25, Z+3	; 0x03
    604a:	82 81       	ldd	r24, Z+2	; 0x02
    604c:	25 81       	ldd	r18, Z+5	; 0x05
    604e:	98 1b       	sub	r25, r24
    6050:	92 23       	and	r25, r18
    6052:	84 81       	ldd	r24, Z+4	; 0x04
    6054:	98 17       	cp	r25, r24
    6056:	79 f0       	breq	.+30     	; 0x6076 <serial_sendBytes+0x76>
    6058:	8c 91       	ld	r24, X
    605a:	93 81       	ldd	r25, Z+3	; 0x03
    605c:	26 95       	lsr	r18
    605e:	29 23       	and	r18, r25
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	8b 01       	movw	r16, r22
    6066:	02 0f       	add	r16, r18
    6068:	11 1d       	adc	r17, r1
    606a:	e8 01       	movw	r28, r16
    606c:	88 83       	st	Y, r24
    606e:	9f 5f       	subi	r25, 0xFF	; 255
    6070:	85 81       	ldd	r24, Z+5	; 0x05
    6072:	98 23       	and	r25, r24
    6074:	93 83       	std	Z+3, r25	; 0x03
    6076:	11 96       	adiw	r26, 0x01	; 1
    6078:	a4 17       	cp	r26, r20
    607a:	b5 07       	cpc	r27, r21
    607c:	11 f7       	brne	.-60     	; 0x6042 <serial_sendBytes+0x42>
    607e:	d7 01       	movw	r26, r14
    6080:	ed 91       	ld	r30, X+
    6082:	fc 91       	ld	r31, X
    6084:	35 97       	sbiw	r30, 0x05	; 5
    6086:	80 81       	ld	r24, Z
    6088:	80 62       	ori	r24, 0x20	; 32
    608a:	80 83       	st	Z, r24
    608c:	80 e0       	ldi	r24, 0x00	; 0
    608e:	01 c0       	rjmp	.+2      	; 0x6092 <serial_sendBytes+0x92>
    6090:	82 e0       	ldi	r24, 0x02	; 2
    6092:	df 91       	pop	r29
    6094:	cf 91       	pop	r28
    6096:	1f 91       	pop	r17
    6098:	0f 91       	pop	r16
    609a:	ff 90       	pop	r15
    609c:	ef 90       	pop	r14
    609e:	08 95       	ret

000060a0 <serial_getByte>:
    60a0:	dc 01       	movw	r26, r24
    60a2:	14 96       	adiw	r26, 0x04	; 4
    60a4:	ed 91       	ld	r30, X+
    60a6:	fc 91       	ld	r31, X
    60a8:	15 97       	sbiw	r26, 0x05	; 5
    60aa:	93 81       	ldd	r25, Z+3	; 0x03
    60ac:	82 81       	ldd	r24, Z+2	; 0x02
    60ae:	98 17       	cp	r25, r24
    60b0:	89 f0       	breq	.+34     	; 0x60d4 <serial_getByte+0x34>
    60b2:	92 81       	ldd	r25, Z+2	; 0x02
    60b4:	85 81       	ldd	r24, Z+5	; 0x05
    60b6:	86 95       	lsr	r24
    60b8:	89 23       	and	r24, r25
    60ba:	a0 81       	ld	r26, Z
    60bc:	b1 81       	ldd	r27, Z+1	; 0x01
    60be:	a8 0f       	add	r26, r24
    60c0:	b1 1d       	adc	r27, r1
    60c2:	8c 91       	ld	r24, X
    60c4:	db 01       	movw	r26, r22
    60c6:	8c 93       	st	X, r24
    60c8:	9f 5f       	subi	r25, 0xFF	; 255
    60ca:	85 81       	ldd	r24, Z+5	; 0x05
    60cc:	98 23       	and	r25, r24
    60ce:	92 83       	std	Z+2, r25	; 0x02
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	08 95       	ret
    60d4:	83 e0       	ldi	r24, 0x03	; 3
    60d6:	08 95       	ret

000060d8 <__vector_25>:
    60d8:	1f 92       	push	r1
    60da:	0f 92       	push	r0
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	0f 92       	push	r0
    60e0:	11 24       	eor	r1, r1
    60e2:	0b b6       	in	r0, 0x3b	; 59
    60e4:	0f 92       	push	r0
    60e6:	2f 93       	push	r18
    60e8:	3f 93       	push	r19
    60ea:	4f 93       	push	r20
    60ec:	5f 93       	push	r21
    60ee:	6f 93       	push	r22
    60f0:	7f 93       	push	r23
    60f2:	8f 93       	push	r24
    60f4:	9f 93       	push	r25
    60f6:	af 93       	push	r26
    60f8:	bf 93       	push	r27
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	ef 93       	push	r30
    6100:	ff 93       	push	r31
    6102:	a0 91 22 19 	lds	r26, 0x1922	; 0x801922 <_ser_handle>
    6106:	b0 91 23 19 	lds	r27, 0x1923	; 0x801923 <_ser_handle+0x1>
    610a:	10 97       	sbiw	r26, 0x00	; 0
    610c:	11 f1       	breq	.+68     	; 0x6152 <__vector_25+0x7a>
    610e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6112:	14 96       	adiw	r26, 0x04	; 4
    6114:	ed 91       	ld	r30, X+
    6116:	fc 91       	ld	r31, X
    6118:	15 97       	sbiw	r26, 0x05	; 5
    611a:	93 81       	ldd	r25, Z+3	; 0x03
    611c:	82 81       	ldd	r24, Z+2	; 0x02
    611e:	25 81       	ldd	r18, Z+5	; 0x05
    6120:	98 1b       	sub	r25, r24
    6122:	92 23       	and	r25, r18
    6124:	84 81       	ldd	r24, Z+4	; 0x04
    6126:	98 17       	cp	r25, r24
    6128:	61 f0       	breq	.+24     	; 0x6142 <__vector_25+0x6a>
    612a:	83 81       	ldd	r24, Z+3	; 0x03
    612c:	26 95       	lsr	r18
    612e:	28 23       	and	r18, r24
    6130:	c0 81       	ld	r28, Z
    6132:	d1 81       	ldd	r29, Z+1	; 0x01
    6134:	c2 0f       	add	r28, r18
    6136:	d1 1d       	adc	r29, r1
    6138:	68 83       	st	Y, r22
    613a:	8f 5f       	subi	r24, 0xFF	; 255
    613c:	95 81       	ldd	r25, Z+5	; 0x05
    613e:	89 23       	and	r24, r25
    6140:	83 83       	std	Z+3, r24	; 0x03
    6142:	16 96       	adiw	r26, 0x06	; 6
    6144:	ed 91       	ld	r30, X+
    6146:	fc 91       	ld	r31, X
    6148:	17 97       	sbiw	r26, 0x07	; 7
    614a:	30 97       	sbiw	r30, 0x00	; 0
    614c:	11 f0       	breq	.+4      	; 0x6152 <__vector_25+0x7a>
    614e:	cd 01       	movw	r24, r26
    6150:	19 95       	eicall
    6152:	ff 91       	pop	r31
    6154:	ef 91       	pop	r30
    6156:	df 91       	pop	r29
    6158:	cf 91       	pop	r28
    615a:	bf 91       	pop	r27
    615c:	af 91       	pop	r26
    615e:	9f 91       	pop	r25
    6160:	8f 91       	pop	r24
    6162:	7f 91       	pop	r23
    6164:	6f 91       	pop	r22
    6166:	5f 91       	pop	r21
    6168:	4f 91       	pop	r20
    616a:	3f 91       	pop	r19
    616c:	2f 91       	pop	r18
    616e:	0f 90       	pop	r0
    6170:	0b be       	out	0x3b, r0	; 59
    6172:	0f 90       	pop	r0
    6174:	0f be       	out	0x3f, r0	; 63
    6176:	0f 90       	pop	r0
    6178:	1f 90       	pop	r1
    617a:	18 95       	reti

0000617c <__vector_26>:
    617c:	1f 92       	push	r1
    617e:	0f 92       	push	r0
    6180:	0f b6       	in	r0, 0x3f	; 63
    6182:	0f 92       	push	r0
    6184:	11 24       	eor	r1, r1
    6186:	0b b6       	in	r0, 0x3b	; 59
    6188:	0f 92       	push	r0
    618a:	2f 93       	push	r18
    618c:	8f 93       	push	r24
    618e:	9f 93       	push	r25
    6190:	af 93       	push	r26
    6192:	bf 93       	push	r27
    6194:	ef 93       	push	r30
    6196:	ff 93       	push	r31
    6198:	e0 91 22 19 	lds	r30, 0x1922	; 0x801922 <_ser_handle>
    619c:	f0 91 23 19 	lds	r31, 0x1923	; 0x801923 <_ser_handle+0x1>
    61a0:	30 97       	sbiw	r30, 0x00	; 0
    61a2:	b9 f0       	breq	.+46     	; 0x61d2 <__vector_26+0x56>
    61a4:	02 80       	ldd	r0, Z+2	; 0x02
    61a6:	f3 81       	ldd	r31, Z+3	; 0x03
    61a8:	e0 2d       	mov	r30, r0
    61aa:	93 81       	ldd	r25, Z+3	; 0x03
    61ac:	82 81       	ldd	r24, Z+2	; 0x02
    61ae:	98 17       	cp	r25, r24
    61b0:	b1 f0       	breq	.+44     	; 0x61de <__vector_26+0x62>
    61b2:	92 81       	ldd	r25, Z+2	; 0x02
    61b4:	85 81       	ldd	r24, Z+5	; 0x05
    61b6:	28 2f       	mov	r18, r24
    61b8:	26 95       	lsr	r18
    61ba:	29 23       	and	r18, r25
    61bc:	a0 81       	ld	r26, Z
    61be:	b1 81       	ldd	r27, Z+1	; 0x01
    61c0:	a2 0f       	add	r26, r18
    61c2:	b1 1d       	adc	r27, r1
    61c4:	2c 91       	ld	r18, X
    61c6:	9f 5f       	subi	r25, 0xFF	; 255
    61c8:	89 23       	and	r24, r25
    61ca:	82 83       	std	Z+2, r24	; 0x02
    61cc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    61d0:	0b c0       	rjmp	.+22     	; 0x61e8 <__vector_26+0x6c>
    61d2:	e1 ec       	ldi	r30, 0xC1	; 193
    61d4:	f0 e0       	ldi	r31, 0x00	; 0
    61d6:	80 81       	ld	r24, Z
    61d8:	8f 7d       	andi	r24, 0xDF	; 223
    61da:	80 83       	st	Z, r24
    61dc:	05 c0       	rjmp	.+10     	; 0x61e8 <__vector_26+0x6c>
    61de:	e1 ec       	ldi	r30, 0xC1	; 193
    61e0:	f0 e0       	ldi	r31, 0x00	; 0
    61e2:	80 81       	ld	r24, Z
    61e4:	8f 7d       	andi	r24, 0xDF	; 223
    61e6:	80 83       	st	Z, r24
    61e8:	ff 91       	pop	r31
    61ea:	ef 91       	pop	r30
    61ec:	bf 91       	pop	r27
    61ee:	af 91       	pop	r26
    61f0:	9f 91       	pop	r25
    61f2:	8f 91       	pop	r24
    61f4:	2f 91       	pop	r18
    61f6:	0f 90       	pop	r0
    61f8:	0b be       	out	0x3b, r0	; 59
    61fa:	0f 90       	pop	r0
    61fc:	0f be       	out	0x3f, r0	; 63
    61fe:	0f 90       	pop	r0
    6200:	1f 90       	pop	r1
    6202:	18 95       	reti

00006204 <__vector_36>:
    6204:	1f 92       	push	r1
    6206:	0f 92       	push	r0
    6208:	0f b6       	in	r0, 0x3f	; 63
    620a:	0f 92       	push	r0
    620c:	11 24       	eor	r1, r1
    620e:	0b b6       	in	r0, 0x3b	; 59
    6210:	0f 92       	push	r0
    6212:	2f 93       	push	r18
    6214:	3f 93       	push	r19
    6216:	4f 93       	push	r20
    6218:	5f 93       	push	r21
    621a:	6f 93       	push	r22
    621c:	7f 93       	push	r23
    621e:	8f 93       	push	r24
    6220:	9f 93       	push	r25
    6222:	af 93       	push	r26
    6224:	bf 93       	push	r27
    6226:	cf 93       	push	r28
    6228:	df 93       	push	r29
    622a:	ef 93       	push	r30
    622c:	ff 93       	push	r31
    622e:	a0 91 24 19 	lds	r26, 0x1924	; 0x801924 <_ser_handle+0x2>
    6232:	b0 91 25 19 	lds	r27, 0x1925	; 0x801925 <_ser_handle+0x3>
    6236:	10 97       	sbiw	r26, 0x00	; 0
    6238:	11 f1       	breq	.+68     	; 0x627e <__vector_36+0x7a>
    623a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    623e:	14 96       	adiw	r26, 0x04	; 4
    6240:	ed 91       	ld	r30, X+
    6242:	fc 91       	ld	r31, X
    6244:	15 97       	sbiw	r26, 0x05	; 5
    6246:	93 81       	ldd	r25, Z+3	; 0x03
    6248:	82 81       	ldd	r24, Z+2	; 0x02
    624a:	25 81       	ldd	r18, Z+5	; 0x05
    624c:	98 1b       	sub	r25, r24
    624e:	92 23       	and	r25, r18
    6250:	84 81       	ldd	r24, Z+4	; 0x04
    6252:	98 17       	cp	r25, r24
    6254:	61 f0       	breq	.+24     	; 0x626e <__vector_36+0x6a>
    6256:	83 81       	ldd	r24, Z+3	; 0x03
    6258:	26 95       	lsr	r18
    625a:	28 23       	and	r18, r24
    625c:	c0 81       	ld	r28, Z
    625e:	d1 81       	ldd	r29, Z+1	; 0x01
    6260:	c2 0f       	add	r28, r18
    6262:	d1 1d       	adc	r29, r1
    6264:	68 83       	st	Y, r22
    6266:	8f 5f       	subi	r24, 0xFF	; 255
    6268:	95 81       	ldd	r25, Z+5	; 0x05
    626a:	89 23       	and	r24, r25
    626c:	83 83       	std	Z+3, r24	; 0x03
    626e:	16 96       	adiw	r26, 0x06	; 6
    6270:	ed 91       	ld	r30, X+
    6272:	fc 91       	ld	r31, X
    6274:	17 97       	sbiw	r26, 0x07	; 7
    6276:	30 97       	sbiw	r30, 0x00	; 0
    6278:	11 f0       	breq	.+4      	; 0x627e <__vector_36+0x7a>
    627a:	cd 01       	movw	r24, r26
    627c:	19 95       	eicall
    627e:	ff 91       	pop	r31
    6280:	ef 91       	pop	r30
    6282:	df 91       	pop	r29
    6284:	cf 91       	pop	r28
    6286:	bf 91       	pop	r27
    6288:	af 91       	pop	r26
    628a:	9f 91       	pop	r25
    628c:	8f 91       	pop	r24
    628e:	7f 91       	pop	r23
    6290:	6f 91       	pop	r22
    6292:	5f 91       	pop	r21
    6294:	4f 91       	pop	r20
    6296:	3f 91       	pop	r19
    6298:	2f 91       	pop	r18
    629a:	0f 90       	pop	r0
    629c:	0b be       	out	0x3b, r0	; 59
    629e:	0f 90       	pop	r0
    62a0:	0f be       	out	0x3f, r0	; 63
    62a2:	0f 90       	pop	r0
    62a4:	1f 90       	pop	r1
    62a6:	18 95       	reti

000062a8 <__vector_37>:
    62a8:	1f 92       	push	r1
    62aa:	0f 92       	push	r0
    62ac:	0f b6       	in	r0, 0x3f	; 63
    62ae:	0f 92       	push	r0
    62b0:	11 24       	eor	r1, r1
    62b2:	0b b6       	in	r0, 0x3b	; 59
    62b4:	0f 92       	push	r0
    62b6:	2f 93       	push	r18
    62b8:	8f 93       	push	r24
    62ba:	9f 93       	push	r25
    62bc:	af 93       	push	r26
    62be:	bf 93       	push	r27
    62c0:	ef 93       	push	r30
    62c2:	ff 93       	push	r31
    62c4:	e0 91 24 19 	lds	r30, 0x1924	; 0x801924 <_ser_handle+0x2>
    62c8:	f0 91 25 19 	lds	r31, 0x1925	; 0x801925 <_ser_handle+0x3>
    62cc:	30 97       	sbiw	r30, 0x00	; 0
    62ce:	b9 f0       	breq	.+46     	; 0x62fe <__vector_37+0x56>
    62d0:	02 80       	ldd	r0, Z+2	; 0x02
    62d2:	f3 81       	ldd	r31, Z+3	; 0x03
    62d4:	e0 2d       	mov	r30, r0
    62d6:	93 81       	ldd	r25, Z+3	; 0x03
    62d8:	82 81       	ldd	r24, Z+2	; 0x02
    62da:	98 17       	cp	r25, r24
    62dc:	b1 f0       	breq	.+44     	; 0x630a <__vector_37+0x62>
    62de:	92 81       	ldd	r25, Z+2	; 0x02
    62e0:	85 81       	ldd	r24, Z+5	; 0x05
    62e2:	28 2f       	mov	r18, r24
    62e4:	26 95       	lsr	r18
    62e6:	29 23       	and	r18, r25
    62e8:	a0 81       	ld	r26, Z
    62ea:	b1 81       	ldd	r27, Z+1	; 0x01
    62ec:	a2 0f       	add	r26, r18
    62ee:	b1 1d       	adc	r27, r1
    62f0:	2c 91       	ld	r18, X
    62f2:	9f 5f       	subi	r25, 0xFF	; 255
    62f4:	89 23       	and	r24, r25
    62f6:	82 83       	std	Z+2, r24	; 0x02
    62f8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    62fc:	0b c0       	rjmp	.+22     	; 0x6314 <__vector_37+0x6c>
    62fe:	e9 ec       	ldi	r30, 0xC9	; 201
    6300:	f0 e0       	ldi	r31, 0x00	; 0
    6302:	80 81       	ld	r24, Z
    6304:	8f 7d       	andi	r24, 0xDF	; 223
    6306:	80 83       	st	Z, r24
    6308:	05 c0       	rjmp	.+10     	; 0x6314 <__vector_37+0x6c>
    630a:	e9 ec       	ldi	r30, 0xC9	; 201
    630c:	f0 e0       	ldi	r31, 0x00	; 0
    630e:	80 81       	ld	r24, Z
    6310:	8f 7d       	andi	r24, 0xDF	; 223
    6312:	80 83       	st	Z, r24
    6314:	ff 91       	pop	r31
    6316:	ef 91       	pop	r30
    6318:	bf 91       	pop	r27
    631a:	af 91       	pop	r26
    631c:	9f 91       	pop	r25
    631e:	8f 91       	pop	r24
    6320:	2f 91       	pop	r18
    6322:	0f 90       	pop	r0
    6324:	0b be       	out	0x3b, r0	; 59
    6326:	0f 90       	pop	r0
    6328:	0f be       	out	0x3f, r0	; 63
    632a:	0f 90       	pop	r0
    632c:	1f 90       	pop	r1
    632e:	18 95       	reti

00006330 <__vector_51>:
    6330:	1f 92       	push	r1
    6332:	0f 92       	push	r0
    6334:	0f b6       	in	r0, 0x3f	; 63
    6336:	0f 92       	push	r0
    6338:	11 24       	eor	r1, r1
    633a:	0b b6       	in	r0, 0x3b	; 59
    633c:	0f 92       	push	r0
    633e:	2f 93       	push	r18
    6340:	3f 93       	push	r19
    6342:	4f 93       	push	r20
    6344:	5f 93       	push	r21
    6346:	6f 93       	push	r22
    6348:	7f 93       	push	r23
    634a:	8f 93       	push	r24
    634c:	9f 93       	push	r25
    634e:	af 93       	push	r26
    6350:	bf 93       	push	r27
    6352:	cf 93       	push	r28
    6354:	df 93       	push	r29
    6356:	ef 93       	push	r30
    6358:	ff 93       	push	r31
    635a:	a0 91 26 19 	lds	r26, 0x1926	; 0x801926 <_ser_handle+0x4>
    635e:	b0 91 27 19 	lds	r27, 0x1927	; 0x801927 <_ser_handle+0x5>
    6362:	10 97       	sbiw	r26, 0x00	; 0
    6364:	11 f1       	breq	.+68     	; 0x63aa <__vector_51+0x7a>
    6366:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    636a:	14 96       	adiw	r26, 0x04	; 4
    636c:	ed 91       	ld	r30, X+
    636e:	fc 91       	ld	r31, X
    6370:	15 97       	sbiw	r26, 0x05	; 5
    6372:	93 81       	ldd	r25, Z+3	; 0x03
    6374:	82 81       	ldd	r24, Z+2	; 0x02
    6376:	25 81       	ldd	r18, Z+5	; 0x05
    6378:	98 1b       	sub	r25, r24
    637a:	92 23       	and	r25, r18
    637c:	84 81       	ldd	r24, Z+4	; 0x04
    637e:	98 17       	cp	r25, r24
    6380:	61 f0       	breq	.+24     	; 0x639a <__vector_51+0x6a>
    6382:	83 81       	ldd	r24, Z+3	; 0x03
    6384:	26 95       	lsr	r18
    6386:	28 23       	and	r18, r24
    6388:	c0 81       	ld	r28, Z
    638a:	d1 81       	ldd	r29, Z+1	; 0x01
    638c:	c2 0f       	add	r28, r18
    638e:	d1 1d       	adc	r29, r1
    6390:	68 83       	st	Y, r22
    6392:	8f 5f       	subi	r24, 0xFF	; 255
    6394:	95 81       	ldd	r25, Z+5	; 0x05
    6396:	89 23       	and	r24, r25
    6398:	83 83       	std	Z+3, r24	; 0x03
    639a:	16 96       	adiw	r26, 0x06	; 6
    639c:	ed 91       	ld	r30, X+
    639e:	fc 91       	ld	r31, X
    63a0:	17 97       	sbiw	r26, 0x07	; 7
    63a2:	30 97       	sbiw	r30, 0x00	; 0
    63a4:	11 f0       	breq	.+4      	; 0x63aa <__vector_51+0x7a>
    63a6:	cd 01       	movw	r24, r26
    63a8:	19 95       	eicall
    63aa:	ff 91       	pop	r31
    63ac:	ef 91       	pop	r30
    63ae:	df 91       	pop	r29
    63b0:	cf 91       	pop	r28
    63b2:	bf 91       	pop	r27
    63b4:	af 91       	pop	r26
    63b6:	9f 91       	pop	r25
    63b8:	8f 91       	pop	r24
    63ba:	7f 91       	pop	r23
    63bc:	6f 91       	pop	r22
    63be:	5f 91       	pop	r21
    63c0:	4f 91       	pop	r20
    63c2:	3f 91       	pop	r19
    63c4:	2f 91       	pop	r18
    63c6:	0f 90       	pop	r0
    63c8:	0b be       	out	0x3b, r0	; 59
    63ca:	0f 90       	pop	r0
    63cc:	0f be       	out	0x3f, r0	; 63
    63ce:	0f 90       	pop	r0
    63d0:	1f 90       	pop	r1
    63d2:	18 95       	reti

000063d4 <__vector_52>:
    63d4:	1f 92       	push	r1
    63d6:	0f 92       	push	r0
    63d8:	0f b6       	in	r0, 0x3f	; 63
    63da:	0f 92       	push	r0
    63dc:	11 24       	eor	r1, r1
    63de:	0b b6       	in	r0, 0x3b	; 59
    63e0:	0f 92       	push	r0
    63e2:	2f 93       	push	r18
    63e4:	8f 93       	push	r24
    63e6:	9f 93       	push	r25
    63e8:	af 93       	push	r26
    63ea:	bf 93       	push	r27
    63ec:	ef 93       	push	r30
    63ee:	ff 93       	push	r31
    63f0:	e0 91 26 19 	lds	r30, 0x1926	; 0x801926 <_ser_handle+0x4>
    63f4:	f0 91 27 19 	lds	r31, 0x1927	; 0x801927 <_ser_handle+0x5>
    63f8:	30 97       	sbiw	r30, 0x00	; 0
    63fa:	b9 f0       	breq	.+46     	; 0x642a <__vector_52+0x56>
    63fc:	02 80       	ldd	r0, Z+2	; 0x02
    63fe:	f3 81       	ldd	r31, Z+3	; 0x03
    6400:	e0 2d       	mov	r30, r0
    6402:	93 81       	ldd	r25, Z+3	; 0x03
    6404:	82 81       	ldd	r24, Z+2	; 0x02
    6406:	98 17       	cp	r25, r24
    6408:	b1 f0       	breq	.+44     	; 0x6436 <__vector_52+0x62>
    640a:	92 81       	ldd	r25, Z+2	; 0x02
    640c:	85 81       	ldd	r24, Z+5	; 0x05
    640e:	28 2f       	mov	r18, r24
    6410:	26 95       	lsr	r18
    6412:	29 23       	and	r18, r25
    6414:	a0 81       	ld	r26, Z
    6416:	b1 81       	ldd	r27, Z+1	; 0x01
    6418:	a2 0f       	add	r26, r18
    641a:	b1 1d       	adc	r27, r1
    641c:	2c 91       	ld	r18, X
    641e:	9f 5f       	subi	r25, 0xFF	; 255
    6420:	89 23       	and	r24, r25
    6422:	82 83       	std	Z+2, r24	; 0x02
    6424:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    6428:	0b c0       	rjmp	.+22     	; 0x6440 <__vector_52+0x6c>
    642a:	e1 ed       	ldi	r30, 0xD1	; 209
    642c:	f0 e0       	ldi	r31, 0x00	; 0
    642e:	80 81       	ld	r24, Z
    6430:	8f 7d       	andi	r24, 0xDF	; 223
    6432:	80 83       	st	Z, r24
    6434:	05 c0       	rjmp	.+10     	; 0x6440 <__vector_52+0x6c>
    6436:	e1 ed       	ldi	r30, 0xD1	; 209
    6438:	f0 e0       	ldi	r31, 0x00	; 0
    643a:	80 81       	ld	r24, Z
    643c:	8f 7d       	andi	r24, 0xDF	; 223
    643e:	80 83       	st	Z, r24
    6440:	ff 91       	pop	r31
    6442:	ef 91       	pop	r30
    6444:	bf 91       	pop	r27
    6446:	af 91       	pop	r26
    6448:	9f 91       	pop	r25
    644a:	8f 91       	pop	r24
    644c:	2f 91       	pop	r18
    644e:	0f 90       	pop	r0
    6450:	0b be       	out	0x3b, r0	; 59
    6452:	0f 90       	pop	r0
    6454:	0f be       	out	0x3f, r0	; 63
    6456:	0f 90       	pop	r0
    6458:	1f 90       	pop	r1
    645a:	18 95       	reti

0000645c <__vector_54>:
    645c:	1f 92       	push	r1
    645e:	0f 92       	push	r0
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	0f 92       	push	r0
    6464:	11 24       	eor	r1, r1
    6466:	0b b6       	in	r0, 0x3b	; 59
    6468:	0f 92       	push	r0
    646a:	2f 93       	push	r18
    646c:	3f 93       	push	r19
    646e:	4f 93       	push	r20
    6470:	5f 93       	push	r21
    6472:	6f 93       	push	r22
    6474:	7f 93       	push	r23
    6476:	8f 93       	push	r24
    6478:	9f 93       	push	r25
    647a:	af 93       	push	r26
    647c:	bf 93       	push	r27
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
    6482:	ef 93       	push	r30
    6484:	ff 93       	push	r31
    6486:	a0 91 28 19 	lds	r26, 0x1928	; 0x801928 <_ser_handle+0x6>
    648a:	b0 91 29 19 	lds	r27, 0x1929	; 0x801929 <_ser_handle+0x7>
    648e:	10 97       	sbiw	r26, 0x00	; 0
    6490:	11 f1       	breq	.+68     	; 0x64d6 <__vector_54+0x7a>
    6492:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    6496:	14 96       	adiw	r26, 0x04	; 4
    6498:	ed 91       	ld	r30, X+
    649a:	fc 91       	ld	r31, X
    649c:	15 97       	sbiw	r26, 0x05	; 5
    649e:	93 81       	ldd	r25, Z+3	; 0x03
    64a0:	82 81       	ldd	r24, Z+2	; 0x02
    64a2:	25 81       	ldd	r18, Z+5	; 0x05
    64a4:	98 1b       	sub	r25, r24
    64a6:	92 23       	and	r25, r18
    64a8:	84 81       	ldd	r24, Z+4	; 0x04
    64aa:	98 17       	cp	r25, r24
    64ac:	61 f0       	breq	.+24     	; 0x64c6 <__vector_54+0x6a>
    64ae:	83 81       	ldd	r24, Z+3	; 0x03
    64b0:	26 95       	lsr	r18
    64b2:	28 23       	and	r18, r24
    64b4:	c0 81       	ld	r28, Z
    64b6:	d1 81       	ldd	r29, Z+1	; 0x01
    64b8:	c2 0f       	add	r28, r18
    64ba:	d1 1d       	adc	r29, r1
    64bc:	68 83       	st	Y, r22
    64be:	8f 5f       	subi	r24, 0xFF	; 255
    64c0:	95 81       	ldd	r25, Z+5	; 0x05
    64c2:	89 23       	and	r24, r25
    64c4:	83 83       	std	Z+3, r24	; 0x03
    64c6:	16 96       	adiw	r26, 0x06	; 6
    64c8:	ed 91       	ld	r30, X+
    64ca:	fc 91       	ld	r31, X
    64cc:	17 97       	sbiw	r26, 0x07	; 7
    64ce:	30 97       	sbiw	r30, 0x00	; 0
    64d0:	11 f0       	breq	.+4      	; 0x64d6 <__vector_54+0x7a>
    64d2:	cd 01       	movw	r24, r26
    64d4:	19 95       	eicall
    64d6:	ff 91       	pop	r31
    64d8:	ef 91       	pop	r30
    64da:	df 91       	pop	r29
    64dc:	cf 91       	pop	r28
    64de:	bf 91       	pop	r27
    64e0:	af 91       	pop	r26
    64e2:	9f 91       	pop	r25
    64e4:	8f 91       	pop	r24
    64e6:	7f 91       	pop	r23
    64e8:	6f 91       	pop	r22
    64ea:	5f 91       	pop	r21
    64ec:	4f 91       	pop	r20
    64ee:	3f 91       	pop	r19
    64f0:	2f 91       	pop	r18
    64f2:	0f 90       	pop	r0
    64f4:	0b be       	out	0x3b, r0	; 59
    64f6:	0f 90       	pop	r0
    64f8:	0f be       	out	0x3f, r0	; 63
    64fa:	0f 90       	pop	r0
    64fc:	1f 90       	pop	r1
    64fe:	18 95       	reti

00006500 <__vector_55>:
    6500:	1f 92       	push	r1
    6502:	0f 92       	push	r0
    6504:	0f b6       	in	r0, 0x3f	; 63
    6506:	0f 92       	push	r0
    6508:	11 24       	eor	r1, r1
    650a:	0b b6       	in	r0, 0x3b	; 59
    650c:	0f 92       	push	r0
    650e:	2f 93       	push	r18
    6510:	8f 93       	push	r24
    6512:	9f 93       	push	r25
    6514:	af 93       	push	r26
    6516:	bf 93       	push	r27
    6518:	ef 93       	push	r30
    651a:	ff 93       	push	r31
    651c:	e0 91 28 19 	lds	r30, 0x1928	; 0x801928 <_ser_handle+0x6>
    6520:	f0 91 29 19 	lds	r31, 0x1929	; 0x801929 <_ser_handle+0x7>
    6524:	30 97       	sbiw	r30, 0x00	; 0
    6526:	b9 f0       	breq	.+46     	; 0x6556 <__vector_55+0x56>
    6528:	02 80       	ldd	r0, Z+2	; 0x02
    652a:	f3 81       	ldd	r31, Z+3	; 0x03
    652c:	e0 2d       	mov	r30, r0
    652e:	93 81       	ldd	r25, Z+3	; 0x03
    6530:	82 81       	ldd	r24, Z+2	; 0x02
    6532:	98 17       	cp	r25, r24
    6534:	b1 f0       	breq	.+44     	; 0x6562 <__vector_55+0x62>
    6536:	92 81       	ldd	r25, Z+2	; 0x02
    6538:	85 81       	ldd	r24, Z+5	; 0x05
    653a:	28 2f       	mov	r18, r24
    653c:	26 95       	lsr	r18
    653e:	29 23       	and	r18, r25
    6540:	a0 81       	ld	r26, Z
    6542:	b1 81       	ldd	r27, Z+1	; 0x01
    6544:	a2 0f       	add	r26, r18
    6546:	b1 1d       	adc	r27, r1
    6548:	2c 91       	ld	r18, X
    654a:	9f 5f       	subi	r25, 0xFF	; 255
    654c:	89 23       	and	r24, r25
    654e:	82 83       	std	Z+2, r24	; 0x02
    6550:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    6554:	0b c0       	rjmp	.+22     	; 0x656c <__vector_55+0x6c>
    6556:	e1 e3       	ldi	r30, 0x31	; 49
    6558:	f1 e0       	ldi	r31, 0x01	; 1
    655a:	80 81       	ld	r24, Z
    655c:	8f 7d       	andi	r24, 0xDF	; 223
    655e:	80 83       	st	Z, r24
    6560:	05 c0       	rjmp	.+10     	; 0x656c <__vector_55+0x6c>
    6562:	e1 e3       	ldi	r30, 0x31	; 49
    6564:	f1 e0       	ldi	r31, 0x01	; 1
    6566:	80 81       	ld	r24, Z
    6568:	8f 7d       	andi	r24, 0xDF	; 223
    656a:	80 83       	st	Z, r24
    656c:	ff 91       	pop	r31
    656e:	ef 91       	pop	r30
    6570:	bf 91       	pop	r27
    6572:	af 91       	pop	r26
    6574:	9f 91       	pop	r25
    6576:	8f 91       	pop	r24
    6578:	2f 91       	pop	r18
    657a:	0f 90       	pop	r0
    657c:	0b be       	out	0x3b, r0	; 59
    657e:	0f 90       	pop	r0
    6580:	0f be       	out	0x3f, r0	; 63
    6582:	0f 90       	pop	r0
    6584:	1f 90       	pop	r1
    6586:	18 95       	reti

00006588 <usart_getchar>:
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	1f 92       	push	r1
    658e:	cd b7       	in	r28, 0x3d	; 61
    6590:	de b7       	in	r29, 0x3e	; 62
    6592:	be 01       	movw	r22, r28
    6594:	6f 5f       	subi	r22, 0xFF	; 255
    6596:	7f 4f       	sbci	r23, 0xFF	; 255
    6598:	80 91 2a 19 	lds	r24, 0x192A	; 0x80192a <_com_serial_instance>
    659c:	90 91 2b 19 	lds	r25, 0x192B	; 0x80192b <_com_serial_instance+0x1>
    65a0:	7f dd       	rcall	.-1282   	; 0x60a0 <serial_getByte>
    65a2:	81 11       	cpse	r24, r1
    65a4:	f6 cf       	rjmp	.-20     	; 0x6592 <usart_getchar+0xa>
    65a6:	89 81       	ldd	r24, Y+1	; 0x01
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	0f 90       	pop	r0
    65ac:	df 91       	pop	r29
    65ae:	cf 91       	pop	r28
    65b0:	08 95       	ret

000065b2 <usart_putchar>:
    65b2:	68 2f       	mov	r22, r24
    65b4:	80 91 2a 19 	lds	r24, 0x192A	; 0x80192a <_com_serial_instance>
    65b8:	90 91 2b 19 	lds	r25, 0x192B	; 0x80192b <_com_serial_instance+0x1>
    65bc:	fc dc       	rcall	.-1544   	; 0x5fb6 <serial_sendByte>
    65be:	80 e0       	ldi	r24, 0x00	; 0
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	08 95       	ret

000065c4 <stdio_create>:
    65c4:	8f 92       	push	r8
    65c6:	9f 92       	push	r9
    65c8:	af 92       	push	r10
    65ca:	cf 92       	push	r12
    65cc:	ef 92       	push	r14
    65ce:	0f 93       	push	r16
    65d0:	81 2c       	mov	r8, r1
    65d2:	91 2c       	mov	r9, r1
    65d4:	68 94       	set
    65d6:	aa 24       	eor	r10, r10
    65d8:	a7 f8       	bld	r10, 7
    65da:	68 94       	set
    65dc:	cc 24       	eor	r12, r12
    65de:	c7 f8       	bld	r12, 7
    65e0:	e1 2c       	mov	r14, r1
    65e2:	00 e0       	ldi	r16, 0x00	; 0
    65e4:	23 e0       	ldi	r18, 0x03	; 3
    65e6:	40 e0       	ldi	r20, 0x00	; 0
    65e8:	51 ee       	ldi	r21, 0xE1	; 225
    65ea:	60 e0       	ldi	r22, 0x00	; 0
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	4a dc       	rcall	.-1900   	; 0x5e84 <serial_create>
    65f0:	90 93 2b 19 	sts	0x192B, r25	; 0x80192b <_com_serial_instance+0x1>
    65f4:	80 93 2a 19 	sts	0x192A, r24	; 0x80192a <_com_serial_instance>
    65f8:	ef e6       	ldi	r30, 0x6F	; 111
    65fa:	f9 e1       	ldi	r31, 0x19	; 25
    65fc:	82 e1       	ldi	r24, 0x12	; 18
    65fe:	92 e0       	ldi	r25, 0x02	; 2
    6600:	91 83       	std	Z+1, r25	; 0x01
    6602:	80 83       	st	Z, r24
    6604:	93 83       	std	Z+3, r25	; 0x03
    6606:	82 83       	std	Z+2, r24	; 0x02
    6608:	0f 91       	pop	r16
    660a:	ef 90       	pop	r14
    660c:	cf 90       	pop	r12
    660e:	af 90       	pop	r10
    6610:	9f 90       	pop	r9
    6612:	8f 90       	pop	r8
    6614:	08 95       	ret

00006616 <_turn_off>:
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	fc 01       	movw	r30, r24
    661a:	ee 0f       	add	r30, r30
    661c:	ff 1f       	adc	r31, r31
    661e:	e8 0f       	add	r30, r24
    6620:	f9 1f       	adc	r31, r25
    6622:	ee 0f       	add	r30, r30
    6624:	ff 1f       	adc	r31, r31
    6626:	e4 5d       	subi	r30, 0xD4	; 212
    6628:	f6 4e       	sbci	r31, 0xE6	; 230
    662a:	23 81       	ldd	r18, Z+3	; 0x03
    662c:	21 11       	cpse	r18, r1
    662e:	1f c0       	rjmp	.+62     	; 0x666e <_turn_off+0x58>
    6630:	9c 01       	movw	r18, r24
    6632:	22 0f       	add	r18, r18
    6634:	33 1f       	adc	r19, r19
    6636:	f9 01       	movw	r30, r18
    6638:	e8 0f       	add	r30, r24
    663a:	f9 1f       	adc	r31, r25
    663c:	ee 0f       	add	r30, r30
    663e:	ff 1f       	adc	r31, r31
    6640:	e4 5d       	subi	r30, 0xD4	; 212
    6642:	f6 4e       	sbci	r31, 0xE6	; 230
    6644:	a0 81       	ld	r26, Z
    6646:	b1 81       	ldd	r27, Z+1	; 0x01
    6648:	4c 91       	ld	r20, X
    664a:	f9 01       	movw	r30, r18
    664c:	e8 0f       	add	r30, r24
    664e:	f9 1f       	adc	r31, r25
    6650:	ee 0f       	add	r30, r30
    6652:	ff 1f       	adc	r31, r31
    6654:	e4 5d       	subi	r30, 0xD4	; 212
    6656:	f6 4e       	sbci	r31, 0xE6	; 230
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	02 80       	ldd	r0, Z+2	; 0x02
    665e:	02 c0       	rjmp	.+4      	; 0x6664 <_turn_off+0x4e>
    6660:	88 0f       	add	r24, r24
    6662:	99 1f       	adc	r25, r25
    6664:	0a 94       	dec	r0
    6666:	e2 f7       	brpl	.-8      	; 0x6660 <_turn_off+0x4a>
    6668:	84 2b       	or	r24, r20
    666a:	8c 93       	st	X, r24
    666c:	08 95       	ret
    666e:	fc 01       	movw	r30, r24
    6670:	ee 0f       	add	r30, r30
    6672:	ff 1f       	adc	r31, r31
    6674:	df 01       	movw	r26, r30
    6676:	a8 0f       	add	r26, r24
    6678:	b9 1f       	adc	r27, r25
    667a:	aa 0f       	add	r26, r26
    667c:	bb 1f       	adc	r27, r27
    667e:	a4 5d       	subi	r26, 0xD4	; 212
    6680:	b6 4e       	sbci	r27, 0xE6	; 230
    6682:	0d 90       	ld	r0, X+
    6684:	bc 91       	ld	r27, X
    6686:	a0 2d       	mov	r26, r0
    6688:	2c 91       	ld	r18, X
    668a:	e8 0f       	add	r30, r24
    668c:	f9 1f       	adc	r31, r25
    668e:	ee 0f       	add	r30, r30
    6690:	ff 1f       	adc	r31, r31
    6692:	e4 5d       	subi	r30, 0xD4	; 212
    6694:	f6 4e       	sbci	r31, 0xE6	; 230
    6696:	81 e0       	ldi	r24, 0x01	; 1
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	02 80       	ldd	r0, Z+2	; 0x02
    669c:	02 c0       	rjmp	.+4      	; 0x66a2 <_turn_off+0x8c>
    669e:	88 0f       	add	r24, r24
    66a0:	99 1f       	adc	r25, r25
    66a2:	0a 94       	dec	r0
    66a4:	e2 f7       	brpl	.-8      	; 0x669e <_turn_off+0x88>
    66a6:	80 95       	com	r24
    66a8:	82 23       	and	r24, r18
    66aa:	8c 93       	st	X, r24
    66ac:	08 95       	ret

000066ae <_turn_on>:
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	fc 01       	movw	r30, r24
    66b2:	ee 0f       	add	r30, r30
    66b4:	ff 1f       	adc	r31, r31
    66b6:	e8 0f       	add	r30, r24
    66b8:	f9 1f       	adc	r31, r25
    66ba:	ee 0f       	add	r30, r30
    66bc:	ff 1f       	adc	r31, r31
    66be:	e4 5d       	subi	r30, 0xD4	; 212
    66c0:	f6 4e       	sbci	r31, 0xE6	; 230
    66c2:	23 81       	ldd	r18, Z+3	; 0x03
    66c4:	21 11       	cpse	r18, r1
    66c6:	20 c0       	rjmp	.+64     	; 0x6708 <_turn_on+0x5a>
    66c8:	9c 01       	movw	r18, r24
    66ca:	22 0f       	add	r18, r18
    66cc:	33 1f       	adc	r19, r19
    66ce:	f9 01       	movw	r30, r18
    66d0:	e8 0f       	add	r30, r24
    66d2:	f9 1f       	adc	r31, r25
    66d4:	ee 0f       	add	r30, r30
    66d6:	ff 1f       	adc	r31, r31
    66d8:	e4 5d       	subi	r30, 0xD4	; 212
    66da:	f6 4e       	sbci	r31, 0xE6	; 230
    66dc:	a0 81       	ld	r26, Z
    66de:	b1 81       	ldd	r27, Z+1	; 0x01
    66e0:	4c 91       	ld	r20, X
    66e2:	f9 01       	movw	r30, r18
    66e4:	e8 0f       	add	r30, r24
    66e6:	f9 1f       	adc	r31, r25
    66e8:	ee 0f       	add	r30, r30
    66ea:	ff 1f       	adc	r31, r31
    66ec:	e4 5d       	subi	r30, 0xD4	; 212
    66ee:	f6 4e       	sbci	r31, 0xE6	; 230
    66f0:	81 e0       	ldi	r24, 0x01	; 1
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	02 80       	ldd	r0, Z+2	; 0x02
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <_turn_on+0x4e>
    66f8:	88 0f       	add	r24, r24
    66fa:	99 1f       	adc	r25, r25
    66fc:	0a 94       	dec	r0
    66fe:	e2 f7       	brpl	.-8      	; 0x66f8 <_turn_on+0x4a>
    6700:	80 95       	com	r24
    6702:	84 23       	and	r24, r20
    6704:	8c 93       	st	X, r24
    6706:	08 95       	ret
    6708:	fc 01       	movw	r30, r24
    670a:	ee 0f       	add	r30, r30
    670c:	ff 1f       	adc	r31, r31
    670e:	df 01       	movw	r26, r30
    6710:	a8 0f       	add	r26, r24
    6712:	b9 1f       	adc	r27, r25
    6714:	aa 0f       	add	r26, r26
    6716:	bb 1f       	adc	r27, r27
    6718:	a4 5d       	subi	r26, 0xD4	; 212
    671a:	b6 4e       	sbci	r27, 0xE6	; 230
    671c:	0d 90       	ld	r0, X+
    671e:	bc 91       	ld	r27, X
    6720:	a0 2d       	mov	r26, r0
    6722:	2c 91       	ld	r18, X
    6724:	e8 0f       	add	r30, r24
    6726:	f9 1f       	adc	r31, r25
    6728:	ee 0f       	add	r30, r30
    672a:	ff 1f       	adc	r31, r31
    672c:	e4 5d       	subi	r30, 0xD4	; 212
    672e:	f6 4e       	sbci	r31, 0xE6	; 230
    6730:	81 e0       	ldi	r24, 0x01	; 1
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	02 80       	ldd	r0, Z+2	; 0x02
    6736:	02 c0       	rjmp	.+4      	; 0x673c <_turn_on+0x8e>
    6738:	88 0f       	add	r24, r24
    673a:	99 1f       	adc	r25, r25
    673c:	0a 94       	dec	r0
    673e:	e2 f7       	brpl	.-8      	; 0x6738 <_turn_on+0x8a>
    6740:	82 2b       	or	r24, r18
    6742:	8c 93       	st	X, r24
    6744:	08 95       	ret

00006746 <_hal_led_task>:
    6746:	cc 24       	eor	r12, r12
    6748:	c3 94       	inc	r12
    674a:	d1 2c       	mov	r13, r1
    674c:	68 94       	set
    674e:	bb 24       	eor	r11, r11
    6750:	b2 f8       	bld	r11, 2
    6752:	cc e2       	ldi	r28, 0x2C	; 44
    6754:	d9 e1       	ldi	r29, 0x19	; 25
    6756:	10 e0       	ldi	r17, 0x00	; 0
    6758:	8c 81       	ldd	r24, Y+4	; 0x04
    675a:	81 30       	cpi	r24, 0x01	; 1
    675c:	81 f0       	breq	.+32     	; 0x677e <_hal_led_task+0x38>
    675e:	18 f1       	brcs	.+70     	; 0x67a6 <_hal_led_task+0x60>
    6760:	82 30       	cpi	r24, 0x02	; 2
    6762:	61 f5       	brne	.+88     	; 0x67bc <_hal_led_task+0x76>
    6764:	e8 81       	ld	r30, Y
    6766:	f9 81       	ldd	r31, Y+1	; 0x01
    6768:	20 81       	ld	r18, Z
    676a:	c6 01       	movw	r24, r12
    676c:	0a 80       	ldd	r0, Y+2	; 0x02
    676e:	02 c0       	rjmp	.+4      	; 0x6774 <_hal_led_task+0x2e>
    6770:	88 0f       	add	r24, r24
    6772:	99 1f       	adc	r25, r25
    6774:	0a 94       	dec	r0
    6776:	e2 f7       	brpl	.-8      	; 0x6770 <_hal_led_task+0x2a>
    6778:	82 27       	eor	r24, r18
    677a:	80 83       	st	Z, r24
    677c:	1f c0       	rjmp	.+62     	; 0x67bc <_hal_led_task+0x76>
    677e:	8d 81       	ldd	r24, Y+5	; 0x05
    6780:	8f 5f       	subi	r24, 0xFF	; 255
    6782:	8a 30       	cpi	r24, 0x0A	; 10
    6784:	10 f4       	brcc	.+4      	; 0x678a <_hal_led_task+0x44>
    6786:	8d 83       	std	Y+5, r24	; 0x05
    6788:	19 c0       	rjmp	.+50     	; 0x67bc <_hal_led_task+0x76>
    678a:	1d 82       	std	Y+5, r1	; 0x05
    678c:	e8 81       	ld	r30, Y
    678e:	f9 81       	ldd	r31, Y+1	; 0x01
    6790:	20 81       	ld	r18, Z
    6792:	c6 01       	movw	r24, r12
    6794:	0a 80       	ldd	r0, Y+2	; 0x02
    6796:	02 c0       	rjmp	.+4      	; 0x679c <_hal_led_task+0x56>
    6798:	88 0f       	add	r24, r24
    679a:	99 1f       	adc	r25, r25
    679c:	0a 94       	dec	r0
    679e:	e2 f7       	brpl	.-8      	; 0x6798 <_hal_led_task+0x52>
    67a0:	82 27       	eor	r24, r18
    67a2:	80 83       	st	Z, r24
    67a4:	0b c0       	rjmp	.+22     	; 0x67bc <_hal_led_task+0x76>
    67a6:	0d 81       	ldd	r16, Y+5	; 0x05
    67a8:	00 23       	and	r16, r16
    67aa:	29 f0       	breq	.+10     	; 0x67b6 <_hal_led_task+0x70>
    67ac:	81 2f       	mov	r24, r17
    67ae:	7f df       	rcall	.-258    	; 0x66ae <_turn_on>
    67b0:	01 50       	subi	r16, 0x01	; 1
    67b2:	0d 83       	std	Y+5, r16	; 0x05
    67b4:	03 c0       	rjmp	.+6      	; 0x67bc <_hal_led_task+0x76>
    67b6:	bc 82       	std	Y+4, r11	; 0x04
    67b8:	81 2f       	mov	r24, r17
    67ba:	2d df       	rcall	.-422    	; 0x6616 <_turn_off>
    67bc:	1f 5f       	subi	r17, 0xFF	; 255
    67be:	26 96       	adiw	r28, 0x06	; 6
    67c0:	14 30       	cpi	r17, 0x04	; 4
    67c2:	51 f6       	brne	.-108    	; 0x6758 <_hal_led_task+0x12>
    67c4:	65 e0       	ldi	r22, 0x05	; 5
    67c6:	70 e0       	ldi	r23, 0x00	; 0
    67c8:	80 e0       	ldi	r24, 0x00	; 0
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	0e 94 16 18 	call	0x302c	; 0x302c <vTaskDelay>
    67d0:	c0 cf       	rjmp	.-128    	; 0x6752 <_hal_led_task+0xc>

000067d2 <status_leds_create>:
    67d2:	ef 92       	push	r14
    67d4:	ff 92       	push	r15
    67d6:	0f 93       	push	r16
    67d8:	1f 93       	push	r17
    67da:	cf 93       	push	r28
    67dc:	df 93       	push	r29
    67de:	08 2f       	mov	r16, r24
    67e0:	80 e4       	ldi	r24, 0x40	; 64
    67e2:	87 b9       	out	0x07, r24	; 7
    67e4:	cc e2       	ldi	r28, 0x2C	; 44
    67e6:	d9 e1       	ldi	r29, 0x19	; 25
    67e8:	0f 2e       	mov	r0, r31
    67ea:	f8 e2       	ldi	r31, 0x28	; 40
    67ec:	ef 2e       	mov	r14, r31
    67ee:	f1 2c       	mov	r15, r1
    67f0:	f0 2d       	mov	r31, r0
    67f2:	f9 82       	std	Y+1, r15	; 0x01
    67f4:	e8 82       	st	Y, r14
    67f6:	86 e0       	ldi	r24, 0x06	; 6
    67f8:	8a 83       	std	Y+2, r24	; 0x02
    67fa:	1b 82       	std	Y+3, r1	; 0x03
    67fc:	14 e0       	ldi	r17, 0x04	; 4
    67fe:	1c 83       	std	Y+4, r17	; 0x04
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	09 df       	rcall	.-494    	; 0x6616 <_turn_off>
    6804:	80 e8       	ldi	r24, 0x80	; 128
    6806:	87 b9       	out	0x07, r24	; 7
    6808:	ff 82       	std	Y+7, r15	; 0x07
    680a:	ee 82       	std	Y+6, r14	; 0x06
    680c:	87 e0       	ldi	r24, 0x07	; 7
    680e:	88 87       	std	Y+8, r24	; 0x08
    6810:	19 86       	std	Y+9, r1	; 0x09
    6812:	1a 87       	std	Y+10, r17	; 0x0a
    6814:	81 e0       	ldi	r24, 0x01	; 1
    6816:	ff de       	rcall	.-514    	; 0x6616 <_turn_off>
    6818:	80 e2       	ldi	r24, 0x20	; 32
    681a:	83 bb       	out	0x13, r24	; 19
    681c:	84 e3       	ldi	r24, 0x34	; 52
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	9d 87       	std	Y+13, r25	; 0x0d
    6822:	8c 87       	std	Y+12, r24	; 0x0c
    6824:	85 e0       	ldi	r24, 0x05	; 5
    6826:	8e 87       	std	Y+14, r24	; 0x0e
    6828:	1f 86       	std	Y+15, r1	; 0x0f
    682a:	18 8b       	std	Y+16, r17	; 0x10
    682c:	82 e0       	ldi	r24, 0x02	; 2
    682e:	f3 de       	rcall	.-538    	; 0x6616 <_turn_off>
    6830:	80 e1       	ldi	r24, 0x10	; 16
    6832:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    6836:	82 e0       	ldi	r24, 0x02	; 2
    6838:	91 e0       	ldi	r25, 0x01	; 1
    683a:	9b 8b       	std	Y+19, r25	; 0x13
    683c:	8a 8b       	std	Y+18, r24	; 0x12
    683e:	1c 8b       	std	Y+20, r17	; 0x14
    6840:	1d 8a       	std	Y+21, r1	; 0x15
    6842:	1e 8b       	std	Y+22, r17	; 0x16
    6844:	83 e0       	ldi	r24, 0x03	; 3
    6846:	e7 de       	rcall	.-562    	; 0x6616 <_turn_off>
    6848:	e1 2c       	mov	r14, r1
    684a:	f1 2c       	mov	r15, r1
    684c:	20 e0       	ldi	r18, 0x00	; 0
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	40 ec       	ldi	r20, 0xC0	; 192
    6852:	50 e0       	ldi	r21, 0x00	; 0
    6854:	65 e3       	ldi	r22, 0x35	; 53
    6856:	77 e0       	ldi	r23, 0x07	; 7
    6858:	83 ea       	ldi	r24, 0xA3	; 163
    685a:	93 e3       	ldi	r25, 0x33	; 51
    685c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <xTaskCreate>
    6860:	df 91       	pop	r29
    6862:	cf 91       	pop	r28
    6864:	1f 91       	pop	r17
    6866:	0f 91       	pop	r16
    6868:	ff 90       	pop	r15
    686a:	ef 90       	pop	r14
    686c:	08 95       	ret

0000686e <status_leds_slowBlink>:
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	fc 01       	movw	r30, r24
    6876:	ee 0f       	add	r30, r30
    6878:	ff 1f       	adc	r31, r31
    687a:	df 01       	movw	r26, r30
    687c:	a8 0f       	add	r26, r24
    687e:	b9 1f       	adc	r27, r25
    6880:	aa 0f       	add	r26, r26
    6882:	bb 1f       	adc	r27, r27
    6884:	a4 5d       	subi	r26, 0xD4	; 212
    6886:	b6 4e       	sbci	r27, 0xE6	; 230
    6888:	cd 91       	ld	r28, X+
    688a:	dc 91       	ld	r29, X
    688c:	11 97       	sbiw	r26, 0x01	; 1
    688e:	48 81       	ld	r20, Y
    6890:	21 e0       	ldi	r18, 0x01	; 1
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	12 96       	adiw	r26, 0x02	; 2
    6896:	0c 90       	ld	r0, X
    6898:	12 97       	sbiw	r26, 0x02	; 2
    689a:	02 c0       	rjmp	.+4      	; 0x68a0 <status_leds_slowBlink+0x32>
    689c:	22 0f       	add	r18, r18
    689e:	33 1f       	adc	r19, r19
    68a0:	0a 94       	dec	r0
    68a2:	e2 f7       	brpl	.-8      	; 0x689c <status_leds_slowBlink+0x2e>
    68a4:	24 27       	eor	r18, r20
    68a6:	28 83       	st	Y, r18
    68a8:	fd 01       	movw	r30, r26
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	84 83       	std	Z+4, r24	; 0x04
    68ae:	df 91       	pop	r29
    68b0:	cf 91       	pop	r28
    68b2:	08 95       	ret

000068b4 <status_leds_fastBlink>:
    68b4:	cf 93       	push	r28
    68b6:	df 93       	push	r29
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	fc 01       	movw	r30, r24
    68bc:	ee 0f       	add	r30, r30
    68be:	ff 1f       	adc	r31, r31
    68c0:	df 01       	movw	r26, r30
    68c2:	a8 0f       	add	r26, r24
    68c4:	b9 1f       	adc	r27, r25
    68c6:	aa 0f       	add	r26, r26
    68c8:	bb 1f       	adc	r27, r27
    68ca:	a4 5d       	subi	r26, 0xD4	; 212
    68cc:	b6 4e       	sbci	r27, 0xE6	; 230
    68ce:	cd 91       	ld	r28, X+
    68d0:	dc 91       	ld	r29, X
    68d2:	11 97       	sbiw	r26, 0x01	; 1
    68d4:	48 81       	ld	r20, Y
    68d6:	21 e0       	ldi	r18, 0x01	; 1
    68d8:	30 e0       	ldi	r19, 0x00	; 0
    68da:	12 96       	adiw	r26, 0x02	; 2
    68dc:	0c 90       	ld	r0, X
    68de:	12 97       	sbiw	r26, 0x02	; 2
    68e0:	02 c0       	rjmp	.+4      	; 0x68e6 <status_leds_fastBlink+0x32>
    68e2:	22 0f       	add	r18, r18
    68e4:	33 1f       	adc	r19, r19
    68e6:	0a 94       	dec	r0
    68e8:	e2 f7       	brpl	.-8      	; 0x68e2 <status_leds_fastBlink+0x2e>
    68ea:	24 27       	eor	r18, r20
    68ec:	28 83       	st	Y, r18
    68ee:	fd 01       	movw	r30, r26
    68f0:	82 e0       	ldi	r24, 0x02	; 2
    68f2:	84 83       	std	Z+4, r24	; 0x04
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
    68f8:	08 95       	ret

000068fa <status_leds_ledOn>:
    68fa:	28 2f       	mov	r18, r24
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	f9 01       	movw	r30, r18
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	e2 0f       	add	r30, r18
    6906:	f3 1f       	adc	r31, r19
    6908:	ee 0f       	add	r30, r30
    690a:	ff 1f       	adc	r31, r31
    690c:	e4 5d       	subi	r30, 0xD4	; 212
    690e:	f6 4e       	sbci	r31, 0xE6	; 230
    6910:	93 e0       	ldi	r25, 0x03	; 3
    6912:	94 83       	std	Z+4, r25	; 0x04
    6914:	cc ce       	rjmp	.-616    	; 0x66ae <_turn_on>
    6916:	08 95       	ret

00006918 <status_leds_ledOff>:
    6918:	28 2f       	mov	r18, r24
    691a:	30 e0       	ldi	r19, 0x00	; 0
    691c:	f9 01       	movw	r30, r18
    691e:	ee 0f       	add	r30, r30
    6920:	ff 1f       	adc	r31, r31
    6922:	e2 0f       	add	r30, r18
    6924:	f3 1f       	adc	r31, r19
    6926:	ee 0f       	add	r30, r30
    6928:	ff 1f       	adc	r31, r31
    692a:	e4 5d       	subi	r30, 0xD4	; 212
    692c:	f6 4e       	sbci	r31, 0xE6	; 230
    692e:	94 e0       	ldi	r25, 0x04	; 4
    6930:	94 83       	std	Z+4, r25	; 0x04
    6932:	71 ce       	rjmp	.-798    	; 0x6616 <_turn_off>
    6934:	08 95       	ret

00006936 <status_leds_longPuls>:
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	fc 01       	movw	r30, r24
    693a:	ee 0f       	add	r30, r30
    693c:	ff 1f       	adc	r31, r31
    693e:	df 01       	movw	r26, r30
    6940:	a8 0f       	add	r26, r24
    6942:	b9 1f       	adc	r27, r25
    6944:	aa 0f       	add	r26, r26
    6946:	bb 1f       	adc	r27, r27
    6948:	a4 5d       	subi	r26, 0xD4	; 212
    694a:	b6 4e       	sbci	r27, 0xE6	; 230
    694c:	24 e0       	ldi	r18, 0x04	; 4
    694e:	15 96       	adiw	r26, 0x05	; 5
    6950:	2c 93       	st	X, r18
    6952:	15 97       	sbiw	r26, 0x05	; 5
    6954:	fd 01       	movw	r30, r26
    6956:	14 82       	std	Z+4, r1	; 0x04
    6958:	08 95       	ret

0000695a <status_leds_shortPuls>:
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	fc 01       	movw	r30, r24
    695e:	ee 0f       	add	r30, r30
    6960:	ff 1f       	adc	r31, r31
    6962:	df 01       	movw	r26, r30
    6964:	a8 0f       	add	r26, r24
    6966:	b9 1f       	adc	r27, r25
    6968:	aa 0f       	add	r26, r26
    696a:	bb 1f       	adc	r27, r27
    696c:	a4 5d       	subi	r26, 0xD4	; 212
    696e:	b6 4e       	sbci	r27, 0xE6	; 230
    6970:	21 e0       	ldi	r18, 0x01	; 1
    6972:	15 96       	adiw	r26, 0x05	; 5
    6974:	2c 93       	st	X, r18
    6976:	15 97       	sbiw	r26, 0x05	; 5
    6978:	fd 01       	movw	r30, r26
    697a:	14 82       	std	Z+4, r1	; 0x04
    697c:	08 95       	ret

0000697e <_initTwiInterface>:
    697e:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <_twiIsInitiated>
    6982:	81 11       	cpse	r24, r1
    6984:	0c c0       	rjmp	.+24     	; 0x699e <_initTwiInterface+0x20>
    6986:	8c e0       	ldi	r24, 0x0C	; 12
    6988:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    698c:	8f ef       	ldi	r24, 0xFF	; 255
    698e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6992:	84 e0       	ldi	r24, 0x04	; 4
    6994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6998:	81 e0       	ldi	r24, 0x01	; 1
    699a:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <_twiIsInitiated>
    699e:	08 95       	ret

000069a0 <twiCreate>:
    69a0:	af 92       	push	r10
    69a2:	bf 92       	push	r11
    69a4:	cf 92       	push	r12
    69a6:	df 92       	push	r13
    69a8:	ef 92       	push	r14
    69aa:	ff 92       	push	r15
    69ac:	0f 93       	push	r16
    69ae:	1f 93       	push	r17
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	a8 2e       	mov	r10, r24
    69b6:	b6 2e       	mov	r11, r22
    69b8:	69 01       	movw	r12, r18
    69ba:	7a 01       	movw	r14, r20
    69bc:	84 e0       	ldi	r24, 0x04	; 4
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	b9 d2       	rcall	.+1394   	; 0x6f34 <malloc>
    69c2:	ec 01       	movw	r28, r24
    69c4:	89 2b       	or	r24, r25
    69c6:	61 f1       	breq	.+88     	; 0x6a20 <twiCreate+0x80>
    69c8:	a8 82       	st	Y, r10
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	b8 12       	cpse	r11, r24
    69ce:	12 c0       	rjmp	.+36     	; 0x69f4 <twiCreate+0x54>
    69d0:	c7 01       	movw	r24, r14
    69d2:	b6 01       	movw	r22, r12
    69d4:	20 ea       	ldi	r18, 0xA0	; 160
    69d6:	36 e8       	ldi	r19, 0x86	; 134
    69d8:	41 e0       	ldi	r20, 0x01	; 1
    69da:	50 e0       	ldi	r21, 0x00	; 0
    69dc:	67 d2       	rcall	.+1230   	; 0x6eac <__udivmodsi4>
    69de:	da 01       	movw	r26, r20
    69e0:	c9 01       	movw	r24, r18
    69e2:	40 97       	sbiw	r24, 0x10	; 16
    69e4:	a1 09       	sbc	r26, r1
    69e6:	b1 09       	sbc	r27, r1
    69e8:	b6 95       	lsr	r27
    69ea:	a7 95       	ror	r26
    69ec:	97 95       	ror	r25
    69ee:	87 95       	ror	r24
    69f0:	89 83       	std	Y+1, r24	; 0x01
    69f2:	11 c0       	rjmp	.+34     	; 0x6a16 <twiCreate+0x76>
    69f4:	c7 01       	movw	r24, r14
    69f6:	b6 01       	movw	r22, r12
    69f8:	20 e8       	ldi	r18, 0x80	; 128
    69fa:	3a e1       	ldi	r19, 0x1A	; 26
    69fc:	46 e0       	ldi	r20, 0x06	; 6
    69fe:	50 e0       	ldi	r21, 0x00	; 0
    6a00:	55 d2       	rcall	.+1194   	; 0x6eac <__udivmodsi4>
    6a02:	da 01       	movw	r26, r20
    6a04:	c9 01       	movw	r24, r18
    6a06:	40 97       	sbiw	r24, 0x10	; 16
    6a08:	a1 09       	sbc	r26, r1
    6a0a:	b1 09       	sbc	r27, r1
    6a0c:	b6 95       	lsr	r27
    6a0e:	a7 95       	ror	r26
    6a10:	97 95       	ror	r25
    6a12:	87 95       	ror	r24
    6a14:	89 83       	std	Y+1, r24	; 0x01
    6a16:	1b 83       	std	Y+3, r17	; 0x03
    6a18:	0a 83       	std	Y+2, r16	; 0x02
    6a1a:	8c 2f       	mov	r24, r28
    6a1c:	9d 2f       	mov	r25, r29
    6a1e:	02 c0       	rjmp	.+4      	; 0x6a24 <twiCreate+0x84>
    6a20:	80 e0       	ldi	r24, 0x00	; 0
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	df 91       	pop	r29
    6a26:	cf 91       	pop	r28
    6a28:	1f 91       	pop	r17
    6a2a:	0f 91       	pop	r16
    6a2c:	ff 90       	pop	r15
    6a2e:	ef 90       	pop	r14
    6a30:	df 90       	pop	r13
    6a32:	cf 90       	pop	r12
    6a34:	bf 90       	pop	r11
    6a36:	af 90       	pop	r10
    6a38:	08 95       	ret

00006a3a <twiIsBusy>:
    6a3a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6a3e:	81 70       	andi	r24, 0x01	; 1
    6a40:	08 95       	ret

00006a42 <twiTransmit>:
    6a42:	ff 92       	push	r15
    6a44:	0f 93       	push	r16
    6a46:	1f 93       	push	r17
    6a48:	cf 93       	push	r28
    6a4a:	df 93       	push	r29
    6a4c:	00 97       	sbiw	r24, 0x00	; 0
    6a4e:	d1 f1       	breq	.+116    	; 0x6ac4 <twiTransmit+0x82>
    6a50:	4a 30       	cpi	r20, 0x0A	; 10
    6a52:	d0 f5       	brcc	.+116    	; 0x6ac8 <twiTransmit+0x86>
    6a54:	f4 2e       	mov	r15, r20
    6a56:	8b 01       	movw	r16, r22
    6a58:	ec 01       	movw	r28, r24
    6a5a:	ef df       	rcall	.-34     	; 0x6a3a <twiIsBusy>
    6a5c:	81 11       	cpse	r24, r1
    6a5e:	36 c0       	rjmp	.+108    	; 0x6acc <twiTransmit+0x8a>
    6a60:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <_twiCurrentHandler>
    6a64:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <_twiCurrentHandler+0x1>
    6a68:	c8 17       	cp	r28, r24
    6a6a:	d9 07       	cpc	r29, r25
    6a6c:	41 f0       	breq	.+16     	; 0x6a7e <twiTransmit+0x3c>
    6a6e:	87 df       	rcall	.-242    	; 0x697e <_initTwiInterface>
    6a70:	89 81       	ldd	r24, Y+1	; 0x01
    6a72:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6a76:	d0 93 46 19 	sts	0x1946, r29	; 0x801946 <_twiCurrentHandler+0x1>
    6a7a:	c0 93 45 19 	sts	0x1945, r28	; 0x801945 <_twiCurrentHandler>
    6a7e:	81 e0       	ldi	r24, 0x01	; 1
    6a80:	8f 0d       	add	r24, r15
    6a82:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <_twiMessageLen>
    6a86:	88 81       	ld	r24, Y
    6a88:	88 0f       	add	r24, r24
    6a8a:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <_twiMessageBuffer>
    6a8e:	ff 20       	and	r15, r15
    6a90:	89 f0       	breq	.+34     	; 0x6ab4 <twiTransmit+0x72>
    6a92:	f8 01       	movw	r30, r16
    6a94:	a9 e4       	ldi	r26, 0x49	; 73
    6a96:	b9 e1       	ldi	r27, 0x19	; 25
    6a98:	4f ef       	ldi	r20, 0xFF	; 255
    6a9a:	4f 0d       	add	r20, r15
    6a9c:	64 2f       	mov	r22, r20
    6a9e:	70 e0       	ldi	r23, 0x00	; 0
    6aa0:	cb 01       	movw	r24, r22
    6aa2:	01 96       	adiw	r24, 0x01	; 1
    6aa4:	b8 01       	movw	r22, r16
    6aa6:	68 0f       	add	r22, r24
    6aa8:	79 1f       	adc	r23, r25
    6aaa:	81 91       	ld	r24, Z+
    6aac:	8d 93       	st	X+, r24
    6aae:	e6 17       	cp	r30, r22
    6ab0:	f7 07       	cpc	r31, r23
    6ab2:	d9 f7       	brne	.-10     	; 0x6aaa <twiTransmit+0x68>
    6ab4:	88 ef       	ldi	r24, 0xF8	; 248
    6ab6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6aba:	85 ea       	ldi	r24, 0xA5	; 165
    6abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6ac0:	84 e0       	ldi	r24, 0x04	; 4
    6ac2:	05 c0       	rjmp	.+10     	; 0x6ace <twiTransmit+0x8c>
    6ac4:	86 e0       	ldi	r24, 0x06	; 6
    6ac6:	03 c0       	rjmp	.+6      	; 0x6ace <twiTransmit+0x8c>
    6ac8:	87 e0       	ldi	r24, 0x07	; 7
    6aca:	01 c0       	rjmp	.+2      	; 0x6ace <twiTransmit+0x8c>
    6acc:	82 e0       	ldi	r24, 0x02	; 2
    6ace:	df 91       	pop	r29
    6ad0:	cf 91       	pop	r28
    6ad2:	1f 91       	pop	r17
    6ad4:	0f 91       	pop	r16
    6ad6:	ff 90       	pop	r15
    6ad8:	08 95       	ret

00006ada <twiReceive>:
    6ada:	1f 93       	push	r17
    6adc:	cf 93       	push	r28
    6ade:	df 93       	push	r29
    6ae0:	00 97       	sbiw	r24, 0x00	; 0
    6ae2:	29 f1       	breq	.+74     	; 0x6b2e <twiReceive+0x54>
    6ae4:	6b 30       	cpi	r22, 0x0B	; 11
    6ae6:	28 f5       	brcc	.+74     	; 0x6b32 <twiReceive+0x58>
    6ae8:	16 2f       	mov	r17, r22
    6aea:	ec 01       	movw	r28, r24
    6aec:	a6 df       	rcall	.-180    	; 0x6a3a <twiIsBusy>
    6aee:	81 11       	cpse	r24, r1
    6af0:	22 c0       	rjmp	.+68     	; 0x6b36 <twiReceive+0x5c>
    6af2:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <_twiCurrentHandler>
    6af6:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <_twiCurrentHandler+0x1>
    6afa:	c8 17       	cp	r28, r24
    6afc:	d9 07       	cpc	r29, r25
    6afe:	41 f0       	breq	.+16     	; 0x6b10 <twiReceive+0x36>
    6b00:	3e df       	rcall	.-388    	; 0x697e <_initTwiInterface>
    6b02:	89 81       	ldd	r24, Y+1	; 0x01
    6b04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6b08:	d0 93 46 19 	sts	0x1946, r29	; 0x801946 <_twiCurrentHandler+0x1>
    6b0c:	c0 93 45 19 	sts	0x1945, r28	; 0x801945 <_twiCurrentHandler>
    6b10:	10 93 47 19 	sts	0x1947, r17	; 0x801947 <_twiMessageLen>
    6b14:	88 81       	ld	r24, Y
    6b16:	88 0f       	add	r24, r24
    6b18:	81 60       	ori	r24, 0x01	; 1
    6b1a:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <_twiMessageBuffer>
    6b1e:	88 ef       	ldi	r24, 0xF8	; 248
    6b20:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6b24:	85 ea       	ldi	r24, 0xA5	; 165
    6b26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6b2a:	85 e0       	ldi	r24, 0x05	; 5
    6b2c:	05 c0       	rjmp	.+10     	; 0x6b38 <twiReceive+0x5e>
    6b2e:	86 e0       	ldi	r24, 0x06	; 6
    6b30:	03 c0       	rjmp	.+6      	; 0x6b38 <twiReceive+0x5e>
    6b32:	87 e0       	ldi	r24, 0x07	; 7
    6b34:	01 c0       	rjmp	.+2      	; 0x6b38 <twiReceive+0x5e>
    6b36:	82 e0       	ldi	r24, 0x02	; 2
    6b38:	df 91       	pop	r29
    6b3a:	cf 91       	pop	r28
    6b3c:	1f 91       	pop	r17
    6b3e:	08 95       	ret

00006b40 <__vector_39>:
    6b40:	1f 92       	push	r1
    6b42:	0f 92       	push	r0
    6b44:	0f b6       	in	r0, 0x3f	; 63
    6b46:	0f 92       	push	r0
    6b48:	11 24       	eor	r1, r1
    6b4a:	0b b6       	in	r0, 0x3b	; 59
    6b4c:	0f 92       	push	r0
    6b4e:	2f 93       	push	r18
    6b50:	3f 93       	push	r19
    6b52:	4f 93       	push	r20
    6b54:	5f 93       	push	r21
    6b56:	6f 93       	push	r22
    6b58:	7f 93       	push	r23
    6b5a:	8f 93       	push	r24
    6b5c:	9f 93       	push	r25
    6b5e:	af 93       	push	r26
    6b60:	bf 93       	push	r27
    6b62:	ef 93       	push	r30
    6b64:	ff 93       	push	r31
    6b66:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6b6a:	8e 2f       	mov	r24, r30
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	fc 01       	movw	r30, r24
    6b70:	38 97       	sbiw	r30, 0x08	; 8
    6b72:	e1 35       	cpi	r30, 0x51	; 81
    6b74:	f1 05       	cpc	r31, r1
    6b76:	08 f0       	brcs	.+2      	; 0x6b7a <__vector_39+0x3a>
    6b78:	75 c0       	rjmp	.+234    	; 0x6c64 <__vector_39+0x124>
    6b7a:	88 27       	eor	r24, r24
    6b7c:	e4 58       	subi	r30, 0x84	; 132
    6b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b80:	8f 4f       	sbci	r24, 0xFF	; 255
    6b82:	b6 c1       	rjmp	.+876    	; 0x6ef0 <__tablejump2__>
    6b84:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <_index.1885>
    6b88:	e0 91 44 19 	lds	r30, 0x1944	; 0x801944 <_index.1885>
    6b8c:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <_twiMessageLen>
    6b90:	e8 17       	cp	r30, r24
    6b92:	70 f4       	brcc	.+28     	; 0x6bb0 <__vector_39+0x70>
    6b94:	81 e0       	ldi	r24, 0x01	; 1
    6b96:	8e 0f       	add	r24, r30
    6b98:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <_index.1885>
    6b9c:	f0 e0       	ldi	r31, 0x00	; 0
    6b9e:	e8 5b       	subi	r30, 0xB8	; 184
    6ba0:	f6 4e       	sbci	r31, 0xE6	; 230
    6ba2:	80 81       	ld	r24, Z
    6ba4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6ba8:	85 e8       	ldi	r24, 0x85	; 133
    6baa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6bae:	72 c0       	rjmp	.+228    	; 0x6c94 <__vector_39+0x154>
    6bb0:	84 e9       	ldi	r24, 0x94	; 148
    6bb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6bb6:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <_twiCurrentHandler>
    6bba:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <_twiCurrentHandler+0x1>
    6bbe:	dc 01       	movw	r26, r24
    6bc0:	12 96       	adiw	r26, 0x02	; 2
    6bc2:	ed 91       	ld	r30, X+
    6bc4:	fc 91       	ld	r31, X
    6bc6:	13 97       	sbiw	r26, 0x03	; 3
    6bc8:	30 97       	sbiw	r30, 0x00	; 0
    6bca:	09 f4       	brne	.+2      	; 0x6bce <__vector_39+0x8e>
    6bcc:	63 c0       	rjmp	.+198    	; 0x6c94 <__vector_39+0x154>
    6bce:	20 e0       	ldi	r18, 0x00	; 0
    6bd0:	40 e0       	ldi	r20, 0x00	; 0
    6bd2:	50 e0       	ldi	r21, 0x00	; 0
    6bd4:	64 e0       	ldi	r22, 0x04	; 4
    6bd6:	19 95       	eicall
    6bd8:	5d c0       	rjmp	.+186    	; 0x6c94 <__vector_39+0x154>
    6bda:	e0 91 44 19 	lds	r30, 0x1944	; 0x801944 <_index.1885>
    6bde:	81 e0       	ldi	r24, 0x01	; 1
    6be0:	8e 0f       	add	r24, r30
    6be2:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <_index.1885>
    6be6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6bea:	f0 e0       	ldi	r31, 0x00	; 0
    6bec:	e8 5b       	subi	r30, 0xB8	; 184
    6bee:	f6 4e       	sbci	r31, 0xE6	; 230
    6bf0:	80 83       	st	Z, r24
    6bf2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6bf6:	80 34       	cpi	r24, 0x40	; 64
    6bf8:	11 f4       	brne	.+4      	; 0x6bfe <__vector_39+0xbe>
    6bfa:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <_index.1885>
    6bfe:	20 91 44 19 	lds	r18, 0x1944	; 0x801944 <_index.1885>
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <_twiMessageLen>
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	01 97       	sbiw	r24, 0x01	; 1
    6c0c:	28 17       	cp	r18, r24
    6c0e:	39 07       	cpc	r19, r25
    6c10:	24 f4       	brge	.+8      	; 0x6c1a <__vector_39+0xda>
    6c12:	85 ec       	ldi	r24, 0xC5	; 197
    6c14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6c18:	3d c0       	rjmp	.+122    	; 0x6c94 <__vector_39+0x154>
    6c1a:	85 e8       	ldi	r24, 0x85	; 133
    6c1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6c20:	39 c0       	rjmp	.+114    	; 0x6c94 <__vector_39+0x154>
    6c22:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6c26:	e0 91 44 19 	lds	r30, 0x1944	; 0x801944 <_index.1885>
    6c2a:	f0 e0       	ldi	r31, 0x00	; 0
    6c2c:	e8 5b       	subi	r30, 0xB8	; 184
    6c2e:	f6 4e       	sbci	r31, 0xE6	; 230
    6c30:	80 83       	st	Z, r24
    6c32:	84 e9       	ldi	r24, 0x94	; 148
    6c34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6c38:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <_twiCurrentHandler>
    6c3c:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <_twiCurrentHandler+0x1>
    6c40:	dc 01       	movw	r26, r24
    6c42:	12 96       	adiw	r26, 0x02	; 2
    6c44:	ed 91       	ld	r30, X+
    6c46:	fc 91       	ld	r31, X
    6c48:	13 97       	sbiw	r26, 0x03	; 3
    6c4a:	30 97       	sbiw	r30, 0x00	; 0
    6c4c:	19 f1       	breq	.+70     	; 0x6c94 <__vector_39+0x154>
    6c4e:	20 91 47 19 	lds	r18, 0x1947	; 0x801947 <_twiMessageLen>
    6c52:	48 e4       	ldi	r20, 0x48	; 72
    6c54:	59 e1       	ldi	r21, 0x19	; 25
    6c56:	65 e0       	ldi	r22, 0x05	; 5
    6c58:	19 95       	eicall
    6c5a:	1c c0       	rjmp	.+56     	; 0x6c94 <__vector_39+0x154>
    6c5c:	85 ea       	ldi	r24, 0xA5	; 165
    6c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6c62:	18 c0       	rjmp	.+48     	; 0x6c94 <__vector_39+0x154>
    6c64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6c68:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6c6c:	84 e0       	ldi	r24, 0x04	; 4
    6c6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6c72:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <_twiCurrentHandler>
    6c76:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <_twiCurrentHandler+0x1>
    6c7a:	dc 01       	movw	r26, r24
    6c7c:	12 96       	adiw	r26, 0x02	; 2
    6c7e:	ed 91       	ld	r30, X+
    6c80:	fc 91       	ld	r31, X
    6c82:	13 97       	sbiw	r26, 0x03	; 3
    6c84:	30 97       	sbiw	r30, 0x00	; 0
    6c86:	31 f0       	breq	.+12     	; 0x6c94 <__vector_39+0x154>
    6c88:	20 e0       	ldi	r18, 0x00	; 0
    6c8a:	40 e0       	ldi	r20, 0x00	; 0
    6c8c:	50 e0       	ldi	r21, 0x00	; 0
    6c8e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    6c92:	19 95       	eicall
    6c94:	ff 91       	pop	r31
    6c96:	ef 91       	pop	r30
    6c98:	bf 91       	pop	r27
    6c9a:	af 91       	pop	r26
    6c9c:	9f 91       	pop	r25
    6c9e:	8f 91       	pop	r24
    6ca0:	7f 91       	pop	r23
    6ca2:	6f 91       	pop	r22
    6ca4:	5f 91       	pop	r21
    6ca6:	4f 91       	pop	r20
    6ca8:	3f 91       	pop	r19
    6caa:	2f 91       	pop	r18
    6cac:	0f 90       	pop	r0
    6cae:	0b be       	out	0x3b, r0	; 59
    6cb0:	0f 90       	pop	r0
    6cb2:	0f be       	out	0x3f, r0	; 63
    6cb4:	0f 90       	pop	r0
    6cb6:	1f 90       	pop	r1
    6cb8:	18 95       	reti

00006cba <fifo_init>:
    6cba:	fc 01       	movw	r30, r24
    6cbc:	41 11       	cpse	r20, r1
    6cbe:	01 c0       	rjmp	.+2      	; 0x6cc2 <fifo_init+0x8>
    6cc0:	5a d2       	rcall	.+1204   	; 0x7176 <abort>
    6cc2:	84 2f       	mov	r24, r20
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	9c 01       	movw	r18, r24
    6cc8:	21 50       	subi	r18, 0x01	; 1
    6cca:	31 09       	sbc	r19, r1
    6ccc:	82 23       	and	r24, r18
    6cce:	93 23       	and	r25, r19
    6cd0:	89 2b       	or	r24, r25
    6cd2:	09 f0       	breq	.+2      	; 0x6cd6 <fifo_init+0x1c>
    6cd4:	50 d2       	rcall	.+1184   	; 0x7176 <abort>
    6cd6:	41 38       	cpi	r20, 0x81	; 129
    6cd8:	08 f0       	brcs	.+2      	; 0x6cdc <fifo_init+0x22>
    6cda:	4d d2       	rcall	.+1178   	; 0x7176 <abort>
    6cdc:	12 82       	std	Z+2, r1	; 0x02
    6cde:	13 82       	std	Z+3, r1	; 0x03
    6ce0:	44 83       	std	Z+4, r20	; 0x04
    6ce2:	44 0f       	add	r20, r20
    6ce4:	41 50       	subi	r20, 0x01	; 1
    6ce6:	45 83       	std	Z+5, r20	; 0x05
    6ce8:	71 83       	std	Z+1, r23	; 0x01
    6cea:	60 83       	st	Z, r22
    6cec:	80 e0       	ldi	r24, 0x00	; 0
    6cee:	90 e0       	ldi	r25, 0x00	; 0
    6cf0:	08 95       	ret

00006cf2 <__subsf3>:
    6cf2:	50 58       	subi	r21, 0x80	; 128

00006cf4 <__addsf3>:
    6cf4:	bb 27       	eor	r27, r27
    6cf6:	aa 27       	eor	r26, r26
    6cf8:	13 d0       	rcall	.+38     	; 0x6d20 <__addsf3x>
    6cfa:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__fp_round>
    6cfe:	0e 94 a4 29 	call	0x5348	; 0x5348 <__fp_pscA>
    6d02:	38 f0       	brcs	.+14     	; 0x6d12 <__addsf3+0x1e>
    6d04:	0e 94 ab 29 	call	0x5356	; 0x5356 <__fp_pscB>
    6d08:	20 f0       	brcs	.+8      	; 0x6d12 <__addsf3+0x1e>
    6d0a:	39 f4       	brne	.+14     	; 0x6d1a <__addsf3+0x26>
    6d0c:	9f 3f       	cpi	r25, 0xFF	; 255
    6d0e:	19 f4       	brne	.+6      	; 0x6d16 <__addsf3+0x22>
    6d10:	26 f4       	brtc	.+8      	; 0x6d1a <__addsf3+0x26>
    6d12:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__fp_nan>
    6d16:	0e f4       	brtc	.+2      	; 0x6d1a <__addsf3+0x26>
    6d18:	e0 95       	com	r30
    6d1a:	e7 fb       	bst	r30, 7
    6d1c:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_inf>

00006d20 <__addsf3x>:
    6d20:	e9 2f       	mov	r30, r25
    6d22:	0e 94 0b 29 	call	0x5216	; 0x5216 <__fp_split3>
    6d26:	58 f3       	brcs	.-42     	; 0x6cfe <__addsf3+0xa>
    6d28:	ba 17       	cp	r27, r26
    6d2a:	62 07       	cpc	r22, r18
    6d2c:	73 07       	cpc	r23, r19
    6d2e:	84 07       	cpc	r24, r20
    6d30:	95 07       	cpc	r25, r21
    6d32:	20 f0       	brcs	.+8      	; 0x6d3c <__addsf3x+0x1c>
    6d34:	79 f4       	brne	.+30     	; 0x6d54 <__addsf3x+0x34>
    6d36:	a6 f5       	brtc	.+104    	; 0x6da0 <__addsf3x+0x80>
    6d38:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__fp_zero>
    6d3c:	0e f4       	brtc	.+2      	; 0x6d40 <__addsf3x+0x20>
    6d3e:	e0 95       	com	r30
    6d40:	0b 2e       	mov	r0, r27
    6d42:	ba 2f       	mov	r27, r26
    6d44:	a0 2d       	mov	r26, r0
    6d46:	0b 01       	movw	r0, r22
    6d48:	b9 01       	movw	r22, r18
    6d4a:	90 01       	movw	r18, r0
    6d4c:	0c 01       	movw	r0, r24
    6d4e:	ca 01       	movw	r24, r20
    6d50:	a0 01       	movw	r20, r0
    6d52:	11 24       	eor	r1, r1
    6d54:	ff 27       	eor	r31, r31
    6d56:	59 1b       	sub	r21, r25
    6d58:	99 f0       	breq	.+38     	; 0x6d80 <__addsf3x+0x60>
    6d5a:	59 3f       	cpi	r21, 0xF9	; 249
    6d5c:	50 f4       	brcc	.+20     	; 0x6d72 <__addsf3x+0x52>
    6d5e:	50 3e       	cpi	r21, 0xE0	; 224
    6d60:	68 f1       	brcs	.+90     	; 0x6dbc <__addsf3x+0x9c>
    6d62:	1a 16       	cp	r1, r26
    6d64:	f0 40       	sbci	r31, 0x00	; 0
    6d66:	a2 2f       	mov	r26, r18
    6d68:	23 2f       	mov	r18, r19
    6d6a:	34 2f       	mov	r19, r20
    6d6c:	44 27       	eor	r20, r20
    6d6e:	58 5f       	subi	r21, 0xF8	; 248
    6d70:	f3 cf       	rjmp	.-26     	; 0x6d58 <__addsf3x+0x38>
    6d72:	46 95       	lsr	r20
    6d74:	37 95       	ror	r19
    6d76:	27 95       	ror	r18
    6d78:	a7 95       	ror	r26
    6d7a:	f0 40       	sbci	r31, 0x00	; 0
    6d7c:	53 95       	inc	r21
    6d7e:	c9 f7       	brne	.-14     	; 0x6d72 <__addsf3x+0x52>
    6d80:	7e f4       	brtc	.+30     	; 0x6da0 <__addsf3x+0x80>
    6d82:	1f 16       	cp	r1, r31
    6d84:	ba 0b       	sbc	r27, r26
    6d86:	62 0b       	sbc	r22, r18
    6d88:	73 0b       	sbc	r23, r19
    6d8a:	84 0b       	sbc	r24, r20
    6d8c:	ba f0       	brmi	.+46     	; 0x6dbc <__addsf3x+0x9c>
    6d8e:	91 50       	subi	r25, 0x01	; 1
    6d90:	a1 f0       	breq	.+40     	; 0x6dba <__addsf3x+0x9a>
    6d92:	ff 0f       	add	r31, r31
    6d94:	bb 1f       	adc	r27, r27
    6d96:	66 1f       	adc	r22, r22
    6d98:	77 1f       	adc	r23, r23
    6d9a:	88 1f       	adc	r24, r24
    6d9c:	c2 f7       	brpl	.-16     	; 0x6d8e <__addsf3x+0x6e>
    6d9e:	0e c0       	rjmp	.+28     	; 0x6dbc <__addsf3x+0x9c>
    6da0:	ba 0f       	add	r27, r26
    6da2:	62 1f       	adc	r22, r18
    6da4:	73 1f       	adc	r23, r19
    6da6:	84 1f       	adc	r24, r20
    6da8:	48 f4       	brcc	.+18     	; 0x6dbc <__addsf3x+0x9c>
    6daa:	87 95       	ror	r24
    6dac:	77 95       	ror	r23
    6dae:	67 95       	ror	r22
    6db0:	b7 95       	ror	r27
    6db2:	f7 95       	ror	r31
    6db4:	9e 3f       	cpi	r25, 0xFE	; 254
    6db6:	08 f0       	brcs	.+2      	; 0x6dba <__addsf3x+0x9a>
    6db8:	b0 cf       	rjmp	.-160    	; 0x6d1a <__addsf3+0x26>
    6dba:	93 95       	inc	r25
    6dbc:	88 0f       	add	r24, r24
    6dbe:	08 f0       	brcs	.+2      	; 0x6dc2 <__addsf3x+0xa2>
    6dc0:	99 27       	eor	r25, r25
    6dc2:	ee 0f       	add	r30, r30
    6dc4:	97 95       	ror	r25
    6dc6:	87 95       	ror	r24
    6dc8:	08 95       	ret

00006dca <__divsf3>:
    6dca:	12 d0       	rcall	.+36     	; 0x6df0 <__divsf3x>
    6dcc:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__fp_round>
    6dd0:	0e 94 ab 29 	call	0x5356	; 0x5356 <__fp_pscB>
    6dd4:	58 f0       	brcs	.+22     	; 0x6dec <__divsf3+0x22>
    6dd6:	0e 94 a4 29 	call	0x5348	; 0x5348 <__fp_pscA>
    6dda:	40 f0       	brcs	.+16     	; 0x6dec <__divsf3+0x22>
    6ddc:	29 f4       	brne	.+10     	; 0x6de8 <__divsf3+0x1e>
    6dde:	5f 3f       	cpi	r21, 0xFF	; 255
    6de0:	29 f0       	breq	.+10     	; 0x6dec <__divsf3+0x22>
    6de2:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_inf>
    6de6:	51 11       	cpse	r21, r1
    6de8:	0c 94 2e 29 	jmp	0x525c	; 0x525c <__fp_szero>
    6dec:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__fp_nan>

00006df0 <__divsf3x>:
    6df0:	0e 94 0b 29 	call	0x5216	; 0x5216 <__fp_split3>
    6df4:	68 f3       	brcs	.-38     	; 0x6dd0 <__divsf3+0x6>

00006df6 <__divsf3_pse>:
    6df6:	99 23       	and	r25, r25
    6df8:	b1 f3       	breq	.-20     	; 0x6de6 <__divsf3+0x1c>
    6dfa:	55 23       	and	r21, r21
    6dfc:	91 f3       	breq	.-28     	; 0x6de2 <__divsf3+0x18>
    6dfe:	95 1b       	sub	r25, r21
    6e00:	55 0b       	sbc	r21, r21
    6e02:	bb 27       	eor	r27, r27
    6e04:	aa 27       	eor	r26, r26
    6e06:	62 17       	cp	r22, r18
    6e08:	73 07       	cpc	r23, r19
    6e0a:	84 07       	cpc	r24, r20
    6e0c:	38 f0       	brcs	.+14     	; 0x6e1c <__divsf3_pse+0x26>
    6e0e:	9f 5f       	subi	r25, 0xFF	; 255
    6e10:	5f 4f       	sbci	r21, 0xFF	; 255
    6e12:	22 0f       	add	r18, r18
    6e14:	33 1f       	adc	r19, r19
    6e16:	44 1f       	adc	r20, r20
    6e18:	aa 1f       	adc	r26, r26
    6e1a:	a9 f3       	breq	.-22     	; 0x6e06 <__divsf3_pse+0x10>
    6e1c:	35 d0       	rcall	.+106    	; 0x6e88 <__divsf3_pse+0x92>
    6e1e:	0e 2e       	mov	r0, r30
    6e20:	3a f0       	brmi	.+14     	; 0x6e30 <__divsf3_pse+0x3a>
    6e22:	e0 e8       	ldi	r30, 0x80	; 128
    6e24:	32 d0       	rcall	.+100    	; 0x6e8a <__divsf3_pse+0x94>
    6e26:	91 50       	subi	r25, 0x01	; 1
    6e28:	50 40       	sbci	r21, 0x00	; 0
    6e2a:	e6 95       	lsr	r30
    6e2c:	00 1c       	adc	r0, r0
    6e2e:	ca f7       	brpl	.-14     	; 0x6e22 <__divsf3_pse+0x2c>
    6e30:	2b d0       	rcall	.+86     	; 0x6e88 <__divsf3_pse+0x92>
    6e32:	fe 2f       	mov	r31, r30
    6e34:	29 d0       	rcall	.+82     	; 0x6e88 <__divsf3_pse+0x92>
    6e36:	66 0f       	add	r22, r22
    6e38:	77 1f       	adc	r23, r23
    6e3a:	88 1f       	adc	r24, r24
    6e3c:	bb 1f       	adc	r27, r27
    6e3e:	26 17       	cp	r18, r22
    6e40:	37 07       	cpc	r19, r23
    6e42:	48 07       	cpc	r20, r24
    6e44:	ab 07       	cpc	r26, r27
    6e46:	b0 e8       	ldi	r27, 0x80	; 128
    6e48:	09 f0       	breq	.+2      	; 0x6e4c <__divsf3_pse+0x56>
    6e4a:	bb 0b       	sbc	r27, r27
    6e4c:	80 2d       	mov	r24, r0
    6e4e:	bf 01       	movw	r22, r30
    6e50:	ff 27       	eor	r31, r31
    6e52:	93 58       	subi	r25, 0x83	; 131
    6e54:	5f 4f       	sbci	r21, 0xFF	; 255
    6e56:	3a f0       	brmi	.+14     	; 0x6e66 <__divsf3_pse+0x70>
    6e58:	9e 3f       	cpi	r25, 0xFE	; 254
    6e5a:	51 05       	cpc	r21, r1
    6e5c:	78 f0       	brcs	.+30     	; 0x6e7c <__divsf3_pse+0x86>
    6e5e:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_inf>
    6e62:	0c 94 2e 29 	jmp	0x525c	; 0x525c <__fp_szero>
    6e66:	5f 3f       	cpi	r21, 0xFF	; 255
    6e68:	e4 f3       	brlt	.-8      	; 0x6e62 <__divsf3_pse+0x6c>
    6e6a:	98 3e       	cpi	r25, 0xE8	; 232
    6e6c:	d4 f3       	brlt	.-12     	; 0x6e62 <__divsf3_pse+0x6c>
    6e6e:	86 95       	lsr	r24
    6e70:	77 95       	ror	r23
    6e72:	67 95       	ror	r22
    6e74:	b7 95       	ror	r27
    6e76:	f7 95       	ror	r31
    6e78:	9f 5f       	subi	r25, 0xFF	; 255
    6e7a:	c9 f7       	brne	.-14     	; 0x6e6e <__divsf3_pse+0x78>
    6e7c:	88 0f       	add	r24, r24
    6e7e:	91 1d       	adc	r25, r1
    6e80:	96 95       	lsr	r25
    6e82:	87 95       	ror	r24
    6e84:	97 f9       	bld	r25, 7
    6e86:	08 95       	ret
    6e88:	e1 e0       	ldi	r30, 0x01	; 1
    6e8a:	66 0f       	add	r22, r22
    6e8c:	77 1f       	adc	r23, r23
    6e8e:	88 1f       	adc	r24, r24
    6e90:	bb 1f       	adc	r27, r27
    6e92:	62 17       	cp	r22, r18
    6e94:	73 07       	cpc	r23, r19
    6e96:	84 07       	cpc	r24, r20
    6e98:	ba 07       	cpc	r27, r26
    6e9a:	20 f0       	brcs	.+8      	; 0x6ea4 <__divsf3_pse+0xae>
    6e9c:	62 1b       	sub	r22, r18
    6e9e:	73 0b       	sbc	r23, r19
    6ea0:	84 0b       	sbc	r24, r20
    6ea2:	ba 0b       	sbc	r27, r26
    6ea4:	ee 1f       	adc	r30, r30
    6ea6:	88 f7       	brcc	.-30     	; 0x6e8a <__divsf3_pse+0x94>
    6ea8:	e0 95       	com	r30
    6eaa:	08 95       	ret

00006eac <__udivmodsi4>:
    6eac:	a1 e2       	ldi	r26, 0x21	; 33
    6eae:	1a 2e       	mov	r1, r26
    6eb0:	aa 1b       	sub	r26, r26
    6eb2:	bb 1b       	sub	r27, r27
    6eb4:	fd 01       	movw	r30, r26
    6eb6:	0d c0       	rjmp	.+26     	; 0x6ed2 <__udivmodsi4_ep>

00006eb8 <__udivmodsi4_loop>:
    6eb8:	aa 1f       	adc	r26, r26
    6eba:	bb 1f       	adc	r27, r27
    6ebc:	ee 1f       	adc	r30, r30
    6ebe:	ff 1f       	adc	r31, r31
    6ec0:	a2 17       	cp	r26, r18
    6ec2:	b3 07       	cpc	r27, r19
    6ec4:	e4 07       	cpc	r30, r20
    6ec6:	f5 07       	cpc	r31, r21
    6ec8:	20 f0       	brcs	.+8      	; 0x6ed2 <__udivmodsi4_ep>
    6eca:	a2 1b       	sub	r26, r18
    6ecc:	b3 0b       	sbc	r27, r19
    6ece:	e4 0b       	sbc	r30, r20
    6ed0:	f5 0b       	sbc	r31, r21

00006ed2 <__udivmodsi4_ep>:
    6ed2:	66 1f       	adc	r22, r22
    6ed4:	77 1f       	adc	r23, r23
    6ed6:	88 1f       	adc	r24, r24
    6ed8:	99 1f       	adc	r25, r25
    6eda:	1a 94       	dec	r1
    6edc:	69 f7       	brne	.-38     	; 0x6eb8 <__udivmodsi4_loop>
    6ede:	60 95       	com	r22
    6ee0:	70 95       	com	r23
    6ee2:	80 95       	com	r24
    6ee4:	90 95       	com	r25
    6ee6:	9b 01       	movw	r18, r22
    6ee8:	ac 01       	movw	r20, r24
    6eea:	bd 01       	movw	r22, r26
    6eec:	cf 01       	movw	r24, r30
    6eee:	08 95       	ret

00006ef0 <__tablejump2__>:
    6ef0:	ee 0f       	add	r30, r30
    6ef2:	ff 1f       	adc	r31, r31
    6ef4:	88 1f       	adc	r24, r24
    6ef6:	8b bf       	out	0x3b, r24	; 59
    6ef8:	07 90       	elpm	r0, Z+
    6efa:	f6 91       	elpm	r31, Z
    6efc:	e0 2d       	mov	r30, r0
    6efe:	19 94       	eijmp

00006f00 <calloc>:
    6f00:	0f 93       	push	r16
    6f02:	1f 93       	push	r17
    6f04:	cf 93       	push	r28
    6f06:	df 93       	push	r29
    6f08:	86 9f       	mul	r24, r22
    6f0a:	80 01       	movw	r16, r0
    6f0c:	87 9f       	mul	r24, r23
    6f0e:	10 0d       	add	r17, r0
    6f10:	96 9f       	mul	r25, r22
    6f12:	10 0d       	add	r17, r0
    6f14:	11 24       	eor	r1, r1
    6f16:	c8 01       	movw	r24, r16
    6f18:	0d d0       	rcall	.+26     	; 0x6f34 <malloc>
    6f1a:	ec 01       	movw	r28, r24
    6f1c:	00 97       	sbiw	r24, 0x00	; 0
    6f1e:	21 f0       	breq	.+8      	; 0x6f28 <calloc+0x28>
    6f20:	a8 01       	movw	r20, r16
    6f22:	60 e0       	ldi	r22, 0x00	; 0
    6f24:	70 e0       	ldi	r23, 0x00	; 0
    6f26:	34 d1       	rcall	.+616    	; 0x7190 <memset>
    6f28:	ce 01       	movw	r24, r28
    6f2a:	df 91       	pop	r29
    6f2c:	cf 91       	pop	r28
    6f2e:	1f 91       	pop	r17
    6f30:	0f 91       	pop	r16
    6f32:	08 95       	ret

00006f34 <malloc>:
    6f34:	0f 93       	push	r16
    6f36:	1f 93       	push	r17
    6f38:	cf 93       	push	r28
    6f3a:	df 93       	push	r29
    6f3c:	82 30       	cpi	r24, 0x02	; 2
    6f3e:	91 05       	cpc	r25, r1
    6f40:	10 f4       	brcc	.+4      	; 0x6f46 <malloc+0x12>
    6f42:	82 e0       	ldi	r24, 0x02	; 2
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <__flp>
    6f4a:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <__flp+0x1>
    6f4e:	20 e0       	ldi	r18, 0x00	; 0
    6f50:	30 e0       	ldi	r19, 0x00	; 0
    6f52:	a0 e0       	ldi	r26, 0x00	; 0
    6f54:	b0 e0       	ldi	r27, 0x00	; 0
    6f56:	30 97       	sbiw	r30, 0x00	; 0
    6f58:	19 f1       	breq	.+70     	; 0x6fa0 <malloc+0x6c>
    6f5a:	40 81       	ld	r20, Z
    6f5c:	51 81       	ldd	r21, Z+1	; 0x01
    6f5e:	02 81       	ldd	r16, Z+2	; 0x02
    6f60:	13 81       	ldd	r17, Z+3	; 0x03
    6f62:	48 17       	cp	r20, r24
    6f64:	59 07       	cpc	r21, r25
    6f66:	c8 f0       	brcs	.+50     	; 0x6f9a <malloc+0x66>
    6f68:	84 17       	cp	r24, r20
    6f6a:	95 07       	cpc	r25, r21
    6f6c:	69 f4       	brne	.+26     	; 0x6f88 <malloc+0x54>
    6f6e:	10 97       	sbiw	r26, 0x00	; 0
    6f70:	31 f0       	breq	.+12     	; 0x6f7e <malloc+0x4a>
    6f72:	12 96       	adiw	r26, 0x02	; 2
    6f74:	0c 93       	st	X, r16
    6f76:	12 97       	sbiw	r26, 0x02	; 2
    6f78:	13 96       	adiw	r26, 0x03	; 3
    6f7a:	1c 93       	st	X, r17
    6f7c:	27 c0       	rjmp	.+78     	; 0x6fcc <malloc+0x98>
    6f7e:	00 93 6d 19 	sts	0x196D, r16	; 0x80196d <__flp>
    6f82:	10 93 6e 19 	sts	0x196E, r17	; 0x80196e <__flp+0x1>
    6f86:	22 c0       	rjmp	.+68     	; 0x6fcc <malloc+0x98>
    6f88:	21 15       	cp	r18, r1
    6f8a:	31 05       	cpc	r19, r1
    6f8c:	19 f0       	breq	.+6      	; 0x6f94 <malloc+0x60>
    6f8e:	42 17       	cp	r20, r18
    6f90:	53 07       	cpc	r21, r19
    6f92:	18 f4       	brcc	.+6      	; 0x6f9a <malloc+0x66>
    6f94:	9a 01       	movw	r18, r20
    6f96:	bd 01       	movw	r22, r26
    6f98:	ef 01       	movw	r28, r30
    6f9a:	df 01       	movw	r26, r30
    6f9c:	f8 01       	movw	r30, r16
    6f9e:	db cf       	rjmp	.-74     	; 0x6f56 <malloc+0x22>
    6fa0:	21 15       	cp	r18, r1
    6fa2:	31 05       	cpc	r19, r1
    6fa4:	f9 f0       	breq	.+62     	; 0x6fe4 <malloc+0xb0>
    6fa6:	28 1b       	sub	r18, r24
    6fa8:	39 0b       	sbc	r19, r25
    6faa:	24 30       	cpi	r18, 0x04	; 4
    6fac:	31 05       	cpc	r19, r1
    6fae:	80 f4       	brcc	.+32     	; 0x6fd0 <malloc+0x9c>
    6fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    6fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    6fb4:	61 15       	cp	r22, r1
    6fb6:	71 05       	cpc	r23, r1
    6fb8:	21 f0       	breq	.+8      	; 0x6fc2 <malloc+0x8e>
    6fba:	fb 01       	movw	r30, r22
    6fbc:	93 83       	std	Z+3, r25	; 0x03
    6fbe:	82 83       	std	Z+2, r24	; 0x02
    6fc0:	04 c0       	rjmp	.+8      	; 0x6fca <malloc+0x96>
    6fc2:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <__flp+0x1>
    6fc6:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <__flp>
    6fca:	fe 01       	movw	r30, r28
    6fcc:	32 96       	adiw	r30, 0x02	; 2
    6fce:	44 c0       	rjmp	.+136    	; 0x7058 <malloc+0x124>
    6fd0:	fe 01       	movw	r30, r28
    6fd2:	e2 0f       	add	r30, r18
    6fd4:	f3 1f       	adc	r31, r19
    6fd6:	81 93       	st	Z+, r24
    6fd8:	91 93       	st	Z+, r25
    6fda:	22 50       	subi	r18, 0x02	; 2
    6fdc:	31 09       	sbc	r19, r1
    6fde:	39 83       	std	Y+1, r19	; 0x01
    6fe0:	28 83       	st	Y, r18
    6fe2:	3a c0       	rjmp	.+116    	; 0x7058 <malloc+0x124>
    6fe4:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <__brkval>
    6fe8:	30 91 6c 19 	lds	r19, 0x196C	; 0x80196c <__brkval+0x1>
    6fec:	23 2b       	or	r18, r19
    6fee:	41 f4       	brne	.+16     	; 0x7000 <malloc+0xcc>
    6ff0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6ff4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6ff8:	30 93 6c 19 	sts	0x196C, r19	; 0x80196c <__brkval+0x1>
    6ffc:	20 93 6b 19 	sts	0x196B, r18	; 0x80196b <__brkval>
    7000:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    7004:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7008:	21 15       	cp	r18, r1
    700a:	31 05       	cpc	r19, r1
    700c:	41 f4       	brne	.+16     	; 0x701e <malloc+0xea>
    700e:	2d b7       	in	r18, 0x3d	; 61
    7010:	3e b7       	in	r19, 0x3e	; 62
    7012:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7016:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    701a:	24 1b       	sub	r18, r20
    701c:	35 0b       	sbc	r19, r21
    701e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <__brkval>
    7022:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <__brkval+0x1>
    7026:	e2 17       	cp	r30, r18
    7028:	f3 07       	cpc	r31, r19
    702a:	a0 f4       	brcc	.+40     	; 0x7054 <malloc+0x120>
    702c:	2e 1b       	sub	r18, r30
    702e:	3f 0b       	sbc	r19, r31
    7030:	28 17       	cp	r18, r24
    7032:	39 07       	cpc	r19, r25
    7034:	78 f0       	brcs	.+30     	; 0x7054 <malloc+0x120>
    7036:	ac 01       	movw	r20, r24
    7038:	4e 5f       	subi	r20, 0xFE	; 254
    703a:	5f 4f       	sbci	r21, 0xFF	; 255
    703c:	24 17       	cp	r18, r20
    703e:	35 07       	cpc	r19, r21
    7040:	48 f0       	brcs	.+18     	; 0x7054 <malloc+0x120>
    7042:	4e 0f       	add	r20, r30
    7044:	5f 1f       	adc	r21, r31
    7046:	50 93 6c 19 	sts	0x196C, r21	; 0x80196c <__brkval+0x1>
    704a:	40 93 6b 19 	sts	0x196B, r20	; 0x80196b <__brkval>
    704e:	81 93       	st	Z+, r24
    7050:	91 93       	st	Z+, r25
    7052:	02 c0       	rjmp	.+4      	; 0x7058 <malloc+0x124>
    7054:	e0 e0       	ldi	r30, 0x00	; 0
    7056:	f0 e0       	ldi	r31, 0x00	; 0
    7058:	cf 01       	movw	r24, r30
    705a:	df 91       	pop	r29
    705c:	cf 91       	pop	r28
    705e:	1f 91       	pop	r17
    7060:	0f 91       	pop	r16
    7062:	08 95       	ret

00007064 <free>:
    7064:	cf 93       	push	r28
    7066:	df 93       	push	r29
    7068:	00 97       	sbiw	r24, 0x00	; 0
    706a:	09 f4       	brne	.+2      	; 0x706e <free+0xa>
    706c:	81 c0       	rjmp	.+258    	; 0x7170 <free+0x10c>
    706e:	fc 01       	movw	r30, r24
    7070:	32 97       	sbiw	r30, 0x02	; 2
    7072:	13 82       	std	Z+3, r1	; 0x03
    7074:	12 82       	std	Z+2, r1	; 0x02
    7076:	a0 91 6d 19 	lds	r26, 0x196D	; 0x80196d <__flp>
    707a:	b0 91 6e 19 	lds	r27, 0x196E	; 0x80196e <__flp+0x1>
    707e:	10 97       	sbiw	r26, 0x00	; 0
    7080:	81 f4       	brne	.+32     	; 0x70a2 <free+0x3e>
    7082:	20 81       	ld	r18, Z
    7084:	31 81       	ldd	r19, Z+1	; 0x01
    7086:	82 0f       	add	r24, r18
    7088:	93 1f       	adc	r25, r19
    708a:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <__brkval>
    708e:	30 91 6c 19 	lds	r19, 0x196C	; 0x80196c <__brkval+0x1>
    7092:	28 17       	cp	r18, r24
    7094:	39 07       	cpc	r19, r25
    7096:	51 f5       	brne	.+84     	; 0x70ec <free+0x88>
    7098:	f0 93 6c 19 	sts	0x196C, r31	; 0x80196c <__brkval+0x1>
    709c:	e0 93 6b 19 	sts	0x196B, r30	; 0x80196b <__brkval>
    70a0:	67 c0       	rjmp	.+206    	; 0x7170 <free+0x10c>
    70a2:	ed 01       	movw	r28, r26
    70a4:	20 e0       	ldi	r18, 0x00	; 0
    70a6:	30 e0       	ldi	r19, 0x00	; 0
    70a8:	ce 17       	cp	r28, r30
    70aa:	df 07       	cpc	r29, r31
    70ac:	40 f4       	brcc	.+16     	; 0x70be <free+0x5a>
    70ae:	4a 81       	ldd	r20, Y+2	; 0x02
    70b0:	5b 81       	ldd	r21, Y+3	; 0x03
    70b2:	9e 01       	movw	r18, r28
    70b4:	41 15       	cp	r20, r1
    70b6:	51 05       	cpc	r21, r1
    70b8:	f1 f0       	breq	.+60     	; 0x70f6 <free+0x92>
    70ba:	ea 01       	movw	r28, r20
    70bc:	f5 cf       	rjmp	.-22     	; 0x70a8 <free+0x44>
    70be:	d3 83       	std	Z+3, r29	; 0x03
    70c0:	c2 83       	std	Z+2, r28	; 0x02
    70c2:	40 81       	ld	r20, Z
    70c4:	51 81       	ldd	r21, Z+1	; 0x01
    70c6:	84 0f       	add	r24, r20
    70c8:	95 1f       	adc	r25, r21
    70ca:	c8 17       	cp	r28, r24
    70cc:	d9 07       	cpc	r29, r25
    70ce:	59 f4       	brne	.+22     	; 0x70e6 <free+0x82>
    70d0:	88 81       	ld	r24, Y
    70d2:	99 81       	ldd	r25, Y+1	; 0x01
    70d4:	84 0f       	add	r24, r20
    70d6:	95 1f       	adc	r25, r21
    70d8:	02 96       	adiw	r24, 0x02	; 2
    70da:	91 83       	std	Z+1, r25	; 0x01
    70dc:	80 83       	st	Z, r24
    70de:	8a 81       	ldd	r24, Y+2	; 0x02
    70e0:	9b 81       	ldd	r25, Y+3	; 0x03
    70e2:	93 83       	std	Z+3, r25	; 0x03
    70e4:	82 83       	std	Z+2, r24	; 0x02
    70e6:	21 15       	cp	r18, r1
    70e8:	31 05       	cpc	r19, r1
    70ea:	29 f4       	brne	.+10     	; 0x70f6 <free+0x92>
    70ec:	f0 93 6e 19 	sts	0x196E, r31	; 0x80196e <__flp+0x1>
    70f0:	e0 93 6d 19 	sts	0x196D, r30	; 0x80196d <__flp>
    70f4:	3d c0       	rjmp	.+122    	; 0x7170 <free+0x10c>
    70f6:	e9 01       	movw	r28, r18
    70f8:	fb 83       	std	Y+3, r31	; 0x03
    70fa:	ea 83       	std	Y+2, r30	; 0x02
    70fc:	49 91       	ld	r20, Y+
    70fe:	59 91       	ld	r21, Y+
    7100:	c4 0f       	add	r28, r20
    7102:	d5 1f       	adc	r29, r21
    7104:	ec 17       	cp	r30, r28
    7106:	fd 07       	cpc	r31, r29
    7108:	61 f4       	brne	.+24     	; 0x7122 <free+0xbe>
    710a:	80 81       	ld	r24, Z
    710c:	91 81       	ldd	r25, Z+1	; 0x01
    710e:	84 0f       	add	r24, r20
    7110:	95 1f       	adc	r25, r21
    7112:	02 96       	adiw	r24, 0x02	; 2
    7114:	e9 01       	movw	r28, r18
    7116:	99 83       	std	Y+1, r25	; 0x01
    7118:	88 83       	st	Y, r24
    711a:	82 81       	ldd	r24, Z+2	; 0x02
    711c:	93 81       	ldd	r25, Z+3	; 0x03
    711e:	9b 83       	std	Y+3, r25	; 0x03
    7120:	8a 83       	std	Y+2, r24	; 0x02
    7122:	e0 e0       	ldi	r30, 0x00	; 0
    7124:	f0 e0       	ldi	r31, 0x00	; 0
    7126:	12 96       	adiw	r26, 0x02	; 2
    7128:	8d 91       	ld	r24, X+
    712a:	9c 91       	ld	r25, X
    712c:	13 97       	sbiw	r26, 0x03	; 3
    712e:	00 97       	sbiw	r24, 0x00	; 0
    7130:	19 f0       	breq	.+6      	; 0x7138 <free+0xd4>
    7132:	fd 01       	movw	r30, r26
    7134:	dc 01       	movw	r26, r24
    7136:	f7 cf       	rjmp	.-18     	; 0x7126 <free+0xc2>
    7138:	8d 91       	ld	r24, X+
    713a:	9c 91       	ld	r25, X
    713c:	11 97       	sbiw	r26, 0x01	; 1
    713e:	9d 01       	movw	r18, r26
    7140:	2e 5f       	subi	r18, 0xFE	; 254
    7142:	3f 4f       	sbci	r19, 0xFF	; 255
    7144:	82 0f       	add	r24, r18
    7146:	93 1f       	adc	r25, r19
    7148:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <__brkval>
    714c:	30 91 6c 19 	lds	r19, 0x196C	; 0x80196c <__brkval+0x1>
    7150:	28 17       	cp	r18, r24
    7152:	39 07       	cpc	r19, r25
    7154:	69 f4       	brne	.+26     	; 0x7170 <free+0x10c>
    7156:	30 97       	sbiw	r30, 0x00	; 0
    7158:	29 f4       	brne	.+10     	; 0x7164 <free+0x100>
    715a:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <__flp+0x1>
    715e:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <__flp>
    7162:	02 c0       	rjmp	.+4      	; 0x7168 <free+0x104>
    7164:	13 82       	std	Z+3, r1	; 0x03
    7166:	12 82       	std	Z+2, r1	; 0x02
    7168:	b0 93 6c 19 	sts	0x196C, r27	; 0x80196c <__brkval+0x1>
    716c:	a0 93 6b 19 	sts	0x196B, r26	; 0x80196b <__brkval>
    7170:	df 91       	pop	r29
    7172:	cf 91       	pop	r28
    7174:	08 95       	ret

00007176 <abort>:
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	f8 94       	cli
    717c:	7d c3       	rjmp	.+1786   	; 0x7878 <_exit>

0000717e <memcpy>:
    717e:	fb 01       	movw	r30, r22
    7180:	dc 01       	movw	r26, r24
    7182:	02 c0       	rjmp	.+4      	; 0x7188 <memcpy+0xa>
    7184:	01 90       	ld	r0, Z+
    7186:	0d 92       	st	X+, r0
    7188:	41 50       	subi	r20, 0x01	; 1
    718a:	50 40       	sbci	r21, 0x00	; 0
    718c:	d8 f7       	brcc	.-10     	; 0x7184 <memcpy+0x6>
    718e:	08 95       	ret

00007190 <memset>:
    7190:	dc 01       	movw	r26, r24
    7192:	01 c0       	rjmp	.+2      	; 0x7196 <memset+0x6>
    7194:	6d 93       	st	X+, r22
    7196:	41 50       	subi	r20, 0x01	; 1
    7198:	50 40       	sbci	r21, 0x00	; 0
    719a:	e0 f7       	brcc	.-8      	; 0x7194 <memset+0x4>
    719c:	08 95       	ret

0000719e <strcasestr>:
    719e:	fb 01       	movw	r30, r22
    71a0:	51 91       	ld	r21, Z+
    71a2:	55 23       	and	r21, r21
    71a4:	b1 f0       	breq	.+44     	; 0x71d2 <strcasestr+0x34>
    71a6:	bf 01       	movw	r22, r30
    71a8:	dc 01       	movw	r26, r24
    71aa:	05 2e       	mov	r0, r21
    71ac:	4d 91       	ld	r20, X+
    71ae:	44 23       	and	r20, r20
    71b0:	69 f0       	breq	.+26     	; 0x71cc <strcasestr+0x2e>
    71b2:	10 d0       	rcall	.+32     	; 0x71d4 <strcasestr+0x36>
    71b4:	d9 f7       	brne	.-10     	; 0x71ac <strcasestr+0xe>
    71b6:	cd 01       	movw	r24, r26
    71b8:	01 90       	ld	r0, Z+
    71ba:	00 20       	and	r0, r0
    71bc:	49 f0       	breq	.+18     	; 0x71d0 <strcasestr+0x32>
    71be:	4d 91       	ld	r20, X+
    71c0:	41 11       	cpse	r20, r1
    71c2:	08 d0       	rcall	.+16     	; 0x71d4 <strcasestr+0x36>
    71c4:	c9 f3       	breq	.-14     	; 0x71b8 <strcasestr+0x1a>
    71c6:	fb 01       	movw	r30, r22
    71c8:	41 11       	cpse	r20, r1
    71ca:	ee cf       	rjmp	.-36     	; 0x71a8 <strcasestr+0xa>
    71cc:	81 e0       	ldi	r24, 0x01	; 1
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	01 97       	sbiw	r24, 0x01	; 1
    71d2:	08 95       	ret
    71d4:	40 25       	eor	r20, r0
    71d6:	39 f0       	breq	.+14     	; 0x71e6 <strcasestr+0x48>
    71d8:	40 32       	cpi	r20, 0x20	; 32
    71da:	29 f4       	brne	.+10     	; 0x71e6 <strcasestr+0x48>
    71dc:	40 29       	or	r20, r0
    71de:	4b 57       	subi	r20, 0x7B	; 123
    71e0:	46 5e       	subi	r20, 0xE6	; 230
    71e2:	08 f0       	brcs	.+2      	; 0x71e6 <strcasestr+0x48>
    71e4:	18 94       	sez
    71e6:	08 95       	ret

000071e8 <strcat>:
    71e8:	fb 01       	movw	r30, r22
    71ea:	dc 01       	movw	r26, r24
    71ec:	0d 90       	ld	r0, X+
    71ee:	00 20       	and	r0, r0
    71f0:	e9 f7       	brne	.-6      	; 0x71ec <strcat+0x4>
    71f2:	11 97       	sbiw	r26, 0x01	; 1
    71f4:	01 90       	ld	r0, Z+
    71f6:	0d 92       	st	X+, r0
    71f8:	00 20       	and	r0, r0
    71fa:	e1 f7       	brne	.-8      	; 0x71f4 <strcat+0xc>
    71fc:	08 95       	ret

000071fe <strcpy>:
    71fe:	fb 01       	movw	r30, r22
    7200:	dc 01       	movw	r26, r24
    7202:	01 90       	ld	r0, Z+
    7204:	0d 92       	st	X+, r0
    7206:	00 20       	and	r0, r0
    7208:	e1 f7       	brne	.-8      	; 0x7202 <strcpy+0x4>
    720a:	08 95       	ret

0000720c <strncasecmp>:
    720c:	fb 01       	movw	r30, r22
    720e:	dc 01       	movw	r26, r24
    7210:	41 50       	subi	r20, 0x01	; 1
    7212:	50 40       	sbci	r21, 0x00	; 0
    7214:	88 f0       	brcs	.+34     	; 0x7238 <strncasecmp+0x2c>
    7216:	8d 91       	ld	r24, X+
    7218:	81 34       	cpi	r24, 0x41	; 65
    721a:	1c f0       	brlt	.+6      	; 0x7222 <strncasecmp+0x16>
    721c:	8b 35       	cpi	r24, 0x5B	; 91
    721e:	0c f4       	brge	.+2      	; 0x7222 <strncasecmp+0x16>
    7220:	80 5e       	subi	r24, 0xE0	; 224
    7222:	61 91       	ld	r22, Z+
    7224:	61 34       	cpi	r22, 0x41	; 65
    7226:	1c f0       	brlt	.+6      	; 0x722e <strncasecmp+0x22>
    7228:	6b 35       	cpi	r22, 0x5B	; 91
    722a:	0c f4       	brge	.+2      	; 0x722e <strncasecmp+0x22>
    722c:	60 5e       	subi	r22, 0xE0	; 224
    722e:	86 1b       	sub	r24, r22
    7230:	61 11       	cpse	r22, r1
    7232:	71 f3       	breq	.-36     	; 0x7210 <strncasecmp+0x4>
    7234:	99 0b       	sbc	r25, r25
    7236:	08 95       	ret
    7238:	88 1b       	sub	r24, r24
    723a:	fc cf       	rjmp	.-8      	; 0x7234 <strncasecmp+0x28>

0000723c <printf>:
    723c:	cf 93       	push	r28
    723e:	df 93       	push	r29
    7240:	cd b7       	in	r28, 0x3d	; 61
    7242:	de b7       	in	r29, 0x3e	; 62
    7244:	ae 01       	movw	r20, r28
    7246:	4a 5f       	subi	r20, 0xFA	; 250
    7248:	5f 4f       	sbci	r21, 0xFF	; 255
    724a:	fa 01       	movw	r30, r20
    724c:	61 91       	ld	r22, Z+
    724e:	71 91       	ld	r23, Z+
    7250:	af 01       	movw	r20, r30
    7252:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <__iob+0x2>
    7256:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <__iob+0x3>
    725a:	61 d0       	rcall	.+194    	; 0x731e <vfprintf>
    725c:	df 91       	pop	r29
    725e:	cf 91       	pop	r28
    7260:	08 95       	ret

00007262 <puts>:
    7262:	0f 93       	push	r16
    7264:	1f 93       	push	r17
    7266:	cf 93       	push	r28
    7268:	df 93       	push	r29
    726a:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <__iob+0x2>
    726e:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <__iob+0x3>
    7272:	23 81       	ldd	r18, Z+3	; 0x03
    7274:	21 ff       	sbrs	r18, 1
    7276:	1b c0       	rjmp	.+54     	; 0x72ae <puts+0x4c>
    7278:	8c 01       	movw	r16, r24
    727a:	d0 e0       	ldi	r29, 0x00	; 0
    727c:	c0 e0       	ldi	r28, 0x00	; 0
    727e:	f8 01       	movw	r30, r16
    7280:	81 91       	ld	r24, Z+
    7282:	8f 01       	movw	r16, r30
    7284:	60 91 71 19 	lds	r22, 0x1971	; 0x801971 <__iob+0x2>
    7288:	70 91 72 19 	lds	r23, 0x1972	; 0x801972 <__iob+0x3>
    728c:	db 01       	movw	r26, r22
    728e:	18 96       	adiw	r26, 0x08	; 8
    7290:	ed 91       	ld	r30, X+
    7292:	fc 91       	ld	r31, X
    7294:	19 97       	sbiw	r26, 0x09	; 9
    7296:	88 23       	and	r24, r24
    7298:	31 f0       	breq	.+12     	; 0x72a6 <puts+0x44>
    729a:	19 95       	eicall
    729c:	89 2b       	or	r24, r25
    729e:	79 f3       	breq	.-34     	; 0x727e <puts+0x1c>
    72a0:	df ef       	ldi	r29, 0xFF	; 255
    72a2:	cf ef       	ldi	r28, 0xFF	; 255
    72a4:	ec cf       	rjmp	.-40     	; 0x727e <puts+0x1c>
    72a6:	8a e0       	ldi	r24, 0x0A	; 10
    72a8:	19 95       	eicall
    72aa:	89 2b       	or	r24, r25
    72ac:	19 f0       	breq	.+6      	; 0x72b4 <puts+0x52>
    72ae:	8f ef       	ldi	r24, 0xFF	; 255
    72b0:	9f ef       	ldi	r25, 0xFF	; 255
    72b2:	02 c0       	rjmp	.+4      	; 0x72b8 <puts+0x56>
    72b4:	8d 2f       	mov	r24, r29
    72b6:	9c 2f       	mov	r25, r28
    72b8:	df 91       	pop	r29
    72ba:	cf 91       	pop	r28
    72bc:	1f 91       	pop	r17
    72be:	0f 91       	pop	r16
    72c0:	08 95       	ret

000072c2 <sprintf>:
    72c2:	0f 93       	push	r16
    72c4:	1f 93       	push	r17
    72c6:	cf 93       	push	r28
    72c8:	df 93       	push	r29
    72ca:	cd b7       	in	r28, 0x3d	; 61
    72cc:	de b7       	in	r29, 0x3e	; 62
    72ce:	2e 97       	sbiw	r28, 0x0e	; 14
    72d0:	0f b6       	in	r0, 0x3f	; 63
    72d2:	f8 94       	cli
    72d4:	de bf       	out	0x3e, r29	; 62
    72d6:	0f be       	out	0x3f, r0	; 63
    72d8:	cd bf       	out	0x3d, r28	; 61
    72da:	0e 89       	ldd	r16, Y+22	; 0x16
    72dc:	1f 89       	ldd	r17, Y+23	; 0x17
    72de:	86 e0       	ldi	r24, 0x06	; 6
    72e0:	8c 83       	std	Y+4, r24	; 0x04
    72e2:	1a 83       	std	Y+2, r17	; 0x02
    72e4:	09 83       	std	Y+1, r16	; 0x01
    72e6:	8f ef       	ldi	r24, 0xFF	; 255
    72e8:	9f e7       	ldi	r25, 0x7F	; 127
    72ea:	9e 83       	std	Y+6, r25	; 0x06
    72ec:	8d 83       	std	Y+5, r24	; 0x05
    72ee:	ae 01       	movw	r20, r28
    72f0:	46 5e       	subi	r20, 0xE6	; 230
    72f2:	5f 4f       	sbci	r21, 0xFF	; 255
    72f4:	68 8d       	ldd	r22, Y+24	; 0x18
    72f6:	79 8d       	ldd	r23, Y+25	; 0x19
    72f8:	ce 01       	movw	r24, r28
    72fa:	01 96       	adiw	r24, 0x01	; 1
    72fc:	10 d0       	rcall	.+32     	; 0x731e <vfprintf>
    72fe:	ef 81       	ldd	r30, Y+7	; 0x07
    7300:	f8 85       	ldd	r31, Y+8	; 0x08
    7302:	e0 0f       	add	r30, r16
    7304:	f1 1f       	adc	r31, r17
    7306:	10 82       	st	Z, r1
    7308:	2e 96       	adiw	r28, 0x0e	; 14
    730a:	0f b6       	in	r0, 0x3f	; 63
    730c:	f8 94       	cli
    730e:	de bf       	out	0x3e, r29	; 62
    7310:	0f be       	out	0x3f, r0	; 63
    7312:	cd bf       	out	0x3d, r28	; 61
    7314:	df 91       	pop	r29
    7316:	cf 91       	pop	r28
    7318:	1f 91       	pop	r17
    731a:	0f 91       	pop	r16
    731c:	08 95       	ret

0000731e <vfprintf>:
    731e:	2f 92       	push	r2
    7320:	3f 92       	push	r3
    7322:	4f 92       	push	r4
    7324:	5f 92       	push	r5
    7326:	6f 92       	push	r6
    7328:	7f 92       	push	r7
    732a:	8f 92       	push	r8
    732c:	9f 92       	push	r9
    732e:	af 92       	push	r10
    7330:	bf 92       	push	r11
    7332:	cf 92       	push	r12
    7334:	df 92       	push	r13
    7336:	ef 92       	push	r14
    7338:	ff 92       	push	r15
    733a:	0f 93       	push	r16
    733c:	1f 93       	push	r17
    733e:	cf 93       	push	r28
    7340:	df 93       	push	r29
    7342:	cd b7       	in	r28, 0x3d	; 61
    7344:	de b7       	in	r29, 0x3e	; 62
    7346:	2b 97       	sbiw	r28, 0x0b	; 11
    7348:	0f b6       	in	r0, 0x3f	; 63
    734a:	f8 94       	cli
    734c:	de bf       	out	0x3e, r29	; 62
    734e:	0f be       	out	0x3f, r0	; 63
    7350:	cd bf       	out	0x3d, r28	; 61
    7352:	6c 01       	movw	r12, r24
    7354:	7b 01       	movw	r14, r22
    7356:	8a 01       	movw	r16, r20
    7358:	fc 01       	movw	r30, r24
    735a:	17 82       	std	Z+7, r1	; 0x07
    735c:	16 82       	std	Z+6, r1	; 0x06
    735e:	83 81       	ldd	r24, Z+3	; 0x03
    7360:	81 ff       	sbrs	r24, 1
    7362:	bf c1       	rjmp	.+894    	; 0x76e2 <vfprintf+0x3c4>
    7364:	ce 01       	movw	r24, r28
    7366:	01 96       	adiw	r24, 0x01	; 1
    7368:	3c 01       	movw	r6, r24
    736a:	f6 01       	movw	r30, r12
    736c:	93 81       	ldd	r25, Z+3	; 0x03
    736e:	f7 01       	movw	r30, r14
    7370:	93 fd       	sbrc	r25, 3
    7372:	85 91       	lpm	r24, Z+
    7374:	93 ff       	sbrs	r25, 3
    7376:	81 91       	ld	r24, Z+
    7378:	7f 01       	movw	r14, r30
    737a:	88 23       	and	r24, r24
    737c:	09 f4       	brne	.+2      	; 0x7380 <vfprintf+0x62>
    737e:	ad c1       	rjmp	.+858    	; 0x76da <vfprintf+0x3bc>
    7380:	85 32       	cpi	r24, 0x25	; 37
    7382:	39 f4       	brne	.+14     	; 0x7392 <vfprintf+0x74>
    7384:	93 fd       	sbrc	r25, 3
    7386:	85 91       	lpm	r24, Z+
    7388:	93 ff       	sbrs	r25, 3
    738a:	81 91       	ld	r24, Z+
    738c:	7f 01       	movw	r14, r30
    738e:	85 32       	cpi	r24, 0x25	; 37
    7390:	21 f4       	brne	.+8      	; 0x739a <vfprintf+0x7c>
    7392:	b6 01       	movw	r22, r12
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	d6 d1       	rcall	.+940    	; 0x7744 <fputc>
    7398:	e8 cf       	rjmp	.-48     	; 0x736a <vfprintf+0x4c>
    739a:	91 2c       	mov	r9, r1
    739c:	21 2c       	mov	r2, r1
    739e:	31 2c       	mov	r3, r1
    73a0:	ff e1       	ldi	r31, 0x1F	; 31
    73a2:	f3 15       	cp	r31, r3
    73a4:	d8 f0       	brcs	.+54     	; 0x73dc <vfprintf+0xbe>
    73a6:	8b 32       	cpi	r24, 0x2B	; 43
    73a8:	79 f0       	breq	.+30     	; 0x73c8 <vfprintf+0xaa>
    73aa:	38 f4       	brcc	.+14     	; 0x73ba <vfprintf+0x9c>
    73ac:	80 32       	cpi	r24, 0x20	; 32
    73ae:	79 f0       	breq	.+30     	; 0x73ce <vfprintf+0xb0>
    73b0:	83 32       	cpi	r24, 0x23	; 35
    73b2:	a1 f4       	brne	.+40     	; 0x73dc <vfprintf+0xbe>
    73b4:	23 2d       	mov	r18, r3
    73b6:	20 61       	ori	r18, 0x10	; 16
    73b8:	1d c0       	rjmp	.+58     	; 0x73f4 <vfprintf+0xd6>
    73ba:	8d 32       	cpi	r24, 0x2D	; 45
    73bc:	61 f0       	breq	.+24     	; 0x73d6 <vfprintf+0xb8>
    73be:	80 33       	cpi	r24, 0x30	; 48
    73c0:	69 f4       	brne	.+26     	; 0x73dc <vfprintf+0xbe>
    73c2:	23 2d       	mov	r18, r3
    73c4:	21 60       	ori	r18, 0x01	; 1
    73c6:	16 c0       	rjmp	.+44     	; 0x73f4 <vfprintf+0xd6>
    73c8:	83 2d       	mov	r24, r3
    73ca:	82 60       	ori	r24, 0x02	; 2
    73cc:	38 2e       	mov	r3, r24
    73ce:	e3 2d       	mov	r30, r3
    73d0:	e4 60       	ori	r30, 0x04	; 4
    73d2:	3e 2e       	mov	r3, r30
    73d4:	2a c0       	rjmp	.+84     	; 0x742a <vfprintf+0x10c>
    73d6:	f3 2d       	mov	r31, r3
    73d8:	f8 60       	ori	r31, 0x08	; 8
    73da:	1d c0       	rjmp	.+58     	; 0x7416 <vfprintf+0xf8>
    73dc:	37 fc       	sbrc	r3, 7
    73de:	2d c0       	rjmp	.+90     	; 0x743a <vfprintf+0x11c>
    73e0:	20 ed       	ldi	r18, 0xD0	; 208
    73e2:	28 0f       	add	r18, r24
    73e4:	2a 30       	cpi	r18, 0x0A	; 10
    73e6:	40 f0       	brcs	.+16     	; 0x73f8 <vfprintf+0xda>
    73e8:	8e 32       	cpi	r24, 0x2E	; 46
    73ea:	b9 f4       	brne	.+46     	; 0x741a <vfprintf+0xfc>
    73ec:	36 fc       	sbrc	r3, 6
    73ee:	75 c1       	rjmp	.+746    	; 0x76da <vfprintf+0x3bc>
    73f0:	23 2d       	mov	r18, r3
    73f2:	20 64       	ori	r18, 0x40	; 64
    73f4:	32 2e       	mov	r3, r18
    73f6:	19 c0       	rjmp	.+50     	; 0x742a <vfprintf+0x10c>
    73f8:	36 fe       	sbrs	r3, 6
    73fa:	06 c0       	rjmp	.+12     	; 0x7408 <vfprintf+0xea>
    73fc:	8a e0       	ldi	r24, 0x0A	; 10
    73fe:	98 9e       	mul	r9, r24
    7400:	20 0d       	add	r18, r0
    7402:	11 24       	eor	r1, r1
    7404:	92 2e       	mov	r9, r18
    7406:	11 c0       	rjmp	.+34     	; 0x742a <vfprintf+0x10c>
    7408:	ea e0       	ldi	r30, 0x0A	; 10
    740a:	2e 9e       	mul	r2, r30
    740c:	20 0d       	add	r18, r0
    740e:	11 24       	eor	r1, r1
    7410:	22 2e       	mov	r2, r18
    7412:	f3 2d       	mov	r31, r3
    7414:	f0 62       	ori	r31, 0x20	; 32
    7416:	3f 2e       	mov	r3, r31
    7418:	08 c0       	rjmp	.+16     	; 0x742a <vfprintf+0x10c>
    741a:	8c 36       	cpi	r24, 0x6C	; 108
    741c:	21 f4       	brne	.+8      	; 0x7426 <vfprintf+0x108>
    741e:	83 2d       	mov	r24, r3
    7420:	80 68       	ori	r24, 0x80	; 128
    7422:	38 2e       	mov	r3, r24
    7424:	02 c0       	rjmp	.+4      	; 0x742a <vfprintf+0x10c>
    7426:	88 36       	cpi	r24, 0x68	; 104
    7428:	41 f4       	brne	.+16     	; 0x743a <vfprintf+0x11c>
    742a:	f7 01       	movw	r30, r14
    742c:	93 fd       	sbrc	r25, 3
    742e:	85 91       	lpm	r24, Z+
    7430:	93 ff       	sbrs	r25, 3
    7432:	81 91       	ld	r24, Z+
    7434:	7f 01       	movw	r14, r30
    7436:	81 11       	cpse	r24, r1
    7438:	b3 cf       	rjmp	.-154    	; 0x73a0 <vfprintf+0x82>
    743a:	98 2f       	mov	r25, r24
    743c:	9f 7d       	andi	r25, 0xDF	; 223
    743e:	95 54       	subi	r25, 0x45	; 69
    7440:	93 30       	cpi	r25, 0x03	; 3
    7442:	28 f4       	brcc	.+10     	; 0x744e <vfprintf+0x130>
    7444:	0c 5f       	subi	r16, 0xFC	; 252
    7446:	1f 4f       	sbci	r17, 0xFF	; 255
    7448:	9f e3       	ldi	r25, 0x3F	; 63
    744a:	99 83       	std	Y+1, r25	; 0x01
    744c:	0d c0       	rjmp	.+26     	; 0x7468 <vfprintf+0x14a>
    744e:	83 36       	cpi	r24, 0x63	; 99
    7450:	31 f0       	breq	.+12     	; 0x745e <vfprintf+0x140>
    7452:	83 37       	cpi	r24, 0x73	; 115
    7454:	71 f0       	breq	.+28     	; 0x7472 <vfprintf+0x154>
    7456:	83 35       	cpi	r24, 0x53	; 83
    7458:	09 f0       	breq	.+2      	; 0x745c <vfprintf+0x13e>
    745a:	55 c0       	rjmp	.+170    	; 0x7506 <vfprintf+0x1e8>
    745c:	20 c0       	rjmp	.+64     	; 0x749e <vfprintf+0x180>
    745e:	f8 01       	movw	r30, r16
    7460:	80 81       	ld	r24, Z
    7462:	89 83       	std	Y+1, r24	; 0x01
    7464:	0e 5f       	subi	r16, 0xFE	; 254
    7466:	1f 4f       	sbci	r17, 0xFF	; 255
    7468:	88 24       	eor	r8, r8
    746a:	83 94       	inc	r8
    746c:	91 2c       	mov	r9, r1
    746e:	53 01       	movw	r10, r6
    7470:	12 c0       	rjmp	.+36     	; 0x7496 <vfprintf+0x178>
    7472:	28 01       	movw	r4, r16
    7474:	f2 e0       	ldi	r31, 0x02	; 2
    7476:	4f 0e       	add	r4, r31
    7478:	51 1c       	adc	r5, r1
    747a:	f8 01       	movw	r30, r16
    747c:	a0 80       	ld	r10, Z
    747e:	b1 80       	ldd	r11, Z+1	; 0x01
    7480:	36 fe       	sbrs	r3, 6
    7482:	03 c0       	rjmp	.+6      	; 0x748a <vfprintf+0x16c>
    7484:	69 2d       	mov	r22, r9
    7486:	70 e0       	ldi	r23, 0x00	; 0
    7488:	02 c0       	rjmp	.+4      	; 0x748e <vfprintf+0x170>
    748a:	6f ef       	ldi	r22, 0xFF	; 255
    748c:	7f ef       	ldi	r23, 0xFF	; 255
    748e:	c5 01       	movw	r24, r10
    7490:	4e d1       	rcall	.+668    	; 0x772e <strnlen>
    7492:	4c 01       	movw	r8, r24
    7494:	82 01       	movw	r16, r4
    7496:	f3 2d       	mov	r31, r3
    7498:	ff 77       	andi	r31, 0x7F	; 127
    749a:	3f 2e       	mov	r3, r31
    749c:	15 c0       	rjmp	.+42     	; 0x74c8 <vfprintf+0x1aa>
    749e:	28 01       	movw	r4, r16
    74a0:	22 e0       	ldi	r18, 0x02	; 2
    74a2:	42 0e       	add	r4, r18
    74a4:	51 1c       	adc	r5, r1
    74a6:	f8 01       	movw	r30, r16
    74a8:	a0 80       	ld	r10, Z
    74aa:	b1 80       	ldd	r11, Z+1	; 0x01
    74ac:	36 fe       	sbrs	r3, 6
    74ae:	03 c0       	rjmp	.+6      	; 0x74b6 <vfprintf+0x198>
    74b0:	69 2d       	mov	r22, r9
    74b2:	70 e0       	ldi	r23, 0x00	; 0
    74b4:	02 c0       	rjmp	.+4      	; 0x74ba <vfprintf+0x19c>
    74b6:	6f ef       	ldi	r22, 0xFF	; 255
    74b8:	7f ef       	ldi	r23, 0xFF	; 255
    74ba:	c5 01       	movw	r24, r10
    74bc:	2d d1       	rcall	.+602    	; 0x7718 <strnlen_P>
    74be:	4c 01       	movw	r8, r24
    74c0:	f3 2d       	mov	r31, r3
    74c2:	f0 68       	ori	r31, 0x80	; 128
    74c4:	3f 2e       	mov	r3, r31
    74c6:	82 01       	movw	r16, r4
    74c8:	33 fc       	sbrc	r3, 3
    74ca:	19 c0       	rjmp	.+50     	; 0x74fe <vfprintf+0x1e0>
    74cc:	82 2d       	mov	r24, r2
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	88 16       	cp	r8, r24
    74d2:	99 06       	cpc	r9, r25
    74d4:	a0 f4       	brcc	.+40     	; 0x74fe <vfprintf+0x1e0>
    74d6:	b6 01       	movw	r22, r12
    74d8:	80 e2       	ldi	r24, 0x20	; 32
    74da:	90 e0       	ldi	r25, 0x00	; 0
    74dc:	33 d1       	rcall	.+614    	; 0x7744 <fputc>
    74de:	2a 94       	dec	r2
    74e0:	f5 cf       	rjmp	.-22     	; 0x74cc <vfprintf+0x1ae>
    74e2:	f5 01       	movw	r30, r10
    74e4:	37 fc       	sbrc	r3, 7
    74e6:	85 91       	lpm	r24, Z+
    74e8:	37 fe       	sbrs	r3, 7
    74ea:	81 91       	ld	r24, Z+
    74ec:	5f 01       	movw	r10, r30
    74ee:	b6 01       	movw	r22, r12
    74f0:	90 e0       	ldi	r25, 0x00	; 0
    74f2:	28 d1       	rcall	.+592    	; 0x7744 <fputc>
    74f4:	21 10       	cpse	r2, r1
    74f6:	2a 94       	dec	r2
    74f8:	21 e0       	ldi	r18, 0x01	; 1
    74fa:	82 1a       	sub	r8, r18
    74fc:	91 08       	sbc	r9, r1
    74fe:	81 14       	cp	r8, r1
    7500:	91 04       	cpc	r9, r1
    7502:	79 f7       	brne	.-34     	; 0x74e2 <vfprintf+0x1c4>
    7504:	e1 c0       	rjmp	.+450    	; 0x76c8 <vfprintf+0x3aa>
    7506:	84 36       	cpi	r24, 0x64	; 100
    7508:	11 f0       	breq	.+4      	; 0x750e <vfprintf+0x1f0>
    750a:	89 36       	cpi	r24, 0x69	; 105
    750c:	39 f5       	brne	.+78     	; 0x755c <vfprintf+0x23e>
    750e:	f8 01       	movw	r30, r16
    7510:	37 fe       	sbrs	r3, 7
    7512:	07 c0       	rjmp	.+14     	; 0x7522 <vfprintf+0x204>
    7514:	60 81       	ld	r22, Z
    7516:	71 81       	ldd	r23, Z+1	; 0x01
    7518:	82 81       	ldd	r24, Z+2	; 0x02
    751a:	93 81       	ldd	r25, Z+3	; 0x03
    751c:	0c 5f       	subi	r16, 0xFC	; 252
    751e:	1f 4f       	sbci	r17, 0xFF	; 255
    7520:	08 c0       	rjmp	.+16     	; 0x7532 <vfprintf+0x214>
    7522:	60 81       	ld	r22, Z
    7524:	71 81       	ldd	r23, Z+1	; 0x01
    7526:	07 2e       	mov	r0, r23
    7528:	00 0c       	add	r0, r0
    752a:	88 0b       	sbc	r24, r24
    752c:	99 0b       	sbc	r25, r25
    752e:	0e 5f       	subi	r16, 0xFE	; 254
    7530:	1f 4f       	sbci	r17, 0xFF	; 255
    7532:	f3 2d       	mov	r31, r3
    7534:	ff 76       	andi	r31, 0x6F	; 111
    7536:	3f 2e       	mov	r3, r31
    7538:	97 ff       	sbrs	r25, 7
    753a:	09 c0       	rjmp	.+18     	; 0x754e <vfprintf+0x230>
    753c:	90 95       	com	r25
    753e:	80 95       	com	r24
    7540:	70 95       	com	r23
    7542:	61 95       	neg	r22
    7544:	7f 4f       	sbci	r23, 0xFF	; 255
    7546:	8f 4f       	sbci	r24, 0xFF	; 255
    7548:	9f 4f       	sbci	r25, 0xFF	; 255
    754a:	f0 68       	ori	r31, 0x80	; 128
    754c:	3f 2e       	mov	r3, r31
    754e:	2a e0       	ldi	r18, 0x0A	; 10
    7550:	30 e0       	ldi	r19, 0x00	; 0
    7552:	a3 01       	movw	r20, r6
    7554:	33 d1       	rcall	.+614    	; 0x77bc <__ultoa_invert>
    7556:	88 2e       	mov	r8, r24
    7558:	86 18       	sub	r8, r6
    755a:	44 c0       	rjmp	.+136    	; 0x75e4 <vfprintf+0x2c6>
    755c:	85 37       	cpi	r24, 0x75	; 117
    755e:	31 f4       	brne	.+12     	; 0x756c <vfprintf+0x24e>
    7560:	23 2d       	mov	r18, r3
    7562:	2f 7e       	andi	r18, 0xEF	; 239
    7564:	b2 2e       	mov	r11, r18
    7566:	2a e0       	ldi	r18, 0x0A	; 10
    7568:	30 e0       	ldi	r19, 0x00	; 0
    756a:	25 c0       	rjmp	.+74     	; 0x75b6 <vfprintf+0x298>
    756c:	93 2d       	mov	r25, r3
    756e:	99 7f       	andi	r25, 0xF9	; 249
    7570:	b9 2e       	mov	r11, r25
    7572:	8f 36       	cpi	r24, 0x6F	; 111
    7574:	c1 f0       	breq	.+48     	; 0x75a6 <vfprintf+0x288>
    7576:	18 f4       	brcc	.+6      	; 0x757e <vfprintf+0x260>
    7578:	88 35       	cpi	r24, 0x58	; 88
    757a:	79 f0       	breq	.+30     	; 0x759a <vfprintf+0x27c>
    757c:	ae c0       	rjmp	.+348    	; 0x76da <vfprintf+0x3bc>
    757e:	80 37       	cpi	r24, 0x70	; 112
    7580:	19 f0       	breq	.+6      	; 0x7588 <vfprintf+0x26a>
    7582:	88 37       	cpi	r24, 0x78	; 120
    7584:	21 f0       	breq	.+8      	; 0x758e <vfprintf+0x270>
    7586:	a9 c0       	rjmp	.+338    	; 0x76da <vfprintf+0x3bc>
    7588:	e9 2f       	mov	r30, r25
    758a:	e0 61       	ori	r30, 0x10	; 16
    758c:	be 2e       	mov	r11, r30
    758e:	b4 fe       	sbrs	r11, 4
    7590:	0d c0       	rjmp	.+26     	; 0x75ac <vfprintf+0x28e>
    7592:	fb 2d       	mov	r31, r11
    7594:	f4 60       	ori	r31, 0x04	; 4
    7596:	bf 2e       	mov	r11, r31
    7598:	09 c0       	rjmp	.+18     	; 0x75ac <vfprintf+0x28e>
    759a:	34 fe       	sbrs	r3, 4
    759c:	0a c0       	rjmp	.+20     	; 0x75b2 <vfprintf+0x294>
    759e:	29 2f       	mov	r18, r25
    75a0:	26 60       	ori	r18, 0x06	; 6
    75a2:	b2 2e       	mov	r11, r18
    75a4:	06 c0       	rjmp	.+12     	; 0x75b2 <vfprintf+0x294>
    75a6:	28 e0       	ldi	r18, 0x08	; 8
    75a8:	30 e0       	ldi	r19, 0x00	; 0
    75aa:	05 c0       	rjmp	.+10     	; 0x75b6 <vfprintf+0x298>
    75ac:	20 e1       	ldi	r18, 0x10	; 16
    75ae:	30 e0       	ldi	r19, 0x00	; 0
    75b0:	02 c0       	rjmp	.+4      	; 0x75b6 <vfprintf+0x298>
    75b2:	20 e1       	ldi	r18, 0x10	; 16
    75b4:	32 e0       	ldi	r19, 0x02	; 2
    75b6:	f8 01       	movw	r30, r16
    75b8:	b7 fe       	sbrs	r11, 7
    75ba:	07 c0       	rjmp	.+14     	; 0x75ca <vfprintf+0x2ac>
    75bc:	60 81       	ld	r22, Z
    75be:	71 81       	ldd	r23, Z+1	; 0x01
    75c0:	82 81       	ldd	r24, Z+2	; 0x02
    75c2:	93 81       	ldd	r25, Z+3	; 0x03
    75c4:	0c 5f       	subi	r16, 0xFC	; 252
    75c6:	1f 4f       	sbci	r17, 0xFF	; 255
    75c8:	06 c0       	rjmp	.+12     	; 0x75d6 <vfprintf+0x2b8>
    75ca:	60 81       	ld	r22, Z
    75cc:	71 81       	ldd	r23, Z+1	; 0x01
    75ce:	80 e0       	ldi	r24, 0x00	; 0
    75d0:	90 e0       	ldi	r25, 0x00	; 0
    75d2:	0e 5f       	subi	r16, 0xFE	; 254
    75d4:	1f 4f       	sbci	r17, 0xFF	; 255
    75d6:	a3 01       	movw	r20, r6
    75d8:	f1 d0       	rcall	.+482    	; 0x77bc <__ultoa_invert>
    75da:	88 2e       	mov	r8, r24
    75dc:	86 18       	sub	r8, r6
    75de:	fb 2d       	mov	r31, r11
    75e0:	ff 77       	andi	r31, 0x7F	; 127
    75e2:	3f 2e       	mov	r3, r31
    75e4:	36 fe       	sbrs	r3, 6
    75e6:	0d c0       	rjmp	.+26     	; 0x7602 <vfprintf+0x2e4>
    75e8:	23 2d       	mov	r18, r3
    75ea:	2e 7f       	andi	r18, 0xFE	; 254
    75ec:	a2 2e       	mov	r10, r18
    75ee:	89 14       	cp	r8, r9
    75f0:	58 f4       	brcc	.+22     	; 0x7608 <vfprintf+0x2ea>
    75f2:	34 fe       	sbrs	r3, 4
    75f4:	0b c0       	rjmp	.+22     	; 0x760c <vfprintf+0x2ee>
    75f6:	32 fc       	sbrc	r3, 2
    75f8:	09 c0       	rjmp	.+18     	; 0x760c <vfprintf+0x2ee>
    75fa:	83 2d       	mov	r24, r3
    75fc:	8e 7e       	andi	r24, 0xEE	; 238
    75fe:	a8 2e       	mov	r10, r24
    7600:	05 c0       	rjmp	.+10     	; 0x760c <vfprintf+0x2ee>
    7602:	b8 2c       	mov	r11, r8
    7604:	a3 2c       	mov	r10, r3
    7606:	03 c0       	rjmp	.+6      	; 0x760e <vfprintf+0x2f0>
    7608:	b8 2c       	mov	r11, r8
    760a:	01 c0       	rjmp	.+2      	; 0x760e <vfprintf+0x2f0>
    760c:	b9 2c       	mov	r11, r9
    760e:	a4 fe       	sbrs	r10, 4
    7610:	0f c0       	rjmp	.+30     	; 0x7630 <vfprintf+0x312>
    7612:	fe 01       	movw	r30, r28
    7614:	e8 0d       	add	r30, r8
    7616:	f1 1d       	adc	r31, r1
    7618:	80 81       	ld	r24, Z
    761a:	80 33       	cpi	r24, 0x30	; 48
    761c:	21 f4       	brne	.+8      	; 0x7626 <vfprintf+0x308>
    761e:	9a 2d       	mov	r25, r10
    7620:	99 7e       	andi	r25, 0xE9	; 233
    7622:	a9 2e       	mov	r10, r25
    7624:	09 c0       	rjmp	.+18     	; 0x7638 <vfprintf+0x31a>
    7626:	a2 fe       	sbrs	r10, 2
    7628:	06 c0       	rjmp	.+12     	; 0x7636 <vfprintf+0x318>
    762a:	b3 94       	inc	r11
    762c:	b3 94       	inc	r11
    762e:	04 c0       	rjmp	.+8      	; 0x7638 <vfprintf+0x31a>
    7630:	8a 2d       	mov	r24, r10
    7632:	86 78       	andi	r24, 0x86	; 134
    7634:	09 f0       	breq	.+2      	; 0x7638 <vfprintf+0x31a>
    7636:	b3 94       	inc	r11
    7638:	a3 fc       	sbrc	r10, 3
    763a:	10 c0       	rjmp	.+32     	; 0x765c <vfprintf+0x33e>
    763c:	a0 fe       	sbrs	r10, 0
    763e:	06 c0       	rjmp	.+12     	; 0x764c <vfprintf+0x32e>
    7640:	b2 14       	cp	r11, r2
    7642:	80 f4       	brcc	.+32     	; 0x7664 <vfprintf+0x346>
    7644:	28 0c       	add	r2, r8
    7646:	92 2c       	mov	r9, r2
    7648:	9b 18       	sub	r9, r11
    764a:	0d c0       	rjmp	.+26     	; 0x7666 <vfprintf+0x348>
    764c:	b2 14       	cp	r11, r2
    764e:	58 f4       	brcc	.+22     	; 0x7666 <vfprintf+0x348>
    7650:	b6 01       	movw	r22, r12
    7652:	80 e2       	ldi	r24, 0x20	; 32
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	76 d0       	rcall	.+236    	; 0x7744 <fputc>
    7658:	b3 94       	inc	r11
    765a:	f8 cf       	rjmp	.-16     	; 0x764c <vfprintf+0x32e>
    765c:	b2 14       	cp	r11, r2
    765e:	18 f4       	brcc	.+6      	; 0x7666 <vfprintf+0x348>
    7660:	2b 18       	sub	r2, r11
    7662:	02 c0       	rjmp	.+4      	; 0x7668 <vfprintf+0x34a>
    7664:	98 2c       	mov	r9, r8
    7666:	21 2c       	mov	r2, r1
    7668:	a4 fe       	sbrs	r10, 4
    766a:	0f c0       	rjmp	.+30     	; 0x768a <vfprintf+0x36c>
    766c:	b6 01       	movw	r22, r12
    766e:	80 e3       	ldi	r24, 0x30	; 48
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	68 d0       	rcall	.+208    	; 0x7744 <fputc>
    7674:	a2 fe       	sbrs	r10, 2
    7676:	16 c0       	rjmp	.+44     	; 0x76a4 <vfprintf+0x386>
    7678:	a1 fc       	sbrc	r10, 1
    767a:	03 c0       	rjmp	.+6      	; 0x7682 <vfprintf+0x364>
    767c:	88 e7       	ldi	r24, 0x78	; 120
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	02 c0       	rjmp	.+4      	; 0x7686 <vfprintf+0x368>
    7682:	88 e5       	ldi	r24, 0x58	; 88
    7684:	90 e0       	ldi	r25, 0x00	; 0
    7686:	b6 01       	movw	r22, r12
    7688:	0c c0       	rjmp	.+24     	; 0x76a2 <vfprintf+0x384>
    768a:	8a 2d       	mov	r24, r10
    768c:	86 78       	andi	r24, 0x86	; 134
    768e:	51 f0       	breq	.+20     	; 0x76a4 <vfprintf+0x386>
    7690:	a1 fe       	sbrs	r10, 1
    7692:	02 c0       	rjmp	.+4      	; 0x7698 <vfprintf+0x37a>
    7694:	8b e2       	ldi	r24, 0x2B	; 43
    7696:	01 c0       	rjmp	.+2      	; 0x769a <vfprintf+0x37c>
    7698:	80 e2       	ldi	r24, 0x20	; 32
    769a:	a7 fc       	sbrc	r10, 7
    769c:	8d e2       	ldi	r24, 0x2D	; 45
    769e:	b6 01       	movw	r22, r12
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	50 d0       	rcall	.+160    	; 0x7744 <fputc>
    76a4:	89 14       	cp	r8, r9
    76a6:	30 f4       	brcc	.+12     	; 0x76b4 <vfprintf+0x396>
    76a8:	b6 01       	movw	r22, r12
    76aa:	80 e3       	ldi	r24, 0x30	; 48
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	4a d0       	rcall	.+148    	; 0x7744 <fputc>
    76b0:	9a 94       	dec	r9
    76b2:	f8 cf       	rjmp	.-16     	; 0x76a4 <vfprintf+0x386>
    76b4:	8a 94       	dec	r8
    76b6:	f3 01       	movw	r30, r6
    76b8:	e8 0d       	add	r30, r8
    76ba:	f1 1d       	adc	r31, r1
    76bc:	80 81       	ld	r24, Z
    76be:	b6 01       	movw	r22, r12
    76c0:	90 e0       	ldi	r25, 0x00	; 0
    76c2:	40 d0       	rcall	.+128    	; 0x7744 <fputc>
    76c4:	81 10       	cpse	r8, r1
    76c6:	f6 cf       	rjmp	.-20     	; 0x76b4 <vfprintf+0x396>
    76c8:	22 20       	and	r2, r2
    76ca:	09 f4       	brne	.+2      	; 0x76ce <vfprintf+0x3b0>
    76cc:	4e ce       	rjmp	.-868    	; 0x736a <vfprintf+0x4c>
    76ce:	b6 01       	movw	r22, r12
    76d0:	80 e2       	ldi	r24, 0x20	; 32
    76d2:	90 e0       	ldi	r25, 0x00	; 0
    76d4:	37 d0       	rcall	.+110    	; 0x7744 <fputc>
    76d6:	2a 94       	dec	r2
    76d8:	f7 cf       	rjmp	.-18     	; 0x76c8 <vfprintf+0x3aa>
    76da:	f6 01       	movw	r30, r12
    76dc:	86 81       	ldd	r24, Z+6	; 0x06
    76de:	97 81       	ldd	r25, Z+7	; 0x07
    76e0:	02 c0       	rjmp	.+4      	; 0x76e6 <vfprintf+0x3c8>
    76e2:	8f ef       	ldi	r24, 0xFF	; 255
    76e4:	9f ef       	ldi	r25, 0xFF	; 255
    76e6:	2b 96       	adiw	r28, 0x0b	; 11
    76e8:	0f b6       	in	r0, 0x3f	; 63
    76ea:	f8 94       	cli
    76ec:	de bf       	out	0x3e, r29	; 62
    76ee:	0f be       	out	0x3f, r0	; 63
    76f0:	cd bf       	out	0x3d, r28	; 61
    76f2:	df 91       	pop	r29
    76f4:	cf 91       	pop	r28
    76f6:	1f 91       	pop	r17
    76f8:	0f 91       	pop	r16
    76fa:	ff 90       	pop	r15
    76fc:	ef 90       	pop	r14
    76fe:	df 90       	pop	r13
    7700:	cf 90       	pop	r12
    7702:	bf 90       	pop	r11
    7704:	af 90       	pop	r10
    7706:	9f 90       	pop	r9
    7708:	8f 90       	pop	r8
    770a:	7f 90       	pop	r7
    770c:	6f 90       	pop	r6
    770e:	5f 90       	pop	r5
    7710:	4f 90       	pop	r4
    7712:	3f 90       	pop	r3
    7714:	2f 90       	pop	r2
    7716:	08 95       	ret

00007718 <strnlen_P>:
    7718:	fc 01       	movw	r30, r24
    771a:	05 90       	lpm	r0, Z+
    771c:	61 50       	subi	r22, 0x01	; 1
    771e:	70 40       	sbci	r23, 0x00	; 0
    7720:	01 10       	cpse	r0, r1
    7722:	d8 f7       	brcc	.-10     	; 0x771a <strnlen_P+0x2>
    7724:	80 95       	com	r24
    7726:	90 95       	com	r25
    7728:	8e 0f       	add	r24, r30
    772a:	9f 1f       	adc	r25, r31
    772c:	08 95       	ret

0000772e <strnlen>:
    772e:	fc 01       	movw	r30, r24
    7730:	61 50       	subi	r22, 0x01	; 1
    7732:	70 40       	sbci	r23, 0x00	; 0
    7734:	01 90       	ld	r0, Z+
    7736:	01 10       	cpse	r0, r1
    7738:	d8 f7       	brcc	.-10     	; 0x7730 <strnlen+0x2>
    773a:	80 95       	com	r24
    773c:	90 95       	com	r25
    773e:	8e 0f       	add	r24, r30
    7740:	9f 1f       	adc	r25, r31
    7742:	08 95       	ret

00007744 <fputc>:
    7744:	0f 93       	push	r16
    7746:	1f 93       	push	r17
    7748:	cf 93       	push	r28
    774a:	df 93       	push	r29
    774c:	fb 01       	movw	r30, r22
    774e:	23 81       	ldd	r18, Z+3	; 0x03
    7750:	21 fd       	sbrc	r18, 1
    7752:	03 c0       	rjmp	.+6      	; 0x775a <fputc+0x16>
    7754:	8f ef       	ldi	r24, 0xFF	; 255
    7756:	9f ef       	ldi	r25, 0xFF	; 255
    7758:	2c c0       	rjmp	.+88     	; 0x77b2 <fputc+0x6e>
    775a:	22 ff       	sbrs	r18, 2
    775c:	16 c0       	rjmp	.+44     	; 0x778a <fputc+0x46>
    775e:	46 81       	ldd	r20, Z+6	; 0x06
    7760:	57 81       	ldd	r21, Z+7	; 0x07
    7762:	24 81       	ldd	r18, Z+4	; 0x04
    7764:	35 81       	ldd	r19, Z+5	; 0x05
    7766:	42 17       	cp	r20, r18
    7768:	53 07       	cpc	r21, r19
    776a:	44 f4       	brge	.+16     	; 0x777c <fputc+0x38>
    776c:	a0 81       	ld	r26, Z
    776e:	b1 81       	ldd	r27, Z+1	; 0x01
    7770:	9d 01       	movw	r18, r26
    7772:	2f 5f       	subi	r18, 0xFF	; 255
    7774:	3f 4f       	sbci	r19, 0xFF	; 255
    7776:	31 83       	std	Z+1, r19	; 0x01
    7778:	20 83       	st	Z, r18
    777a:	8c 93       	st	X, r24
    777c:	26 81       	ldd	r18, Z+6	; 0x06
    777e:	37 81       	ldd	r19, Z+7	; 0x07
    7780:	2f 5f       	subi	r18, 0xFF	; 255
    7782:	3f 4f       	sbci	r19, 0xFF	; 255
    7784:	37 83       	std	Z+7, r19	; 0x07
    7786:	26 83       	std	Z+6, r18	; 0x06
    7788:	14 c0       	rjmp	.+40     	; 0x77b2 <fputc+0x6e>
    778a:	8b 01       	movw	r16, r22
    778c:	ec 01       	movw	r28, r24
    778e:	fb 01       	movw	r30, r22
    7790:	00 84       	ldd	r0, Z+8	; 0x08
    7792:	f1 85       	ldd	r31, Z+9	; 0x09
    7794:	e0 2d       	mov	r30, r0
    7796:	19 95       	eicall
    7798:	89 2b       	or	r24, r25
    779a:	e1 f6       	brne	.-72     	; 0x7754 <fputc+0x10>
    779c:	d8 01       	movw	r26, r16
    779e:	16 96       	adiw	r26, 0x06	; 6
    77a0:	8d 91       	ld	r24, X+
    77a2:	9c 91       	ld	r25, X
    77a4:	17 97       	sbiw	r26, 0x07	; 7
    77a6:	01 96       	adiw	r24, 0x01	; 1
    77a8:	17 96       	adiw	r26, 0x07	; 7
    77aa:	9c 93       	st	X, r25
    77ac:	8e 93       	st	-X, r24
    77ae:	16 97       	sbiw	r26, 0x06	; 6
    77b0:	ce 01       	movw	r24, r28
    77b2:	df 91       	pop	r29
    77b4:	cf 91       	pop	r28
    77b6:	1f 91       	pop	r17
    77b8:	0f 91       	pop	r16
    77ba:	08 95       	ret

000077bc <__ultoa_invert>:
    77bc:	fa 01       	movw	r30, r20
    77be:	aa 27       	eor	r26, r26
    77c0:	28 30       	cpi	r18, 0x08	; 8
    77c2:	51 f1       	breq	.+84     	; 0x7818 <__ultoa_invert+0x5c>
    77c4:	20 31       	cpi	r18, 0x10	; 16
    77c6:	81 f1       	breq	.+96     	; 0x7828 <__ultoa_invert+0x6c>
    77c8:	e8 94       	clt
    77ca:	6f 93       	push	r22
    77cc:	6e 7f       	andi	r22, 0xFE	; 254
    77ce:	6e 5f       	subi	r22, 0xFE	; 254
    77d0:	7f 4f       	sbci	r23, 0xFF	; 255
    77d2:	8f 4f       	sbci	r24, 0xFF	; 255
    77d4:	9f 4f       	sbci	r25, 0xFF	; 255
    77d6:	af 4f       	sbci	r26, 0xFF	; 255
    77d8:	b1 e0       	ldi	r27, 0x01	; 1
    77da:	3e d0       	rcall	.+124    	; 0x7858 <__ultoa_invert+0x9c>
    77dc:	b4 e0       	ldi	r27, 0x04	; 4
    77de:	3c d0       	rcall	.+120    	; 0x7858 <__ultoa_invert+0x9c>
    77e0:	67 0f       	add	r22, r23
    77e2:	78 1f       	adc	r23, r24
    77e4:	89 1f       	adc	r24, r25
    77e6:	9a 1f       	adc	r25, r26
    77e8:	a1 1d       	adc	r26, r1
    77ea:	68 0f       	add	r22, r24
    77ec:	79 1f       	adc	r23, r25
    77ee:	8a 1f       	adc	r24, r26
    77f0:	91 1d       	adc	r25, r1
    77f2:	a1 1d       	adc	r26, r1
    77f4:	6a 0f       	add	r22, r26
    77f6:	71 1d       	adc	r23, r1
    77f8:	81 1d       	adc	r24, r1
    77fa:	91 1d       	adc	r25, r1
    77fc:	a1 1d       	adc	r26, r1
    77fe:	20 d0       	rcall	.+64     	; 0x7840 <__ultoa_invert+0x84>
    7800:	09 f4       	brne	.+2      	; 0x7804 <__ultoa_invert+0x48>
    7802:	68 94       	set
    7804:	3f 91       	pop	r19
    7806:	2a e0       	ldi	r18, 0x0A	; 10
    7808:	26 9f       	mul	r18, r22
    780a:	11 24       	eor	r1, r1
    780c:	30 19       	sub	r19, r0
    780e:	30 5d       	subi	r19, 0xD0	; 208
    7810:	31 93       	st	Z+, r19
    7812:	de f6       	brtc	.-74     	; 0x77ca <__ultoa_invert+0xe>
    7814:	cf 01       	movw	r24, r30
    7816:	08 95       	ret
    7818:	46 2f       	mov	r20, r22
    781a:	47 70       	andi	r20, 0x07	; 7
    781c:	40 5d       	subi	r20, 0xD0	; 208
    781e:	41 93       	st	Z+, r20
    7820:	b3 e0       	ldi	r27, 0x03	; 3
    7822:	0f d0       	rcall	.+30     	; 0x7842 <__ultoa_invert+0x86>
    7824:	c9 f7       	brne	.-14     	; 0x7818 <__ultoa_invert+0x5c>
    7826:	f6 cf       	rjmp	.-20     	; 0x7814 <__ultoa_invert+0x58>
    7828:	46 2f       	mov	r20, r22
    782a:	4f 70       	andi	r20, 0x0F	; 15
    782c:	40 5d       	subi	r20, 0xD0	; 208
    782e:	4a 33       	cpi	r20, 0x3A	; 58
    7830:	18 f0       	brcs	.+6      	; 0x7838 <__ultoa_invert+0x7c>
    7832:	49 5d       	subi	r20, 0xD9	; 217
    7834:	31 fd       	sbrc	r19, 1
    7836:	40 52       	subi	r20, 0x20	; 32
    7838:	41 93       	st	Z+, r20
    783a:	02 d0       	rcall	.+4      	; 0x7840 <__ultoa_invert+0x84>
    783c:	a9 f7       	brne	.-22     	; 0x7828 <__ultoa_invert+0x6c>
    783e:	ea cf       	rjmp	.-44     	; 0x7814 <__ultoa_invert+0x58>
    7840:	b4 e0       	ldi	r27, 0x04	; 4
    7842:	a6 95       	lsr	r26
    7844:	97 95       	ror	r25
    7846:	87 95       	ror	r24
    7848:	77 95       	ror	r23
    784a:	67 95       	ror	r22
    784c:	ba 95       	dec	r27
    784e:	c9 f7       	brne	.-14     	; 0x7842 <__ultoa_invert+0x86>
    7850:	00 97       	sbiw	r24, 0x00	; 0
    7852:	61 05       	cpc	r22, r1
    7854:	71 05       	cpc	r23, r1
    7856:	08 95       	ret
    7858:	9b 01       	movw	r18, r22
    785a:	ac 01       	movw	r20, r24
    785c:	0a 2e       	mov	r0, r26
    785e:	06 94       	lsr	r0
    7860:	57 95       	ror	r21
    7862:	47 95       	ror	r20
    7864:	37 95       	ror	r19
    7866:	27 95       	ror	r18
    7868:	ba 95       	dec	r27
    786a:	c9 f7       	brne	.-14     	; 0x785e <__ultoa_invert+0xa2>
    786c:	62 0f       	add	r22, r18
    786e:	73 1f       	adc	r23, r19
    7870:	84 1f       	adc	r24, r20
    7872:	95 1f       	adc	r25, r21
    7874:	a0 1d       	adc	r26, r0
    7876:	08 95       	ret

00007878 <_exit>:
    7878:	f8 94       	cli

0000787a <__stop_program>:
    787a:	ff cf       	rjmp	.-2      	; 0x787a <__stop_program>
